syntax = "proto3";
package registry.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/rollchains/pchain/x/registry/types";

// Params defines the set of module parameters.
message Params {
  option (amino.name) = "registry/params";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // The admin account of the ue module.
  string admin = 1;
}

// VmType is the type of the vm of the network
enum VmType {
  EVM = 0;            // Ethereum, BSC, Polygon, etc.
  SVM = 1;            // Solana
  MOVE_VM = 2;        // Aptos, Sui
  WASM_VM = 3;        // CosmWasm, Near, Polkadot
  CAIRO_VM = 4;       // Starknet
  TRON_VM = 5;        // TRON
  STELLAR_VM = 6;     // Stellar
  BITCOIN_SCRIPT = 7; // Bitcoin, Litecoin, etc.
  OTHER_VM = 8;       // Fallback
}

enum TokenType {
  ERC20 = 0;
  ERC721 = 1;
  ERC1155 = 2;
  OTHER_TOKEN = 3;
}

// GatewayMethods defines the configuration for a method that can be used for universal operations
message GatewayMethods {
  option (amino.name) = "registry/method_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string name = 1;                // Human-readable method name (e.g. "add_funds")
  string identifier = 2;          // Hex-encoded selector or discriminator for the method
  string event_identifier = 3;    // Hex-encoded topic or identifier for emitted event
}

// BlockConfirmation defines the number of blocks to wait for confirmation on the external chain
message BlockConfirmation {
  option (amino.name) = "registry/method_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

	uint32 fast_inbound = 1; // fast number of confirmations, for faster executions in inbound
	uint32 slow_inbound = 2; // slow confirmations, for secure executions
}

// ChainConfig defines the configuration for a supported source or destination chain
message ChainConfig {
  option (amino.name) = "registry/chain_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string chain = 1; // chain is the caip2 identifier of the chain where the owner is located - (e.g. "eip155:1" for Ethereum mainnet)
  VmType vm_type = 2; // vm_type is the type of the virtual machine used by the chain
  string public_rpc_url = 3; // RPC URL for the chain
  
  string gateway_address = 4; // gateway_address is the address of the fee gateway contract on the external chain
  BlockConfirmation block_confirmation = 5; // block_confirmation is the number of blocks to wait for confirmation on the external chain
  
  repeated GatewayMethods gateway_methods = 6; // List of methods that can be used for universal operations

  bool enabled = 7; // Whether this chain is currently enabled or not
}

message NativeRepresentation {
  string denom = 1;              // e.g., Cosmos native token if deployed
  string contract_address = 2;   // Contract address if a wrapper exists
}

message TokenConfig {
  option (amino.name) = "registry/token_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string chain = 1;                        // Chain ID in CAIP-2 format (e.g., eip155:1
  string address = 2;                      // Token address on external chain
  string name = 3;                         // Full token name (e.g., USD Coin)
  string symbol = 4;                       // Ticker (e.g., USDC)
  uint32 decimals = 5;                     // Number of decimals (e.g., 6 or 18)
  bool enabled = 6;                        // Whether this token is enabled for minting/bridging
  string liquidity_cap = 7;                // max supply cap for this token (string big.Int format)
  TokenType token_type = 8;                // Type of the token (e.g., ERC20, ERC721, ERC1155)

  NativeRepresentation native_representation = 9; // Native representation on the chain
}