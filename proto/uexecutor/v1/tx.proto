syntax = "proto3";
package uexecutor.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "uexecutor/v1/types.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/pushchain/push-chain-node/x/uexecutor/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a governance operation for updating the parameters.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // DeployUEA defines a message to deploy a new smart account.
  rpc DeployUEA(MsgDeployUEA) returns (MsgDeployUEAResponse);

  // MintPC defines a message to mint PC tokens to a smart account,
  rpc MintPC(MsgMintPC) returns (MsgMintPCResponse);

  // ExecutePayload defines a message for executing a universal payload
  rpc ExecutePayload(MsgExecutePayload) returns (MsgExecutePayloadResponse);

  // VoteInbound defines a message for voting on synthetic assets bridging from external chain to PC
  rpc VoteInbound(MsgVoteInbound) returns (MsgVoteInboundResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (amino.name) = "uexecutor/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgDeployUEA is the message used to deploy a new smart account.
message MsgDeployUEA {
  option (amino.name) = "uexecutor/MsgDeployUEA";
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // universal_account_id is the identifier of the owner account
  UniversalAccountId universal_account_id = 2;

  // tx_hash is the hash of the transaction in which user locked the tokens
  string tx_hash = 3;
}

// MsgDeployUEAResponse defines the response for MsgDeployUEA.
message MsgDeployUEAResponse {
  // uea is the address of the newly deployed smart account
  bytes UEA = 1;
}

// MsgMintPC represents a message to mint PC tokens to a smart account,
// based on the amount locked by the user in the gateway contract.
message MsgMintPC {
  option (amino.name) = "uexecutor/MsgMintPC";
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // universal_account_id is the identifier of the owner account
  UniversalAccountId universal_account_id = 2;

  // tx_hash is the hash of the transaction in which user locked the tokens
  string tx_hash = 3;
}

// MsgMintPCResponse defines the response for MsgMintPC.
message MsgMintPCResponse {}

// MsgExecutePayload defines a message for executing a universal payload
message MsgExecutePayload {
  option (amino.name) = "uexecutor/MsgExecutePayload";
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // universal_account_id is the identifier of the owner account
  UniversalAccountId universal_account_id = 2;

  // payload is the universal payload to be executed
  UniversalPayload universal_payload = 3;

  // verification_data is the bytes passed as verifier data for the given payload.
  string verification_data = 4;
}

// MsgExecutePayloadResponse defines the response for MsgExecutePayload.
message MsgExecutePayloadResponse {}

// MsgVoteInbound allows a universal validator to vote on an inbound transfer.
message MsgVoteInbound {
  option (amino.name) = "ue/MsgVoteInbound";
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Inbound inbound = 2;
}

// MsgVoteInboundResponse defines the response for MsgExecutePayload.
message MsgVoteInboundResponse {}
