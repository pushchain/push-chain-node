syntax = "proto3";
package uexecutor.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/pushchain/push-chain-node/x/uexecutor/types";

// Params defines the set of module parameters.
message Params {
  option (amino.name) = "uexecutor/params";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // The admin account of the uexecutor module.
  string admin = 1;
}

// VM_TYPE is the type of the vm of the network
enum VM_TYPE {
  EVM = 0;            // Ethereum, BSC, Polygon, etc.
  SVM = 1;            // Solana
  MOVE_VM = 2;        // Aptos, Sui
  WASM_VM = 3;        // CosmWasm, Near, Polkadot
  CAIRO_VM = 4;       // Starknet
  TRON_VM = 5;        // TRON
  STELLAR_VM = 6;     // Stellar
  BITCOIN_SCRIPT = 7; // Bitcoin, Litecoin, etc.
  OTHER_VM = 8;       // Fallback
}

// Signature verification types
enum VerificationType {
  signedVerification = 0; // Signed verification using a signature
  universalTxVerification = 1; // Universal transaction verification
}

// UniversalPayload mirrors the Solidity struct
message UniversalPayload {
  option (amino.name) = "uexecutor/universal_payload";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string to = 1;                 // EVM address as hex string (0x...)
  string value = 2;                  // Amount in upc as string (uint256)
  string data = 3;                    // ABI-encoded calldata
  string gas_limit = 4;             // uint256 as string
  string max_fee_per_gas = 5;       // uint256 as string
  string max_priority_fee_per_gas = 6; // uint256 as string
  string nonce = 7;                 // uint256 as string
  string deadline = 8;              // uint256 as string
  VerificationType v_type = 9; // Type of verification to use before execution
}

// UniversalAccountId is the identifier of a owner account
message UniversalAccountId {
  option (amino.name) = "uexecutor/universal_account";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string chain_namespace = 1; // chain_namespace is the CAIP-2 namespace of the chain where the owner is located (e.g. "eip155" for Ethereum)
  string chain_id = 2; // chain_id is the chain ID of the chain where the owner is located
  string owner = 3; // Owner's public key bytes or address in hex format
}

// MethodConfig defines the configuration for a method that can be used for universal operations
message MethodConfig {
  option (amino.name) = "uexecutor/method_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string name = 1;                // Human-readable method name (e.g. "add_funds")
  string identifier = 2;          // Hex-encoded selector or discriminator for the method
  string event_identifier = 3;    // Hex-encoded topic or identifier for emitted event
}

// ChainConfig defines the configuration for a supported source or destination chain
message ChainConfig {
  option (amino.name) = "uexecutor/chain_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string chain = 1; // chain is the caip2 identifier of the chain where the owner is located - (e.g. "eip155:1" for Ethereum mainnet)
  VM_TYPE vm_type = 2; // vm_type is the type of the virtual machine used by the chain
  string public_rpc_url = 3; // RPC URL for the chain
  
  string gateway_address = 4; // gateway_address is the address of the fee gateway contract on the external chain
  uint64 block_confirmation = 5; // block_confirmation is the number of blocks to wait for confirmation on the external chain
  
  repeated MethodConfig gateway_methods = 6; // List of methods that can be used for universal operations

  bool enabled = 7; // Whether this chain is currently enabled or not
}
