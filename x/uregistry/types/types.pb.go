// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uregistry/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VmType is the type of the vm of the network
type VmType int32

const (
	VmType_UNKNOWN_VM     VmType = 0
	VmType_EVM            VmType = 1
	VmType_SVM            VmType = 2
	VmType_MOVE_VM        VmType = 3
	VmType_WASM_VM        VmType = 4
	VmType_CAIRO_VM       VmType = 5
	VmType_TRON_VM        VmType = 6
	VmType_STELLAR_VM     VmType = 7
	VmType_BITCOIN_SCRIPT VmType = 8
	VmType_OTHER_VM       VmType = 9
)

var VmType_name = map[int32]string{
	0: "UNKNOWN_VM",
	1: "EVM",
	2: "SVM",
	3: "MOVE_VM",
	4: "WASM_VM",
	5: "CAIRO_VM",
	6: "TRON_VM",
	7: "STELLAR_VM",
	8: "BITCOIN_SCRIPT",
	9: "OTHER_VM",
}

var VmType_value = map[string]int32{
	"UNKNOWN_VM":     0,
	"EVM":            1,
	"SVM":            2,
	"MOVE_VM":        3,
	"WASM_VM":        4,
	"CAIRO_VM":       5,
	"TRON_VM":        6,
	"STELLAR_VM":     7,
	"BITCOIN_SCRIPT": 8,
	"OTHER_VM":       9,
}

func (x VmType) String() string {
	return proto.EnumName(VmType_name, int32(x))
}

func (VmType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{0}
}

type TokenType int32

const (
	TokenType_UNKNOWN_TOKEN TokenType = 0
	// EVM
	TokenType_ERC20   TokenType = 1
	TokenType_ERC721  TokenType = 2
	TokenType_ERC1155 TokenType = 3
	// Solana
	TokenType_SPL TokenType = 4
)

var TokenType_name = map[int32]string{
	0: "UNKNOWN_TOKEN",
	1: "ERC20",
	2: "ERC721",
	3: "ERC1155",
	4: "SPL",
}

var TokenType_value = map[string]int32{
	"UNKNOWN_TOKEN": 0,
	"ERC20":         1,
	"ERC721":        2,
	"ERC1155":       3,
	"SPL":           4,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{1}
}

// ConfirmationType defines which type of block confirmation to use
type ConfirmationType int32

const (
	ConfirmationType_CONFIRMATION_UNKNOWN       ConfirmationType = 0
	ConfirmationType_CONFIRMATION_TYPE_STANDARD ConfirmationType = 1
	ConfirmationType_CONFIRMATION_TYPE_FAST     ConfirmationType = 2
)

var ConfirmationType_name = map[int32]string{
	0: "CONFIRMATION_UNKNOWN",
	1: "CONFIRMATION_TYPE_STANDARD",
	2: "CONFIRMATION_TYPE_FAST",
}

var ConfirmationType_value = map[string]int32{
	"CONFIRMATION_UNKNOWN":       0,
	"CONFIRMATION_TYPE_STANDARD": 1,
	"CONFIRMATION_TYPE_FAST":     2,
}

func (x ConfirmationType) String() string {
	return proto.EnumName(ConfirmationType_name, int32(x))
}

func (ConfirmationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{2}
}

// Params defines the set of module parameters.
type Params struct {
	// The admin account of the uregistry module.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

// GatewayMethods defines the configuration for a method that can be used for universal operations
type GatewayMethods struct {
	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Identifier       string           `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	EventIdentifier  string           `protobuf:"bytes,3,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
	ConfirmationType ConfirmationType `protobuf:"varint,4,opt,name=confirmation_type,json=confirmationType,proto3,enum=uregistry.v1.ConfirmationType" json:"confirmation_type,omitempty"`
}

func (m *GatewayMethods) Reset()      { *m = GatewayMethods{} }
func (*GatewayMethods) ProtoMessage() {}
func (*GatewayMethods) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{1}
}
func (m *GatewayMethods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMethods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMethods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMethods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMethods.Merge(m, src)
}
func (m *GatewayMethods) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMethods) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMethods.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMethods proto.InternalMessageInfo

func (m *GatewayMethods) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GatewayMethods) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *GatewayMethods) GetEventIdentifier() string {
	if m != nil {
		return m.EventIdentifier
	}
	return ""
}

func (m *GatewayMethods) GetConfirmationType() ConfirmationType {
	if m != nil {
		return m.ConfirmationType
	}
	return ConfirmationType_CONFIRMATION_UNKNOWN
}

// BlockConfirmation defines the number of blocks to wait for confirmation on the external chain
type BlockConfirmation struct {
	FastInbound     uint32 `protobuf:"varint,1,opt,name=fast_inbound,json=fastInbound,proto3" json:"fast_inbound,omitempty"`
	StandardInbound uint32 `protobuf:"varint,2,opt,name=standard_inbound,json=standardInbound,proto3" json:"standard_inbound,omitempty"`
}

func (m *BlockConfirmation) Reset()      { *m = BlockConfirmation{} }
func (*BlockConfirmation) ProtoMessage() {}
func (*BlockConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{2}
}
func (m *BlockConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockConfirmation.Merge(m, src)
}
func (m *BlockConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *BlockConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_BlockConfirmation proto.InternalMessageInfo

func (m *BlockConfirmation) GetFastInbound() uint32 {
	if m != nil {
		return m.FastInbound
	}
	return 0
}

func (m *BlockConfirmation) GetStandardInbound() uint32 {
	if m != nil {
		return m.StandardInbound
	}
	return 0
}

// ChainEnabled defines if chain is enabled for inbound as well as outbound
type ChainEnabled struct {
	IsInboundEnabled  bool `protobuf:"varint,1,opt,name=isInboundEnabled,proto3" json:"isInboundEnabled,omitempty"`
	IsOutboundEnabled bool `protobuf:"varint,2,opt,name=isOutboundEnabled,proto3" json:"isOutboundEnabled,omitempty"`
}

func (m *ChainEnabled) Reset()      { *m = ChainEnabled{} }
func (*ChainEnabled) ProtoMessage() {}
func (*ChainEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{3}
}
func (m *ChainEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainEnabled.Merge(m, src)
}
func (m *ChainEnabled) XXX_Size() int {
	return m.Size()
}
func (m *ChainEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_ChainEnabled proto.InternalMessageInfo

func (m *ChainEnabled) GetIsInboundEnabled() bool {
	if m != nil {
		return m.IsInboundEnabled
	}
	return false
}

func (m *ChainEnabled) GetIsOutboundEnabled() bool {
	if m != nil {
		return m.IsOutboundEnabled
	}
	return false
}

// ChainConfig defines the configuration for a supported source or destination chain
type ChainConfig struct {
	Chain             string             `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	VmType            VmType             `protobuf:"varint,2,opt,name=vm_type,json=vmType,proto3,enum=uregistry.v1.VmType" json:"vm_type,omitempty"`
	PublicRpcUrl      string             `protobuf:"bytes,3,opt,name=public_rpc_url,json=publicRpcUrl,proto3" json:"public_rpc_url,omitempty"`
	GatewayAddress    string             `protobuf:"bytes,4,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	BlockConfirmation *BlockConfirmation `protobuf:"bytes,5,opt,name=block_confirmation,json=blockConfirmation,proto3" json:"block_confirmation,omitempty"`
	GatewayMethods    []*GatewayMethods  `protobuf:"bytes,6,rep,name=gateway_methods,json=gatewayMethods,proto3" json:"gateway_methods,omitempty"`
	Enabled           *ChainEnabled      `protobuf:"bytes,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *ChainConfig) Reset()      { *m = ChainConfig{} }
func (*ChainConfig) ProtoMessage() {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{4}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *ChainConfig) GetVmType() VmType {
	if m != nil {
		return m.VmType
	}
	return VmType_UNKNOWN_VM
}

func (m *ChainConfig) GetPublicRpcUrl() string {
	if m != nil {
		return m.PublicRpcUrl
	}
	return ""
}

func (m *ChainConfig) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *ChainConfig) GetBlockConfirmation() *BlockConfirmation {
	if m != nil {
		return m.BlockConfirmation
	}
	return nil
}

func (m *ChainConfig) GetGatewayMethods() []*GatewayMethods {
	if m != nil {
		return m.GatewayMethods
	}
	return nil
}

func (m *ChainConfig) GetEnabled() *ChainEnabled {
	if m != nil {
		return m.Enabled
	}
	return nil
}

type NativeRepresentation struct {
	Denom           string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *NativeRepresentation) Reset()      { *m = NativeRepresentation{} }
func (*NativeRepresentation) ProtoMessage() {}
func (*NativeRepresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{5}
}
func (m *NativeRepresentation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeRepresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeRepresentation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeRepresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeRepresentation.Merge(m, src)
}
func (m *NativeRepresentation) XXX_Size() int {
	return m.Size()
}
func (m *NativeRepresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeRepresentation.DiscardUnknown(m)
}

var xxx_messageInfo_NativeRepresentation proto.InternalMessageInfo

func (m *NativeRepresentation) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *NativeRepresentation) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type TokenConfig struct {
	Chain                string                `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address              string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Name                 string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string                `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals             uint32                `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Enabled              bool                  `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LiquidityCap         string                `protobuf:"bytes,7,opt,name=liquidity_cap,json=liquidityCap,proto3" json:"liquidity_cap,omitempty"`
	TokenType            TokenType             `protobuf:"varint,8,opt,name=token_type,json=tokenType,proto3,enum=uregistry.v1.TokenType" json:"token_type,omitempty"`
	NativeRepresentation *NativeRepresentation `protobuf:"bytes,9,opt,name=native_representation,json=nativeRepresentation,proto3" json:"native_representation,omitempty"`
}

func (m *TokenConfig) Reset()      { *m = TokenConfig{} }
func (*TokenConfig) ProtoMessage() {}
func (*TokenConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{6}
}
func (m *TokenConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenConfig.Merge(m, src)
}
func (m *TokenConfig) XXX_Size() int {
	return m.Size()
}
func (m *TokenConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TokenConfig proto.InternalMessageInfo

func (m *TokenConfig) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *TokenConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TokenConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenConfig) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenConfig) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *TokenConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *TokenConfig) GetLiquidityCap() string {
	if m != nil {
		return m.LiquidityCap
	}
	return ""
}

func (m *TokenConfig) GetTokenType() TokenType {
	if m != nil {
		return m.TokenType
	}
	return TokenType_UNKNOWN_TOKEN
}

func (m *TokenConfig) GetNativeRepresentation() *NativeRepresentation {
	if m != nil {
		return m.NativeRepresentation
	}
	return nil
}

type SystemConfig struct {
	UniversalCoreAddress string `protobuf:"bytes,1,opt,name=universal_core_address,json=universalCoreAddress,proto3" json:"universal_core_address,omitempty"`
}

func (m *SystemConfig) Reset()      { *m = SystemConfig{} }
func (*SystemConfig) ProtoMessage() {}
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_11eea54f17422d86, []int{7}
}
func (m *SystemConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemConfig.Merge(m, src)
}
func (m *SystemConfig) XXX_Size() int {
	return m.Size()
}
func (m *SystemConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SystemConfig proto.InternalMessageInfo

func (m *SystemConfig) GetUniversalCoreAddress() string {
	if m != nil {
		return m.UniversalCoreAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("uregistry.v1.VmType", VmType_name, VmType_value)
	proto.RegisterEnum("uregistry.v1.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("uregistry.v1.ConfirmationType", ConfirmationType_name, ConfirmationType_value)
	proto.RegisterType((*Params)(nil), "uregistry.v1.Params")
	proto.RegisterType((*GatewayMethods)(nil), "uregistry.v1.GatewayMethods")
	proto.RegisterType((*BlockConfirmation)(nil), "uregistry.v1.BlockConfirmation")
	proto.RegisterType((*ChainEnabled)(nil), "uregistry.v1.ChainEnabled")
	proto.RegisterType((*ChainConfig)(nil), "uregistry.v1.ChainConfig")
	proto.RegisterType((*NativeRepresentation)(nil), "uregistry.v1.NativeRepresentation")
	proto.RegisterType((*TokenConfig)(nil), "uregistry.v1.TokenConfig")
	proto.RegisterType((*SystemConfig)(nil), "uregistry.v1.SystemConfig")
}

func init() { proto.RegisterFile("uregistry/v1/types.proto", fileDescriptor_11eea54f17422d86) }

var fileDescriptor_11eea54f17422d86 = []byte{
	// 1055 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0x8e, 0x93, 0x36, 0x69, 0x4e, 0xd2, 0xd4, 0xb9, 0x0a, 0x9d, 0x10, 0x0d, 0x69, 0xc9, 0x8c,
	0xa0, 0x53, 0x4d, 0x1b, 0x5a, 0x66, 0x06, 0x29, 0x12, 0x8b, 0xd4, 0xe3, 0x81, 0xa8, 0x4d, 0x52,
	0xdd, 0x78, 0x5a, 0xc1, 0xc6, 0x72, 0xec, 0xdb, 0xc4, 0x4c, 0xfc, 0x83, 0x7d, 0x13, 0xc8, 0x03,
	0xb0, 0x41, 0x08, 0x81, 0xd8, 0xb0, 0x9c, 0x47, 0xe0, 0x31, 0x58, 0xce, 0x92, 0x25, 0x6a, 0x91,
	0xe0, 0x19, 0x58, 0xa1, 0x7b, 0x6d, 0x27, 0x76, 0xd3, 0x61, 0xd3, 0xde, 0xf3, 0xe3, 0x73, 0xbe,
	0x73, 0xbe, 0xef, 0xda, 0x81, 0xea, 0xd4, 0x23, 0x23, 0xd3, 0xa7, 0xde, 0xbc, 0x39, 0x3b, 0x6a,
	0xd2, 0xb9, 0x4b, 0xfc, 0x43, 0xd7, 0x73, 0xa8, 0x83, 0x8a, 0x8b, 0xc8, 0xe1, 0xec, 0xa8, 0x56,
	0x19, 0x39, 0x23, 0x87, 0x07, 0x9a, 0xec, 0x14, 0xe4, 0xd4, 0xca, 0x9a, 0x65, 0xda, 0x4e, 0x93,
	0xff, 0x0d, 0x5c, 0x8d, 0x4f, 0x21, 0x7b, 0xae, 0x79, 0x9a, 0xe5, 0xa3, 0x0a, 0xac, 0x6b, 0x86,
	0x65, 0xda, 0x55, 0x61, 0x57, 0xd8, 0xcb, 0xe3, 0xc0, 0x68, 0xbd, 0xf7, 0xeb, 0xeb, 0x9d, 0xd4,
	0x3f, 0xaf, 0x77, 0x84, 0xef, 0xff, 0xfe, 0x6d, 0x5f, 0x5c, 0x76, 0x77, 0xf9, 0x43, 0x8d, 0xbf,
	0x04, 0x28, 0x7d, 0xa6, 0x51, 0xf2, 0x8d, 0x36, 0xef, 0x12, 0x3a, 0x76, 0x0c, 0x1f, 0x21, 0x58,
	0xb3, 0x35, 0x8b, 0x84, 0x65, 0xf8, 0x19, 0xd5, 0x01, 0x4c, 0x83, 0xd8, 0xd4, 0xbc, 0x32, 0x89,
	0x57, 0x4d, 0xf3, 0x48, 0xcc, 0x83, 0x1e, 0x81, 0x48, 0x66, 0xc4, 0xa6, 0x6a, 0x2c, 0x2b, 0xc3,
	0xb3, 0xb6, 0xb8, 0xbf, 0xb3, 0x4c, 0x3d, 0x85, 0xb2, 0xee, 0xd8, 0x57, 0xa6, 0x67, 0x69, 0xd4,
	0x74, 0x6c, 0x95, 0xed, 0xa0, 0xba, 0xb6, 0x2b, 0xec, 0x95, 0x8e, 0xeb, 0x87, 0xf1, 0x1d, 0x1c,
	0x4a, 0xb1, 0x34, 0x65, 0xee, 0x12, 0x2c, 0xea, 0xb7, 0x3c, 0xad, 0x0f, 0xe2, 0xd3, 0xbd, 0xbb,
	0x9c, 0x6e, 0x14, 0x8c, 0xa4, 0x5a, 0xc1, 0x4c, 0x8d, 0x1f, 0x04, 0x28, 0x9f, 0x4c, 0x1c, 0xfd,
	0x55, 0xbc, 0x26, 0x7a, 0x1f, 0x8a, 0x57, 0x9a, 0x4f, 0x55, 0xd3, 0x1e, 0x3a, 0x53, 0xdb, 0xe0,
	0x13, 0x6f, 0xe2, 0x02, 0xf3, 0x75, 0x02, 0x17, 0x1b, 0xcc, 0xa7, 0x9a, 0x6d, 0x68, 0x9e, 0xb1,
	0x48, 0x4b, 0xf3, 0xb4, 0xad, 0xc8, 0x1f, 0xa6, 0xb6, 0x1e, 0xc5, 0xb1, 0xdc, 0x5f, 0x62, 0x19,
	0xb2, 0xbe, 0x6a, 0x1c, 0x7a, 0xe3, 0x47, 0x01, 0x8a, 0xd2, 0x58, 0x33, 0x6d, 0xd9, 0xd6, 0x86,
	0x13, 0x62, 0xa0, 0x7d, 0x10, 0x4d, 0x3f, 0x2c, 0x14, 0xfa, 0x38, 0x9a, 0x0d, 0xbc, 0xe2, 0x47,
	0x8f, 0xa1, 0x6c, 0xfa, 0xfd, 0x29, 0x4d, 0x24, 0xa7, 0x79, 0xf2, 0x6a, 0xa0, 0xf5, 0x30, 0x8e,
	0xea, 0xde, 0x12, 0x95, 0xce, 0xda, 0xab, 0x24, 0xc8, 0x6a, 0xfc, 0x92, 0x81, 0x02, 0x07, 0xc4,
	0xf7, 0x33, 0x62, 0x5a, 0xe2, 0x09, 0x91, 0x96, 0xb8, 0x81, 0x0e, 0x20, 0x37, 0xb3, 0x02, 0xc2,
	0xd2, 0x9c, 0xb0, 0x4a, 0x92, 0xb0, 0x0b, 0x8b, 0xd3, 0x94, 0x9d, 0xf1, 0xff, 0xe8, 0x21, 0x94,
	0xdc, 0xe9, 0x70, 0x62, 0xea, 0xaa, 0xe7, 0xea, 0xea, 0xd4, 0x9b, 0x84, 0x92, 0x28, 0x06, 0x5e,
	0xec, 0xea, 0x2f, 0xbd, 0x09, 0xfa, 0x10, 0xb6, 0x22, 0xb6, 0x34, 0xc3, 0xf0, 0x88, 0xef, 0x73,
	0x35, 0xe4, 0x71, 0x29, 0x74, 0xb7, 0x03, 0x2f, 0xea, 0x01, 0x5a, 0x5d, 0x65, 0x75, 0x7d, 0x57,
	0xd8, 0x2b, 0x1c, 0xef, 0x24, 0x81, 0xac, 0x50, 0x8d, 0xcb, 0xc3, 0x15, 0xf6, 0xe5, 0x65, 0xe3,
	0x50, 0x26, 0xd5, 0xec, 0x6e, 0x66, 0xaf, 0x70, 0x7c, 0x3f, 0x59, 0x2c, 0x79, 0x3d, 0x16, 0xb0,
	0xa2, 0xeb, 0xf2, 0x04, 0x72, 0xe1, 0x16, 0xab, 0x39, 0x8e, 0xa5, 0x76, 0x4b, 0xc5, 0x31, 0x9e,
	0x71, 0x94, 0xda, 0x7a, 0x10, 0xa7, 0x65, 0xfb, 0x36, 0x2d, 0x7c, 0xc2, 0x51, 0xe3, 0x3b, 0x01,
	0x2a, 0x3d, 0x8d, 0x9a, 0x33, 0x82, 0x89, 0xeb, 0x11, 0x9f, 0xd8, 0x34, 0x80, 0x5e, 0x81, 0x75,
	0x83, 0xd8, 0x8e, 0x15, 0xd1, 0xc3, 0x0d, 0xa6, 0x55, 0xdd, 0xb1, 0xa9, 0xa7, 0xe9, 0x74, 0xb1,
	0xca, 0xe0, 0xaa, 0x6e, 0x45, 0xfe, 0x70, 0x97, 0xad, 0xc7, 0xf1, 0xf6, 0x3b, 0xcb, 0xf6, 0x36,
	0xef, 0xa6, 0x7a, 0x89, 0x76, 0x8d, 0x7f, 0xd3, 0x50, 0x50, 0x9c, 0x57, 0xe4, 0xff, 0xd5, 0x51,
	0x85, 0x5c, 0xb2, 0x6b, 0x64, 0x2e, 0xde, 0x28, 0x99, 0xd8, 0x1b, 0x65, 0x1b, 0xb2, 0xfe, 0xdc,
	0x1a, 0x3a, 0x93, 0x90, 0xed, 0xd0, 0x42, 0x35, 0xd8, 0x30, 0x88, 0x6e, 0x5a, 0xda, 0xc4, 0xe7,
	0xdc, 0x6e, 0xe2, 0x85, 0xcd, 0x3a, 0x44, 0xab, 0xce, 0x72, 0xbd, 0x47, 0x26, 0x7a, 0x00, 0x9b,
	0x13, 0xf3, 0xeb, 0xa9, 0x69, 0x98, 0x74, 0xae, 0xea, 0x9a, 0xcb, 0xa9, 0xc8, 0xe3, 0xe2, 0xc2,
	0x29, 0x69, 0x2e, 0x7a, 0x06, 0x40, 0xd9, 0x14, 0x81, 0x82, 0x37, 0xb8, 0x82, 0xef, 0x25, 0xc9,
	0xe2, 0x53, 0x72, 0x11, 0xe7, 0x69, 0x74, 0x44, 0x97, 0xf0, 0xce, 0x9d, 0x7b, 0xa9, 0xe6, 0x39,
	0xdf, 0x8d, 0x64, 0x89, 0xbb, 0x08, 0xc3, 0x15, 0xfb, 0x0e, 0xef, 0x5b, 0x45, 0x10, 0xa0, 0x0c,
	0x45, 0xf0, 0x15, 0x14, 0x07, 0x73, 0x9f, 0x12, 0x2b, 0x5c, 0xfe, 0x13, 0xd8, 0x9e, 0xda, 0xe6,
	0x8c, 0x78, 0xbe, 0x36, 0x51, 0x75, 0xc7, 0x23, 0x0b, 0xae, 0x03, 0x36, 0x2a, 0x8b, 0xa8, 0xe4,
	0x78, 0x24, 0x22, 0xfc, 0x6d, 0xaf, 0x01, 0x9f, 0x97, 0x0e, 0x7b, 0xed, 0xff, 0x2c, 0x40, 0x36,
	0xb8, 0xc4, 0xa8, 0x04, 0xf0, 0xb2, 0x77, 0xda, 0xeb, 0x5f, 0xf6, 0xd4, 0x8b, 0xae, 0x98, 0x42,
	0x39, 0xc8, 0xc8, 0x17, 0x5d, 0x51, 0x60, 0x87, 0xc1, 0x45, 0x57, 0x4c, 0xa3, 0x02, 0xe4, 0xba,
	0xfd, 0x0b, 0x99, 0x85, 0x33, 0xcc, 0xb8, 0x6c, 0x0f, 0xba, 0xcc, 0x58, 0x43, 0x45, 0xd8, 0x90,
	0xda, 0x1d, 0xdc, 0x67, 0xd6, 0x3a, 0x0b, 0x29, 0xb8, 0xcf, 0xcb, 0x64, 0x59, 0xd9, 0x81, 0x22,
	0x9f, 0x9d, 0xb5, 0x31, 0xb3, 0x73, 0x08, 0x41, 0xe9, 0xa4, 0xa3, 0x48, 0xfd, 0x4e, 0x4f, 0x1d,
	0x48, 0xb8, 0x73, 0xae, 0x88, 0x1b, 0xec, 0xf1, 0xbe, 0xf2, 0xb9, 0xcc, 0x33, 0xf2, 0xfb, 0xa7,
	0x90, 0x5f, 0xb0, 0x82, 0xca, 0xb0, 0x19, 0xa1, 0x52, 0xfa, 0xa7, 0x72, 0x4f, 0x4c, 0xa1, 0x3c,
	0xac, 0xcb, 0x58, 0x3a, 0xfe, 0x48, 0x14, 0x10, 0x40, 0x56, 0xc6, 0xd2, 0x27, 0xc7, 0x47, 0x01,
	0x3a, 0x19, 0x4b, 0x47, 0x47, 0x4f, 0x9f, 0x8a, 0x19, 0x8e, 0xf9, 0xfc, 0x4c, 0x5c, 0xdb, 0x1f,
	0x83, 0x78, 0xfb, 0xab, 0x82, 0xaa, 0x50, 0x91, 0xfa, 0xbd, 0x17, 0x1d, 0xdc, 0x6d, 0x2b, 0x9d,
	0x7e, 0x4f, 0x0d, 0x1b, 0x88, 0x29, 0x54, 0x87, 0x5a, 0x22, 0xa2, 0x7c, 0x71, 0x2e, 0xab, 0x03,
	0xa5, 0xdd, 0x7b, 0xde, 0xc6, 0xcf, 0x45, 0x01, 0xd5, 0x60, 0x7b, 0x35, 0xfe, 0xa2, 0x3d, 0x50,
	0xc4, 0xf4, 0xc9, 0xf9, 0xef, 0xd7, 0x75, 0xe1, 0xcd, 0x75, 0x5d, 0xf8, 0xf3, 0xba, 0x2e, 0xfc,
	0x74, 0x53, 0x4f, 0xbd, 0xb9, 0xa9, 0xa7, 0xfe, 0xb8, 0xa9, 0xa7, 0xbe, 0x7c, 0x36, 0x32, 0xe9,
	0x78, 0x3a, 0x3c, 0xd4, 0x1d, 0xab, 0xe9, 0x4e, 0xfd, 0x31, 0xbf, 0x3d, 0xfc, 0x74, 0xc0, 0x8f,
	0x07, 0xb6, 0x63, 0x90, 0xe6, 0xb7, 0xcd, 0x98, 0x1e, 0xd8, 0xcf, 0x84, 0x61, 0x96, 0x7f, 0xf0,
	0x3f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xda, 0x8d, 0x4c, 0x43, 0x08, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	return true
}
func (this *GatewayMethods) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayMethods)
	if !ok {
		that2, ok := that.(GatewayMethods)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.EventIdentifier != that1.EventIdentifier {
		return false
	}
	if this.ConfirmationType != that1.ConfirmationType {
		return false
	}
	return true
}
func (this *BlockConfirmation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockConfirmation)
	if !ok {
		that2, ok := that.(BlockConfirmation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FastInbound != that1.FastInbound {
		return false
	}
	if this.StandardInbound != that1.StandardInbound {
		return false
	}
	return true
}
func (this *ChainEnabled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainEnabled)
	if !ok {
		that2, ok := that.(ChainEnabled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsInboundEnabled != that1.IsInboundEnabled {
		return false
	}
	if this.IsOutboundEnabled != that1.IsOutboundEnabled {
		return false
	}
	return true
}
func (this *ChainConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainConfig)
	if !ok {
		that2, ok := that.(ChainConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Chain != that1.Chain {
		return false
	}
	if this.VmType != that1.VmType {
		return false
	}
	if this.PublicRpcUrl != that1.PublicRpcUrl {
		return false
	}
	if this.GatewayAddress != that1.GatewayAddress {
		return false
	}
	if !this.BlockConfirmation.Equal(that1.BlockConfirmation) {
		return false
	}
	if len(this.GatewayMethods) != len(that1.GatewayMethods) {
		return false
	}
	for i := range this.GatewayMethods {
		if !this.GatewayMethods[i].Equal(that1.GatewayMethods[i]) {
			return false
		}
	}
	if !this.Enabled.Equal(that1.Enabled) {
		return false
	}
	return true
}
func (this *NativeRepresentation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NativeRepresentation)
	if !ok {
		that2, ok := that.(NativeRepresentation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.ContractAddress != that1.ContractAddress {
		return false
	}
	return true
}
func (this *TokenConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenConfig)
	if !ok {
		that2, ok := that.(TokenConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Chain != that1.Chain {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.Decimals != that1.Decimals {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.LiquidityCap != that1.LiquidityCap {
		return false
	}
	if this.TokenType != that1.TokenType {
		return false
	}
	if !this.NativeRepresentation.Equal(that1.NativeRepresentation) {
		return false
	}
	return true
}
func (this *SystemConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemConfig)
	if !ok {
		that2, ok := that.(SystemConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UniversalCoreAddress != that1.UniversalCoreAddress {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMethods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMethods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMethods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfirmationType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConfirmationType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EventIdentifier) > 0 {
		i -= len(m.EventIdentifier)
		copy(dAtA[i:], m.EventIdentifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EventIdentifier)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StandardInbound != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StandardInbound))
		i--
		dAtA[i] = 0x10
	}
	if m.FastInbound != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FastInbound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOutboundEnabled {
		i--
		if m.IsOutboundEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsInboundEnabled {
		i--
		if m.IsInboundEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GatewayMethods) > 0 {
		for iNdEx := len(m.GatewayMethods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GatewayMethods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BlockConfirmation != nil {
		{
			size, err := m.BlockConfirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicRpcUrl) > 0 {
		i -= len(m.PublicRpcUrl)
		copy(dAtA[i:], m.PublicRpcUrl)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PublicRpcUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VmType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VmType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeRepresentation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeRepresentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeRepresentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NativeRepresentation != nil {
		{
			size, err := m.NativeRepresentation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.TokenType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.LiquidityCap) > 0 {
		i -= len(m.LiquidityCap)
		copy(dAtA[i:], m.LiquidityCap)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LiquidityCap)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Decimals != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniversalCoreAddress) > 0 {
		i -= len(m.UniversalCoreAddress)
		copy(dAtA[i:], m.UniversalCoreAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UniversalCoreAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GatewayMethods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.EventIdentifier)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConfirmationType != 0 {
		n += 1 + sovTypes(uint64(m.ConfirmationType))
	}
	return n
}

func (m *BlockConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FastInbound != 0 {
		n += 1 + sovTypes(uint64(m.FastInbound))
	}
	if m.StandardInbound != 0 {
		n += 1 + sovTypes(uint64(m.StandardInbound))
	}
	return n
}

func (m *ChainEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsInboundEnabled {
		n += 2
	}
	if m.IsOutboundEnabled {
		n += 2
	}
	return n
}

func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VmType != 0 {
		n += 1 + sovTypes(uint64(m.VmType))
	}
	l = len(m.PublicRpcUrl)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BlockConfirmation != nil {
		l = m.BlockConfirmation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.GatewayMethods) > 0 {
		for _, e := range m.GatewayMethods {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *NativeRepresentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TokenConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovTypes(uint64(m.Decimals))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.LiquidityCap)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TokenType != 0 {
		n += 1 + sovTypes(uint64(m.TokenType))
	}
	if m.NativeRepresentation != nil {
		l = m.NativeRepresentation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SystemConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniversalCoreAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMethods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayMethods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayMethods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationType", wireType)
			}
			m.ConfirmationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationType |= ConfirmationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastInbound", wireType)
			}
			m.FastInbound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastInbound |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandardInbound", wireType)
			}
			m.StandardInbound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StandardInbound |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInboundEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInboundEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOutboundEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOutboundEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmType", wireType)
			}
			m.VmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmType |= VmType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRpcUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRpcUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockConfirmation == nil {
				m.BlockConfirmation = &BlockConfirmation{}
			}
			if err := m.BlockConfirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMethods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayMethods = append(m.GatewayMethods, &GatewayMethods{})
			if err := m.GatewayMethods[len(m.GatewayMethods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &ChainEnabled{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeRepresentation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeRepresentation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeRepresentation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityCap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= TokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeRepresentation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NativeRepresentation == nil {
				m.NativeRepresentation = &NativeRepresentation{}
			}
			if err := m.NativeRepresentation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalCoreAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversalCoreAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
