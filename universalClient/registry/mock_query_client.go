// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rollchains/pchain/x/uregistry/types (interfaces: QueryClient)

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/rollchains/pchain/x/uregistry/types"
	grpc "google.golang.org/grpc"
)

// MockQueryClient is a mock of QueryClient interface.
type MockQueryClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueryClientMockRecorder
}

// MockQueryClientMockRecorder is the mock recorder for MockQueryClient.
type MockQueryClientMockRecorder struct {
	mock *MockQueryClient
}

// NewMockQueryClient creates a new mock instance.
func NewMockQueryClient(ctrl *gomock.Controller) *MockQueryClient {
	mock := &MockQueryClient{ctrl: ctrl}
	mock.recorder = &MockQueryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryClient) EXPECT() *MockQueryClientMockRecorder {
	return m.recorder
}

// AllChainConfigs mocks base method.
func (m *MockQueryClient) AllChainConfigs(arg0 context.Context, arg1 *types.QueryAllChainConfigsRequest, arg2 ...grpc.CallOption) (*types.QueryAllChainConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllChainConfigs", varargs...)
	ret0, _ := ret[0].(*types.QueryAllChainConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllChainConfigs indicates an expected call of AllChainConfigs.
func (mr *MockQueryClientMockRecorder) AllChainConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllChainConfigs", reflect.TypeOf((*MockQueryClient)(nil).AllChainConfigs), varargs...)
}

// AllTokenConfigs mocks base method.
func (m *MockQueryClient) AllTokenConfigs(arg0 context.Context, arg1 *types.QueryAllTokenConfigsRequest, arg2 ...grpc.CallOption) (*types.QueryAllTokenConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllTokenConfigs", varargs...)
	ret0, _ := ret[0].(*types.QueryAllTokenConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllTokenConfigs indicates an expected call of AllTokenConfigs.
func (mr *MockQueryClientMockRecorder) AllTokenConfigs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTokenConfigs", reflect.TypeOf((*MockQueryClient)(nil).AllTokenConfigs), varargs...)
}

// ChainConfig mocks base method.
func (m *MockQueryClient) ChainConfig(arg0 context.Context, arg1 *types.QueryChainConfigRequest, arg2 ...grpc.CallOption) (*types.QueryChainConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChainConfig", varargs...)
	ret0, _ := ret[0].(*types.QueryChainConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainConfig indicates an expected call of ChainConfig.
func (mr *MockQueryClientMockRecorder) ChainConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockQueryClient)(nil).ChainConfig), varargs...)
}

// Params mocks base method.
func (m *MockQueryClient) Params(arg0 context.Context, arg1 *types.QueryParamsRequest, arg2 ...grpc.CallOption) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Params", varargs...)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockQueryClientMockRecorder) Params(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockQueryClient)(nil).Params), varargs...)
}

// TokenConfig mocks base method.
func (m *MockQueryClient) TokenConfig(arg0 context.Context, arg1 *types.QueryTokenConfigRequest, arg2 ...grpc.CallOption) (*types.QueryTokenConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenConfig", varargs...)
	ret0, _ := ret[0].(*types.QueryTokenConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenConfig indicates an expected call of TokenConfig.
func (mr *MockQueryClientMockRecorder) TokenConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenConfig", reflect.TypeOf((*MockQueryClient)(nil).TokenConfig), varargs...)
}

// TokenConfigsByChain mocks base method.
func (m *MockQueryClient) TokenConfigsByChain(arg0 context.Context, arg1 *types.QueryTokenConfigsByChainRequest, arg2 ...grpc.CallOption) (*types.QueryTokenConfigsByChainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenConfigsByChain", varargs...)
	ret0, _ := ret[0].(*types.QueryTokenConfigsByChainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenConfigsByChain indicates an expected call of TokenConfigsByChain.
func (mr *MockQueryClientMockRecorder) TokenConfigsByChain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenConfigsByChain", reflect.TypeOf((*MockQueryClient)(nil).TokenConfigsByChain), varargs...)
}
