syntax = "proto3";
package ue.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/rollchains/pchain/x/ue/types";

// Params defines the set of module parameters.
message Params {
  option (amino.name) = "ue/params";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // The admin account of the ue module.
  string admin = 1;
}

// Signature verification types
enum VerificationType {
  signedVerification = 0; // Signed verification using a signature
  universalTxVerification = 1; // Universal transaction verification
}

// UniversalPayload mirrors the Solidity struct
message UniversalPayload {
  option (amino.name) = "ue/universal_payload";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string to = 1;                 // EVM address as hex string (0x...)
  string value = 2;                  // Amount in upc as string (uint256)
  string data = 3;                    // ABI-encoded calldata
  string gas_limit = 4;             // uint256 as string
  string max_fee_per_gas = 5;       // uint256 as string
  string max_priority_fee_per_gas = 6; // uint256 as string
  string nonce = 7;                 // uint256 as string
  string deadline = 8;              // uint256 as string
  VerificationType v_type = 9; // Type of verification to use before execution
}

// UniversalAccountId is the identifier of a owner account
message UniversalAccountId {
  option (amino.name) = "ue/universal_account";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string chain_namespace = 1; // chain_namespace is the CAIP-2 namespace of the chain where the owner is located (e.g. "eip155" for Ethereum)
  string chain_id = 2; // chain_id is the chain ID of the chain where the owner is located
  string owner = 3; // Owner's public key bytes or address in hex format
}
