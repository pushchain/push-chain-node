// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uexecutor/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
// VM_TYPE is the type of the vm of the network
type VM_TYPE int32

const (
	VM_TYPE_EVM            VM_TYPE = 0
	VM_TYPE_SVM            VM_TYPE = 1
	VM_TYPE_MOVE_VM        VM_TYPE = 2
	VM_TYPE_WASM_VM        VM_TYPE = 3
	VM_TYPE_CAIRO_VM       VM_TYPE = 4
	VM_TYPE_TRON_VM        VM_TYPE = 5
	VM_TYPE_STELLAR_VM     VM_TYPE = 6
	VM_TYPE_BITCOIN_SCRIPT VM_TYPE = 7
	VM_TYPE_OTHER_VM       VM_TYPE = 8
)

var VM_TYPE_name = map[int32]string{
	0: "EVM",
	1: "SVM",
	2: "MOVE_VM",
	3: "WASM_VM",
	4: "CAIRO_VM",
	5: "TRON_VM",
	6: "STELLAR_VM",
	7: "BITCOIN_SCRIPT",
	8: "OTHER_VM",
}

var VM_TYPE_value = map[string]int32{
	"EVM":            0,
	"SVM":            1,
	"MOVE_VM":        2,
	"WASM_VM":        3,
	"CAIRO_VM":       4,
	"TRON_VM":        5,
	"STELLAR_VM":     6,
	"BITCOIN_SCRIPT": 7,
	"OTHER_VM":       8,
}

func (x VM_TYPE) String() string {
	return proto.EnumName(VM_TYPE_name, int32(x))
}

func (VM_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fab6d3ca71d1e2a5, []int{0}
}

=======
>>>>>>> 0feca6d (feat: integrating uregistry methods with ue, utv modules):x/ue/types/types.pb.go
// Signature verification types
type VerificationType int32

const (
	VerificationType_signedVerification      VerificationType = 0
	VerificationType_universalTxVerification VerificationType = 1
)

var VerificationType_name = map[int32]string{
	0: "signedVerification",
	1: "universalTxVerification",
}

var VerificationType_value = map[string]int32{
	"signedVerification":      0,
	"universalTxVerification": 1,
}

func (x VerificationType) String() string {
	return proto.EnumName(VerificationType_name, int32(x))
}

func (VerificationType) EnumDescriptor() ([]byte, []int) {
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
	return fileDescriptor_fab6d3ca71d1e2a5, []int{1}
=======
	return fileDescriptor_8e38d69320e5df94, []int{0}
>>>>>>> 0feca6d (feat: integrating uregistry methods with ue, utv modules):x/ue/types/types.pb.go
}

type UniversalTxStatus int32

const (
	UniversalTxStatus_UNIVERSAL_TX_STATUS_UNSPECIFIED UniversalTxStatus = 0
	UniversalTxStatus_INBOUND_SUCCESS                 UniversalTxStatus = 1
	UniversalTxStatus_PENDING_INBOUND_EXECUTION       UniversalTxStatus = 2
	UniversalTxStatus_PC_EXECUTED_SUCCESS             UniversalTxStatus = 3
	UniversalTxStatus_PC_EXECUTED_FAILED              UniversalTxStatus = 4
	UniversalTxStatus_PC_PENDING_REVERT               UniversalTxStatus = 5
	UniversalTxStatus_OUTBOUND_PENDING                UniversalTxStatus = 6
	UniversalTxStatus_OUTBOUND_SUCCESS                UniversalTxStatus = 7
	UniversalTxStatus_OUTBOUND_FAILED                 UniversalTxStatus = 8
	UniversalTxStatus_CANCELED                        UniversalTxStatus = 9
)

var UniversalTxStatus_name = map[int32]string{
	0: "UNIVERSAL_TX_STATUS_UNSPECIFIED",
	1: "INBOUND_SUCCESS",
	2: "PENDING_INBOUND_EXECUTION",
	3: "PC_EXECUTED_SUCCESS",
	4: "PC_EXECUTED_FAILED",
	5: "PC_PENDING_REVERT",
	6: "OUTBOUND_PENDING",
	7: "OUTBOUND_SUCCESS",
	8: "OUTBOUND_FAILED",
	9: "CANCELED",
}

var UniversalTxStatus_value = map[string]int32{
	"UNIVERSAL_TX_STATUS_UNSPECIFIED": 0,
	"INBOUND_SUCCESS":                 1,
	"PENDING_INBOUND_EXECUTION":       2,
	"PC_EXECUTED_SUCCESS":             3,
	"PC_EXECUTED_FAILED":              4,
	"PC_PENDING_REVERT":               5,
	"OUTBOUND_PENDING":                6,
	"OUTBOUND_SUCCESS":                7,
	"OUTBOUND_FAILED":                 8,
	"CANCELED":                        9,
}

func (x UniversalTxStatus) String() string {
	return proto.EnumName(UniversalTxStatus_name, int32(x))
}

func (UniversalTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{1}
}

type Status int32

const (
	Status_PENDING   Status = 0
	Status_FINALIZED Status = 1
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "FINALIZED",
}

var Status_value = map[string]int32{
	"PENDING":   0,
	"FINALIZED": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{2}
}

// Params defines the set of module parameters.
type Params struct {
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
	// The admin account of the uexecutor module.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
=======
	SomeValue bool `protobuf:"varint,2,opt,name=some_value,json=someValue,proto3" json:"some_value,omitempty"`
>>>>>>> d1e69b5 (refactor(uregistry): modified params of ue to dummy one):x/ue/types/types.pb.go
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab6d3ca71d1e2a5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSomeValue() bool {
	if m != nil {
		return m.SomeValue
	}
	return false
}

// UniversalPayload mirrors the Solidity struct
type UniversalPayload struct {
	To                   string           `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Value                string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Data                 string           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	GasLimit             string           `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	MaxFeePerGas         string           `protobuf:"bytes,5,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string           `protobuf:"bytes,6,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	Nonce                string           `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Deadline             string           `protobuf:"bytes,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
	VType                VerificationType `protobuf:"varint,9,opt,name=v_type,json=vType,proto3,enum=uexecutor.v1.VerificationType" json:"v_type,omitempty"`
}

func (m *UniversalPayload) Reset()      { *m = UniversalPayload{} }
func (*UniversalPayload) ProtoMessage() {}
func (*UniversalPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab6d3ca71d1e2a5, []int{1}
}
func (m *UniversalPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalPayload.Merge(m, src)
}
func (m *UniversalPayload) XXX_Size() int {
	return m.Size()
}
func (m *UniversalPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalPayload proto.InternalMessageInfo

func (m *UniversalPayload) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *UniversalPayload) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UniversalPayload) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *UniversalPayload) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *UniversalPayload) GetMaxFeePerGas() string {
	if m != nil {
		return m.MaxFeePerGas
	}
	return ""
}

func (m *UniversalPayload) GetMaxPriorityFeePerGas() string {
	if m != nil {
		return m.MaxPriorityFeePerGas
	}
	return ""
}

func (m *UniversalPayload) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *UniversalPayload) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *UniversalPayload) GetVType() VerificationType {
	if m != nil {
		return m.VType
	}
	return VerificationType_signedVerification
}

// UniversalAccountId is the identifier of a owner account
type UniversalAccountId struct {
	ChainNamespace string `protobuf:"bytes,1,opt,name=chain_namespace,json=chainNamespace,proto3" json:"chain_namespace,omitempty"`
	ChainId        string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Owner          string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *UniversalAccountId) Reset()      { *m = UniversalAccountId{} }
func (*UniversalAccountId) ProtoMessage() {}
func (*UniversalAccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab6d3ca71d1e2a5, []int{2}
}
func (m *UniversalAccountId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalAccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalAccountId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalAccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalAccountId.Merge(m, src)
}
func (m *UniversalAccountId) XXX_Size() int {
	return m.Size()
}
func (m *UniversalAccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalAccountId.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalAccountId proto.InternalMessageInfo

func (m *UniversalAccountId) GetChainNamespace() string {
	if m != nil {
		return m.ChainNamespace
	}
	return ""
}

func (m *UniversalAccountId) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UniversalAccountId) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
// MethodConfig defines the configuration for a method that can be used for universal operations
type MethodConfig struct {
	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Identifier      string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	EventIdentifier string `protobuf:"bytes,3,opt,name=event_identifier,json=eventIdentifier,proto3" json:"event_identifier,omitempty"`
}

func (m *MethodConfig) Reset()      { *m = MethodConfig{} }
func (*MethodConfig) ProtoMessage() {}
func (*MethodConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab6d3ca71d1e2a5, []int{3}
}
func (m *MethodConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MethodConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MethodConfig.Marshal(b, m, deterministic)
=======
type InboundSynthetic struct {
	SourceChain   string `protobuf:"bytes,1,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	TxHash        string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Sender        string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient     string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount        string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetAddr     string `protobuf:"bytes,6,opt,name=asset_addr,json=assetAddr,proto3" json:"asset_addr,omitempty"`
	LogIndex      string `protobuf:"bytes,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	InboundStatus Status `protobuf:"varint,8,opt,name=inbound_status,json=inboundStatus,proto3,enum=ue.v1.Status" json:"inbound_status,omitempty"`
}

func (m *InboundSynthetic) Reset()      { *m = InboundSynthetic{} }
func (*InboundSynthetic) ProtoMessage() {}
func (*InboundSynthetic) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{3}
}
func (m *InboundSynthetic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundSynthetic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundSynthetic.Marshal(b, m, deterministic)
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
func (m *MethodConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodConfig.Merge(m, src)
}
func (m *MethodConfig) XXX_Size() int {
	return m.Size()
}
func (m *MethodConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MethodConfig proto.InternalMessageInfo

func (m *MethodConfig) GetName() string {
	if m != nil {
		return m.Name
=======
func (m *InboundSynthetic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundSynthetic.Merge(m, src)
}
func (m *InboundSynthetic) XXX_Size() int {
	return m.Size()
}
func (m *InboundSynthetic) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundSynthetic.DiscardUnknown(m)
}

var xxx_messageInfo_InboundSynthetic proto.InternalMessageInfo

func (m *InboundSynthetic) GetSourceChain() string {
	if m != nil {
		return m.SourceChain
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
	}
	return ""
}

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
func (m *MethodConfig) GetIdentifier() string {
	if m != nil {
		return m.Identifier
=======
func (m *InboundSynthetic) GetTxHash() string {
	if m != nil {
		return m.TxHash
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
	}
	return ""
}

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
func (m *MethodConfig) GetEventIdentifier() string {
	if m != nil {
		return m.EventIdentifier
=======
func (m *InboundSynthetic) GetSender() string {
	if m != nil {
		return m.Sender
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
	}
	return ""
}

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
// ChainConfig defines the configuration for a supported source or destination chain
type ChainConfig struct {
	Chain             string          `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	VmType            VM_TYPE         `protobuf:"varint,2,opt,name=vm_type,json=vmType,proto3,enum=uexecutor.v1.VM_TYPE" json:"vm_type,omitempty"`
	PublicRpcUrl      string          `protobuf:"bytes,3,opt,name=public_rpc_url,json=publicRpcUrl,proto3" json:"public_rpc_url,omitempty"`
	GatewayAddress    string          `protobuf:"bytes,4,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	BlockConfirmation uint64          `protobuf:"varint,5,opt,name=block_confirmation,json=blockConfirmation,proto3" json:"block_confirmation,omitempty"`
	GatewayMethods    []*MethodConfig `protobuf:"bytes,6,rep,name=gateway_methods,json=gatewayMethods,proto3" json:"gateway_methods,omitempty"`
	Enabled           bool            `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *ChainConfig) Reset()      { *m = ChainConfig{} }
func (*ChainConfig) ProtoMessage() {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fab6d3ca71d1e2a5, []int{4}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
=======
func (m *InboundSynthetic) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *InboundSynthetic) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *InboundSynthetic) GetAssetAddr() string {
	if m != nil {
		return m.AssetAddr
	}
	return ""
}

func (m *InboundSynthetic) GetLogIndex() string {
	if m != nil {
		return m.LogIndex
	}
	return ""
}

func (m *InboundSynthetic) GetInboundStatus() Status {
	if m != nil {
		return m.InboundStatus
	}
	return Status_PENDING
}

type PCTx struct {
	TxHash      string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Sender      string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	GasUsed     uint64 `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMsg    string `protobuf:"bytes,7,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (m *PCTx) Reset()      { *m = PCTx{} }
func (*PCTx) ProtoMessage() {}
func (*PCTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{4}
}
func (m *PCTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PCTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PCTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PCTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PCTx.Merge(m, src)
}
func (m *PCTx) XXX_Size() int {
	return m.Size()
}
func (m *PCTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PCTx.DiscardUnknown(m)
}

var xxx_messageInfo_PCTx proto.InternalMessageInfo

func (m *PCTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *PCTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *PCTx) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *PCTx) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PCTx) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PCTx) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type OutboundTx struct {
	DestinationChain string `protobuf:"bytes,1,opt,name=destination_chain,json=destinationChain,proto3" json:"destination_chain,omitempty"`
	TxHash           string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Recipient        string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount           string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetAddr        string `protobuf:"bytes,5,opt,name=asset_addr,json=assetAddr,proto3" json:"asset_addr,omitempty"`
}

func (m *OutboundTx) Reset()      { *m = OutboundTx{} }
func (*OutboundTx) ProtoMessage() {}
func (*OutboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{5}
}
func (m *OutboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTx.Merge(m, src)
}
func (m *OutboundTx) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTx proto.InternalMessageInfo

func (m *OutboundTx) GetDestinationChain() string {
	if m != nil {
		return m.DestinationChain
	}
	return ""
}

func (m *OutboundTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *OutboundTx) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *OutboundTx) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *OutboundTx) GetAssetAddr() string {
	if m != nil {
		return m.AssetAddr
	}
	return ""
}

type UniversalTx struct {
	InboundTx       *InboundSynthetic `protobuf:"bytes,1,opt,name=inbound_tx,json=inboundTx,proto3" json:"inbound_tx,omitempty"`
	PxTx            *PCTx             `protobuf:"bytes,2,opt,name=px_tx,json=pxTx,proto3" json:"px_tx,omitempty"`
	OutboundTx      *OutboundTx       `protobuf:"bytes,3,opt,name=outbound_tx,json=outboundTx,proto3" json:"outbound_tx,omitempty"`
	UniversalStatus UniversalTxStatus `protobuf:"varint,4,opt,name=universal_status,json=universalStatus,proto3,enum=ue.v1.UniversalTxStatus" json:"universal_status,omitempty"`
}

func (m *UniversalTx) Reset()      { *m = UniversalTx{} }
func (*UniversalTx) ProtoMessage() {}
func (*UniversalTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{6}
}
func (m *UniversalTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalTx.Marshal(b, m, deterministic)
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetChain() string {
	if m != nil {
		return m.Chain
=======
func (m *UniversalTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalTx.Merge(m, src)
}
func (m *UniversalTx) XXX_Size() int {
	return m.Size()
}
func (m *UniversalTx) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalTx.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalTx proto.InternalMessageInfo

func (m *UniversalTx) GetInboundTx() *InboundSynthetic {
	if m != nil {
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
		return m.InboundKey
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
=======
		return m.InboundTx
>>>>>>> 6f271b2 (refactor: added generated protobuf):x/ue/types/types.pb.go
	}
	return nil
}

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
func (m *ChainConfig) GetVmType() VM_TYPE {
	if m != nil {
		return m.VmType
	}
	return VM_TYPE_EVM
}

func (m *ChainConfig) GetPublicRpcUrl() string {
	if m != nil {
		return m.PublicRpcUrl
	}
	return ""
}

func (m *ChainConfig) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *ChainConfig) GetBlockConfirmation() uint64 {
	if m != nil {
		return m.BlockConfirmation
	}
	return 0
}

func (m *ChainConfig) GetGatewayMethods() []*MethodConfig {
	if m != nil {
		return m.GatewayMethods
	}
	return nil
}

func (m *ChainConfig) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterEnum("uexecutor.v1.VM_TYPE", VM_TYPE_name, VM_TYPE_value)
	proto.RegisterEnum("uexecutor.v1.VerificationType", VerificationType_name, VerificationType_value)
	proto.RegisterType((*Params)(nil), "uexecutor.v1.Params")
	proto.RegisterType((*UniversalPayload)(nil), "uexecutor.v1.UniversalPayload")
	proto.RegisterType((*UniversalAccountId)(nil), "uexecutor.v1.UniversalAccountId")
	proto.RegisterType((*MethodConfig)(nil), "uexecutor.v1.MethodConfig")
	proto.RegisterType((*ChainConfig)(nil), "uexecutor.v1.ChainConfig")
=======
=======
func (m *UniversalTx) GetStatus() UniversalTxStatus {
=======
func (m *UniversalTx) GetPxTx() *PCTx {
>>>>>>> 6f271b2 (refactor: added generated protobuf):x/ue/types/types.pb.go
	if m != nil {
		return m.PxTx
	}
	return nil
}

func (m *UniversalTx) GetOutboundTx() *OutboundTx {
	if m != nil {
		return m.OutboundTx
	}
	return nil
}

func (m *UniversalTx) GetUniversalStatus() UniversalTxStatus {
	if m != nil {
		return m.UniversalStatus
	}
	return UniversalTxStatus_UNIVERSAL_TX_STATUS_UNSPECIFIED
}

>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
func init() {
	proto.RegisterEnum("ue.v1.VerificationType", VerificationType_name, VerificationType_value)
	proto.RegisterEnum("ue.v1.UniversalTxStatus", UniversalTxStatus_name, UniversalTxStatus_value)
	proto.RegisterEnum("ue.v1.Status", Status_name, Status_value)
	proto.RegisterType((*Params)(nil), "ue.v1.Params")
	proto.RegisterType((*UniversalPayload)(nil), "ue.v1.UniversalPayload")
	proto.RegisterType((*UniversalAccountId)(nil), "ue.v1.UniversalAccountId")
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
>>>>>>> 0feca6d (feat: integrating uregistry methods with ue, utv modules):x/ue/types/types.pb.go
=======
	proto.RegisterType((*InboundSynthetic)(nil), "ue.v1.InboundSynthetic")
	proto.RegisterType((*PCTx)(nil), "ue.v1.PCTx")
	proto.RegisterType((*OutboundTx)(nil), "ue.v1.OutboundTx")
	proto.RegisterType((*UniversalTx)(nil), "ue.v1.UniversalTx")
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
}

func init() { proto.RegisterFile("uexecutor/v1/types.proto", fileDescriptor_fab6d3ca71d1e2a5) }

<<<<<<< HEAD:x/uexecutor/types/types.pb.go
var fileDescriptor_fab6d3ca71d1e2a5 = []byte{
	// 833 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0x65, 0xeb, 0xc3, 0x63, 0x41, 0x66, 0x16, 0x6a, 0xc2, 0xda, 0xa8, 0x12, 0xa8, 0x29,
	0xea, 0x1a, 0xb0, 0x84, 0xa4, 0x68, 0x0e, 0x06, 0x7a, 0x50, 0x04, 0x35, 0x15, 0x60, 0x59, 0x02,
	0xad, 0xa8, 0x68, 0x2f, 0xc4, 0x8a, 0x5c, 0x53, 0x8b, 0x92, 0xbb, 0xc4, 0xf2, 0x23, 0xd2, 0xb5,
	0xc7, 0x9e, 0x0a, 0xf4, 0x92, 0x63, 0x7e, 0x42, 0x7f, 0x46, 0x8f, 0xb9, 0x14, 0x28, 0xd0, 0x4b,
	0x61, 0x1f, 0xda, 0x9f, 0x51, 0xec, 0x2e, 0x25, 0xd1, 0x39, 0xf5, 0x22, 0xcd, 0x7b, 0x33, 0xbb,
	0x7c, 0xf3, 0x66, 0x48, 0xb0, 0x52, 0xb2, 0x22, 0x6e, 0x9a, 0x70, 0xd1, 0xcb, 0x9e, 0xf5, 0x92,
	0x75, 0x44, 0xe2, 0x6e, 0x24, 0x78, 0xc2, 0x51, 0x63, 0x9b, 0xe9, 0x66, 0xcf, 0x8e, 0x5b, 0x3e,
	0xf7, 0xb9, 0x4a, 0xf4, 0x64, 0xa4, 0x6b, 0x8e, 0x1f, 0xe0, 0x90, 0x32, 0xde, 0x53, 0xbf, 0x9a,
	0xea, 0x7c, 0x0d, 0xd5, 0x29, 0x16, 0x38, 0x8c, 0x51, 0x0b, 0x2a, 0xd8, 0x0b, 0x29, 0xb3, 0x8c,
	0x27, 0xc6, 0xe9, 0x81, 0xad, 0xc1, 0xc5, 0x27, 0x6f, 0xdf, 0x3d, 0x2e, 0xfd, 0xfb, 0xee, 0xb1,
	0xf1, 0xf3, 0x3f, 0xbf, 0x9d, 0x99, 0xbb, 0xa7, 0x47, 0xea, 0x50, 0xe7, 0xaf, 0x32, 0x98, 0xaf,
	0x19, 0xcd, 0x88, 0x88, 0x71, 0x30, 0xc5, 0xeb, 0x80, 0x63, 0x0f, 0x35, 0xa1, 0x9c, 0xf0, 0xfc,
	0x9a, 0x72, 0xc2, 0xe5, 0xcd, 0x19, 0x0e, 0x52, 0x62, 0x95, 0xf5, 0xcd, 0x0a, 0x20, 0x04, 0xfb,
	0x1e, 0x4e, 0xb0, 0xb5, 0xa7, 0x48, 0x15, 0xa3, 0x13, 0x38, 0xf0, 0x71, 0xec, 0x04, 0x34, 0xa4,
	0x89, 0xb5, 0xaf, 0x12, 0x75, 0x1f, 0xc7, 0x97, 0x12, 0xa3, 0xcf, 0xe0, 0x28, 0xc4, 0x2b, 0xe7,
	0x86, 0x10, 0x27, 0x22, 0xc2, 0xf1, 0x71, 0x6c, 0x55, 0x54, 0x49, 0x23, 0xc4, 0xab, 0x6f, 0x08,
	0x99, 0x12, 0xf1, 0x0a, 0xc7, 0xe8, 0x05, 0x58, 0xb2, 0x2c, 0x12, 0x94, 0x0b, 0x9a, 0xac, 0xef,
	0xd5, 0x57, 0x55, 0x7d, 0x2b, 0xc4, 0xab, 0x69, 0x9e, 0xde, 0x9d, 0x6b, 0x41, 0x85, 0x71, 0xe6,
	0x12, 0xab, 0xa6, 0x55, 0x2a, 0x80, 0x8e, 0xa1, 0xee, 0x11, 0xec, 0x05, 0x94, 0x11, 0xab, 0xae,
	0x05, 0x6d, 0x30, 0xfa, 0x0a, 0xaa, 0x99, 0x23, 0x67, 0x60, 0x1d, 0x3c, 0x31, 0x4e, 0x9b, 0xcf,
	0xdb, 0xdd, 0xe2, 0x0c, 0xba, 0x73, 0x22, 0xe8, 0x0d, 0x75, 0x71, 0x42, 0x39, 0x9b, 0xad, 0x23,
	0x62, 0x57, 0x32, 0xf9, 0x77, 0x71, 0x5a, 0xb4, 0xf4, 0x64, 0x67, 0x69, 0xba, 0xf1, 0xd1, 0x89,
	0xb4, 0x91, 0x9d, 0xb7, 0x06, 0xa0, 0xad, 0xbb, 0x7d, 0xd7, 0xe5, 0x29, 0x4b, 0x46, 0x1e, 0xfa,
	0x1c, 0x8e, 0xdc, 0x25, 0xa6, 0xcc, 0x61, 0x38, 0x24, 0x71, 0x84, 0x5d, 0x92, 0x9b, 0xdd, 0x54,
	0xf4, 0xd5, 0x86, 0x45, 0x1f, 0x43, 0x5d, 0x17, 0x52, 0x2f, 0xf7, 0xbe, 0xa6, 0xf0, 0xc8, 0x93,
	0xdd, 0xf2, 0x37, 0x8c, 0x88, 0xdc, 0x7e, 0x0d, 0xfe, 0x87, 0x34, 0xac, 0x55, 0x74, 0x7e, 0x35,
	0xa0, 0x31, 0x26, 0xc9, 0x92, 0x7b, 0x03, 0xce, 0x6e, 0xa8, 0x2f, 0xc7, 0x29, 0xe5, 0xe4, 0x4a,
	0x54, 0x8c, 0xda, 0x00, 0xd4, 0x23, 0x2c, 0xa1, 0x37, 0x94, 0x88, 0x5c, 0x41, 0x81, 0x41, 0x5f,
	0x80, 0x49, 0x32, 0xc2, 0x12, 0xa7, 0x50, 0xa5, 0xf5, 0x1c, 0x29, 0x7e, 0xb4, 0xa5, 0x2f, 0x9e,
	0x16, 0x95, 0x3d, 0xda, 0x29, 0x0b, 0x95, 0x06, 0xc7, 0x55, 0x22, 0x3a, 0x7f, 0x94, 0xe1, 0x70,
	0x20, 0x3b, 0xcc, 0x45, 0xb5, 0xa0, 0xa2, 0x1a, 0xde, 0xec, 0xb4, 0x02, 0xa8, 0x0b, 0xb5, 0x2c,
	0xd4, 0x83, 0x2b, 0xab, 0xc1, 0x7d, 0xf4, 0xc1, 0xe0, 0xc6, 0xce, 0xec, 0xfb, 0xe9, 0xd0, 0xae,
	0x66, 0xa1, 0x1c, 0x18, 0x7a, 0x0a, 0xcd, 0x28, 0x5d, 0x04, 0xd4, 0x75, 0x44, 0xe4, 0x3a, 0xa9,
	0x08, 0x72, 0x91, 0x0d, 0xcd, 0xda, 0x91, 0xfb, 0x5a, 0x04, 0x72, 0x2a, 0x3e, 0x4e, 0xc8, 0x1b,
	0xbc, 0x76, 0xb0, 0xe7, 0x09, 0x12, 0xc7, 0xf9, 0x06, 0x37, 0x73, 0xba, 0xaf, 0x59, 0x74, 0x0e,
	0x68, 0x11, 0x70, 0xf7, 0x47, 0x2d, 0x5a, 0x84, 0x6a, 0x41, 0xd4, 0x2a, 0xef, 0xdb, 0x0f, 0x54,
	0x66, 0x50, 0x48, 0xa0, 0xc1, 0xee, 0x5e, 0xdd, 0xac, 0x5c, 0xe3, 0xbd, 0xd3, 0xc3, 0xe7, 0xc7,
	0xf7, 0x55, 0x17, 0xa7, 0xb1, 0x7d, 0xa6, 0x26, 0x63, 0x64, 0x41, 0x8d, 0x30, 0xbc, 0x08, 0x88,
	0xa7, 0xd6, 0xbb, 0x6e, 0x6f, 0xe0, 0xc5, 0xa7, 0x45, 0x63, 0x1f, 0xee, 0x8c, 0xd5, 0x8b, 0xa3,
	0x7d, 0x3d, 0xfb, 0xc9, 0x80, 0x5a, 0xee, 0x0a, 0xaa, 0xc1, 0xde, 0x70, 0x3e, 0x36, 0x4b, 0x32,
	0xb8, 0x9e, 0x8f, 0x4d, 0x03, 0x1d, 0x42, 0x6d, 0x3c, 0x99, 0x0f, 0x9d, 0xf9, 0xd8, 0x2c, 0x4b,
	0xf0, 0x5d, 0xff, 0x7a, 0x2c, 0xc1, 0x1e, 0x6a, 0x40, 0x7d, 0xd0, 0x1f, 0xd9, 0x13, 0x89, 0xf6,
	0x65, 0x6a, 0x66, 0x4f, 0xae, 0x24, 0xa8, 0xa0, 0x26, 0xc0, 0xf5, 0x6c, 0x78, 0x79, 0xd9, 0xb7,
	0x25, 0xae, 0x22, 0x04, 0xcd, 0x97, 0xa3, 0xd9, 0x60, 0x32, 0xba, 0x72, 0xae, 0x07, 0xf6, 0x68,
	0x3a, 0x33, 0x6b, 0xf2, 0xf8, 0x64, 0xf6, 0xed, 0x50, 0x55, 0xd4, 0xcf, 0x5e, 0x81, 0xf9, 0xe1,
	0x2b, 0x85, 0x1e, 0x02, 0x8a, 0xa9, 0xcf, 0x88, 0x57, 0xcc, 0x98, 0x25, 0x74, 0x02, 0x8f, 0xb6,
	0x3b, 0x3b, 0x5b, 0xdd, 0x4b, 0x1a, 0x2f, 0xa7, 0xbf, 0xdf, 0xb6, 0x8d, 0xf7, 0xb7, 0x6d, 0xe3,
	0xef, 0xdb, 0xb6, 0xf1, 0xcb, 0x5d, 0xbb, 0xf4, 0xfe, 0xae, 0x5d, 0xfa, 0xf3, 0xae, 0x5d, 0xfa,
	0xe1, 0x85, 0x4f, 0x93, 0x65, 0xba, 0xe8, 0xba, 0x3c, 0xec, 0x45, 0x69, 0xbc, 0x54, 0x26, 0xa8,
	0xe8, 0x5c, 0x85, 0xe7, 0x8c, 0x7b, 0xa4, 0xb7, 0xea, 0xed, 0x6c, 0x52, 0x9f, 0xe0, 0x45, 0x55,
	0x7d, 0x4c, 0xbf, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x6d, 0x17, 0xd1, 0x9f, 0x05, 0x00,
	0x00,
=======
var fileDescriptor_8e38d69320e5df94 = []byte{
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0xb2, 0x76, 0xad, 0x85, 0xb6, 0xce, 0xaa, 0xb6, 0xd0, 0x49, 0xd9, 0xa8, 0x84,
	0x36, 0xed, 0x10, 0x6b, 0x20, 0xed, 0xb0, 0xdb, 0x38, 0x30, 0x4d, 0x42, 0xa8, 0x9a, 0x06, 0x07,
	0x2e, 0xd1, 0x5b, 0xf2, 0x96, 0x59, 0x4a, 0xec, 0xc8, 0x76, 0x42, 0xfb, 0x15, 0x38, 0xc1, 0x8d,
	0xe3, 0x3e, 0x02, 0x1f, 0x83, 0x0b, 0xd2, 0x8e, 0x1c, 0x51, 0x7b, 0x80, 0x8f, 0x81, 0x62, 0xa7,
	0x63, 0xe3, 0xc0, 0x25, 0xf6, 0xff, 0xfd, 0xff, 0x7e, 0x79, 0xfe, 0xc9, 0x64, 0xa3, 0x44, 0x56,
	0x1d, 0x32, 0x33, 0x2b, 0x50, 0x87, 0x85, 0x92, 0x46, 0xd2, 0x4e, 0x89, 0x61, 0x75, 0x38, 0x1a,
	0xa6, 0x32, 0x95, 0xb6, 0xc2, 0xea, 0x9d, 0x33, 0x47, 0x1b, 0x90, 0x73, 0x21, 0x99, 0xfd, 0xba,
	0xd2, 0xf8, 0x88, 0x74, 0x27, 0xa0, 0x20, 0xd7, 0x74, 0x48, 0x3a, 0x90, 0xe4, 0x5c, 0xf8, 0xde,
	0xae, 0xb7, 0xdf, 0x3f, 0x77, 0xe2, 0x78, 0xf3, 0xcb, 0xcd, 0x4e, 0xeb, 0xf7, 0xcd, 0x8e, 0xf7,
	0xf1, 0xd7, 0xd7, 0x83, 0x7e, 0x89, 0xac, 0xb0, 0xe9, 0xf1, 0xf7, 0x36, 0x19, 0xbc, 0x15, 0xbc,
	0x42, 0xa5, 0x21, 0x9b, 0xc0, 0x2c, 0x93, 0x90, 0xd0, 0x35, 0xd2, 0x36, 0xb2, 0x39, 0xdf, 0x36,
	0xb2, 0x6e, 0x59, 0x41, 0x56, 0xa2, 0xdf, 0x76, 0x2d, 0xad, 0xa0, 0x94, 0xac, 0x24, 0x60, 0xc0,
	0x7f, 0x64, 0x8b, 0x76, 0x4f, 0xb7, 0x49, 0x3f, 0x05, 0x1d, 0x65, 0x3c, 0xe7, 0xc6, 0x5f, 0xb1,
	0x46, 0x2f, 0x05, 0xfd, 0xba, 0xd6, 0xf4, 0x19, 0x59, 0xcf, 0x61, 0x1a, 0x5d, 0x21, 0x46, 0x05,
	0xaa, 0x28, 0x05, 0xed, 0x77, 0x6c, 0xe4, 0x71, 0x0e, 0xd3, 0x57, 0x88, 0x13, 0x54, 0xa7, 0xa0,
	0xe9, 0x11, 0xf1, 0xeb, 0x58, 0xa1, 0xb8, 0x54, 0xdc, 0xcc, 0x1e, 0xe4, 0xbb, 0x36, 0x3f, 0xcc,
	0x61, 0x3a, 0x69, 0xec, 0xbf, 0xe7, 0x86, 0xa4, 0x23, 0xa4, 0x88, 0xd1, 0x5f, 0x75, 0x53, 0x5a,
	0x41, 0x47, 0xa4, 0x97, 0x20, 0x24, 0x19, 0x17, 0xe8, 0xf7, 0xdc, 0x40, 0x4b, 0x4d, 0x43, 0xd2,
	0xad, 0xa2, 0x9a, 0xba, 0xdf, 0xdf, 0xf5, 0xf6, 0xd7, 0x9e, 0x6f, 0x85, 0x96, 0x7a, 0xf8, 0x0e,
	0x15, 0xbf, 0xe2, 0x31, 0x18, 0x2e, 0xc5, 0xc5, 0xac, 0xc0, 0xf3, 0x4e, 0x55, 0x2f, 0xc7, 0x4f,
	0xef, 0x43, 0x1c, 0x96, 0xc8, 0xca, 0x25, 0xb9, 0xa8, 0x70, 0xe8, 0xc6, 0x9f, 0x3d, 0x42, 0xef,
	0x78, 0x9e, 0xc4, 0xb1, 0x2c, 0x85, 0x39, 0x4b, 0xe8, 0x1e, 0x59, 0x8f, 0xaf, 0x81, 0x8b, 0x48,
	0x40, 0x8e, 0xba, 0x80, 0x18, 0x1b, 0xbc, 0x6b, 0xb6, 0xfc, 0x66, 0x59, 0xa5, 0x4f, 0x48, 0xcf,
	0x05, 0x79, 0xd2, 0xd0, 0x5e, 0xb5, 0xfa, 0x2c, 0xa9, 0xef, 0x27, 0x3f, 0x08, 0x54, 0x0d, 0x70,
	0x27, 0xfe, 0x37, 0x13, 0xb8, 0xdf, 0x1f, 0x9c, 0x92, 0xc1, 0xbf, 0x37, 0xa2, 0x9b, 0x84, 0x6a,
	0x9e, 0x0a, 0x4c, 0xee, 0x3b, 0x83, 0x16, 0xdd, 0x26, 0x5b, 0x77, 0x0d, 0x2e, 0xa6, 0x0f, 0x4c,
	0xef, 0xe5, 0xc9, 0xb7, 0x79, 0xe0, 0xdd, 0xce, 0x03, 0xef, 0xe7, 0x3c, 0xf0, 0x3e, 0x2d, 0x82,
	0xd6, 0xed, 0x22, 0x68, 0xfd, 0x58, 0x04, 0xad, 0xf7, 0x7b, 0x29, 0x37, 0xd7, 0xe5, 0x65, 0x18,
	0xcb, 0x9c, 0x29, 0x99, 0x65, 0x76, 0x66, 0xcd, 0x0a, 0xbb, 0xb2, 0x29, 0x2b, 0xd1, 0xbd, 0xee,
	0xcb, 0xae, 0x7d, 0xae, 0x2f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0x23, 0x66, 0xec, 0xf3,
	0x02, 0x00, 0x00,
>>>>>>> 0feca6d (feat: integrating uregistry methods with ue, utv modules):x/ue/types/types.pb.go
=======
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xd0, 0xa4, 0xf1, 0x08, 0xa5, 0xe9, 0x2a, 0x6a, 0x4d, 0x2a, 0xdc, 0x10, 0x09,
	0x35, 0xea, 0xc1, 0x56, 0x41, 0xe2, 0xd0, 0x0b, 0x2a, 0x07, 0xaa, 0x4a, 0x08, 0x45, 0x51, 0xe9,
	0x81, 0x8b, 0x35, 0xb5, 0xa7, 0xee, 0x4a, 0xf6, 0xae, 0xe5, 0xb5, 0x8d, 0xf3, 0x0a, 0x9c, 0xe0,
	0xc6, 0xb1, 0x8f, 0xc0, 0x63, 0x70, 0x41, 0xea, 0x91, 0x23, 0x4a, 0x0e, 0xf0, 0x18, 0xc8, 0xeb,
	0xa4, 0x7f, 0x38, 0xf4, 0xe2, 0xdd, 0xef, 0x9b, 0x6f, 0xd7, 0xb3, 0x3f, 0x0d, 0x6c, 0xe6, 0xe4,
	0x16, 0x07, 0x6e, 0x36, 0x4b, 0x48, 0x39, 0x49, 0x2a, 0x33, 0xc9, 0x5a, 0x39, 0x39, 0xc5, 0xc1,
	0xa0, 0x1f, 0xca, 0x50, 0x6a, 0xc7, 0xad, 0x76, 0x75, 0x71, 0xb0, 0x89, 0x31, 0x17, 0xd2, 0xd5,
	0xdf, 0xda, 0x1a, 0xbd, 0x86, 0xf6, 0x04, 0x53, 0x8c, 0x15, 0x7b, 0x0a, 0xa0, 0x64, 0x4c, 0x5e,
	0x81, 0x51, 0x4e, 0x56, 0x73, 0x68, 0x8c, 0x3b, 0x53, 0xb3, 0x72, 0xce, 0x2a, 0xe3, 0x70, 0xeb,
	0xdb, 0xd5, 0x6e, 0xe3, 0xef, 0xd5, 0xae, 0xf1, 0xf9, 0xcf, 0xf7, 0x7d, 0x33, 0x27, 0x37, 0xd1,
	0xc7, 0x46, 0x3f, 0x9b, 0xd0, 0xfb, 0x20, 0x78, 0x41, 0xa9, 0xc2, 0x68, 0x82, 0xb3, 0x48, 0x62,
	0xc0, 0xba, 0xd0, 0xcc, 0xa4, 0x65, 0x0c, 0x8d, 0xb1, 0x39, 0x6d, 0x66, 0x92, 0xf5, 0xa1, 0x75,
	0x7b, 0xad, 0x39, 0xad, 0x05, 0x63, 0xb0, 0x16, 0x60, 0x86, 0xd6, 0x23, 0x6d, 0xea, 0x3d, 0xdb,
	0x01, 0x33, 0x44, 0xe5, 0x45, 0x3c, 0xe6, 0x99, 0xb5, 0xa6, 0x0b, 0x9d, 0x10, 0xd5, 0xbb, 0x4a,
	0xb3, 0xe7, 0xb0, 0x11, 0x63, 0xe9, 0x5d, 0x10, 0x79, 0x09, 0xa5, 0x5e, 0x88, 0xca, 0x6a, 0xe9,
	0xc8, 0xe3, 0x18, 0xcb, 0xb7, 0x44, 0x13, 0x4a, 0x8f, 0x51, 0xb1, 0x57, 0x60, 0x55, 0xb1, 0x24,
	0xe5, 0x32, 0xe5, 0xd9, 0xec, 0x5e, 0xbe, 0xad, 0xf3, 0xfd, 0x18, 0xcb, 0xc9, 0xb2, 0x7c, 0x7b,
	0xae, 0x0f, 0x2d, 0x21, 0x85, 0x4f, 0xd6, 0x7a, 0xdd, 0xa5, 0x16, 0x6c, 0x00, 0x9d, 0x80, 0x30,
	0x88, 0xb8, 0x20, 0xab, 0x53, 0x37, 0xb4, 0xd2, 0xcc, 0x81, 0x76, 0xe1, 0x55, 0xf8, 0x2d, 0x73,
	0x68, 0x8c, 0xbb, 0x2f, 0xb6, 0x1d, 0x8d, 0xdf, 0x39, 0xa3, 0x94, 0x5f, 0x70, 0x1f, 0x33, 0x2e,
	0xc5, 0xe9, 0x2c, 0xa1, 0x69, 0xab, 0xa8, 0x96, 0xc3, 0x67, 0x77, 0x21, 0xf6, 0x73, 0x72, 0xf3,
	0x15, 0x39, 0x2f, 0xa9, 0xd1, 0x8d, 0xbe, 0x1a, 0xc0, 0x6e, 0x78, 0x1e, 0xf9, 0xbe, 0xcc, 0x45,
	0x76, 0x12, 0xb0, 0x3d, 0xd8, 0xf0, 0x2f, 0x91, 0x0b, 0x4f, 0x60, 0x4c, 0x2a, 0x41, 0x9f, 0x96,
	0x78, 0xbb, 0xda, 0x7e, 0xbf, 0x72, 0xd9, 0x13, 0xe8, 0xd4, 0x41, 0x1e, 0x2c, 0x69, 0xaf, 0x6b,
	0x7d, 0x12, 0x54, 0xef, 0x93, 0x9f, 0x04, 0xa5, 0x4b, 0xe0, 0xb5, 0x78, 0xa8, 0x27, 0xac, 0x7f,
	0xbf, 0x7f, 0x0c, 0xbd, 0xff, 0x5f, 0xc4, 0xb6, 0x80, 0x29, 0x1e, 0x0a, 0x0a, 0xee, 0x56, 0x7a,
	0x0d, 0xb6, 0x03, 0xdb, 0x37, 0x17, 0x9c, 0x96, 0xf7, 0x8a, 0xc6, 0x9b, 0xa3, 0x1f, 0x73, 0xdb,
	0xb8, 0x9e, 0xdb, 0xc6, 0xef, 0xb9, 0x6d, 0x7c, 0x59, 0xd8, 0x8d, 0xeb, 0x85, 0xdd, 0xf8, 0xb5,
	0xb0, 0x1b, 0x1f, 0xf7, 0x42, 0x9e, 0x5d, 0xe6, 0xe7, 0x8e, 0x2f, 0x63, 0x37, 0x95, 0x51, 0xa4,
	0x7b, 0x56, 0x6e, 0xa2, 0x57, 0xb7, 0x74, 0x73, 0xaa, 0xc7, 0xfc, 0xbc, 0xad, 0xe7, 0xf6, 0xe5,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xff, 0xc8, 0xf3, 0xfc, 0x02, 0x00, 0x00,
>>>>>>> d1e69b5 (refactor(uregistry): modified params of ue to dummy one):x/ue/types/types.pb.go
=======
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x18, 0x8d, 0xb3, 0x4d, 0x1a, 0x7f, 0x6d, 0x53, 0x77, 0x88, 0x5a, 0xd3, 0x5d, 0xd2, 0x6e, 0x00,
	0x6d, 0xd5, 0x43, 0xcc, 0x2e, 0x88, 0x43, 0x2f, 0x28, 0x9b, 0xa4, 0xc5, 0xa2, 0xf2, 0x46, 0x71,
	0x52, 0xa1, 0xbd, 0x58, 0x53, 0x7b, 0x36, 0x19, 0x11, 0x7b, 0x2c, 0xcf, 0x38, 0x24, 0x17, 0x7e,
	0x00, 0x27, 0x90, 0x38, 0x70, 0xe0, 0xb0, 0x3f, 0x81, 0x9f, 0xc1, 0x05, 0x69, 0x8f, 0x1c, 0x51,
	0x7b, 0x80, 0x9f, 0x81, 0x3c, 0x1e, 0xa7, 0x0d, 0x95, 0xf6, 0x12, 0xcf, 0x7b, 0xdf, 0x9b, 0x6f,
	0x5e, 0xde, 0x37, 0x1a, 0xd8, 0x4b, 0x89, 0x35, 0x7f, 0x6e, 0x89, 0x65, 0x4c, 0x78, 0x3b, 0x4e,
	0x98, 0x60, 0xa8, 0x92, 0x92, 0xf6, 0xfc, 0xf9, 0x61, 0x63, 0xc2, 0x26, 0x4c, 0x32, 0x56, 0xb6,
	0xca, 0x8b, 0x87, 0x7b, 0x38, 0xa4, 0x11, 0xb3, 0xe4, 0x6f, 0x4e, 0xb5, 0xbe, 0x82, 0xea, 0x00,
	0x27, 0x38, 0xe4, 0xe8, 0x23, 0x00, 0xce, 0x42, 0xe2, 0xcd, 0xf1, 0x2c, 0x25, 0x66, 0xf9, 0x58,
	0x3b, 0xa9, 0x0d, 0xf5, 0x8c, 0xb9, 0xca, 0x88, 0xb3, 0xfd, 0x5f, 0xdf, 0x1e, 0x95, 0xfe, 0x7d,
	0x7b, 0xa4, 0xfd, 0xf8, 0xcf, 0xef, 0xa7, 0x7a, 0x4a, 0xac, 0x58, 0x6e, 0x6b, 0xfd, 0x59, 0x06,
	0x63, 0x1c, 0xd1, 0x39, 0x49, 0x38, 0x9e, 0x0d, 0xf0, 0x72, 0xc6, 0x70, 0x80, 0xea, 0x50, 0x16,
	0xcc, 0xd4, 0x8e, 0xb5, 0x13, 0x7d, 0x58, 0x16, 0x0c, 0x35, 0xa0, 0x72, 0xd7, 0x56, 0x1f, 0xe6,
	0x00, 0x21, 0xd8, 0x08, 0xb0, 0xc0, 0xe6, 0x23, 0x49, 0xca, 0x35, 0x7a, 0x0c, 0xfa, 0x04, 0x73,
	0x6f, 0x46, 0x43, 0x2a, 0xcc, 0x0d, 0x59, 0xa8, 0x4d, 0x30, 0xbf, 0xcc, 0x30, 0xfa, 0x14, 0x76,
	0x43, 0xbc, 0xf0, 0xde, 0x10, 0xe2, 0xc5, 0x24, 0xf1, 0x26, 0x98, 0x9b, 0x15, 0x29, 0xd9, 0x0e,
	0xf1, 0xe2, 0x9c, 0x90, 0x01, 0x49, 0x2e, 0x30, 0x47, 0x5f, 0x82, 0x99, 0xc9, 0xe2, 0x84, 0xb2,
	0x84, 0x8a, 0xe5, 0x9a, 0xbe, 0x2a, 0xf5, 0x8d, 0x10, 0x2f, 0x06, 0xaa, 0x7c, 0xb7, 0xaf, 0x01,
	0x95, 0x88, 0x45, 0x3e, 0x31, 0x37, 0x73, 0x97, 0x12, 0xa0, 0x43, 0xa8, 0x05, 0x04, 0x07, 0x33,
	0x1a, 0x11, 0xb3, 0x96, 0x1b, 0x2a, 0x30, 0x6a, 0x43, 0x75, 0xee, 0x65, 0xf1, 0x9b, 0xfa, 0xb1,
	0x76, 0x52, 0x7f, 0x71, 0xd0, 0x96, 0xf1, 0xb7, 0xaf, 0x48, 0x42, 0xdf, 0x50, 0x1f, 0x0b, 0xca,
	0xa2, 0xd1, 0x32, 0x26, 0xc3, 0xca, 0x3c, 0xfb, 0x9c, 0x3d, 0xbd, 0x1f, 0x62, 0x23, 0x25, 0x56,
	0x5a, 0x24, 0xe7, 0xc5, 0x79, 0x74, 0xad, 0x9f, 0x35, 0x40, 0xab, 0x3c, 0x3b, 0xbe, 0xcf, 0xd2,
	0x48, 0xd8, 0x01, 0x7a, 0x06, 0xbb, 0xfe, 0x14, 0xd3, 0xc8, 0x8b, 0x70, 0x48, 0x78, 0x8c, 0x7d,
	0xa2, 0xe2, 0xad, 0x4b, 0xda, 0x29, 0x58, 0xf4, 0x21, 0xd4, 0x72, 0x21, 0x0d, 0x54, 0xda, 0x9b,
	0x12, 0xdb, 0x41, 0xf6, 0xff, 0xd8, 0xf7, 0x11, 0x49, 0x54, 0xe0, 0x39, 0x78, 0x9f, 0x27, 0x9c,
	0x1f, 0xdf, 0xfa, 0xa5, 0x0c, 0x86, 0x1d, 0x5d, 0xb3, 0x34, 0x0a, 0xdc, 0x65, 0x24, 0xa6, 0x44,
	0x50, 0x1f, 0x3d, 0x85, 0x6d, 0xce, 0xd2, 0xc4, 0x27, 0x9e, 0xec, 0xaf, 0xec, 0x6c, 0xe5, 0x5c,
	0x37, 0xa3, 0xd0, 0x01, 0x6c, 0x8a, 0x85, 0x37, 0xc5, 0x7c, 0xaa, 0xac, 0x54, 0xc5, 0xe2, 0x6b,
	0xcc, 0xa7, 0x68, 0x1f, 0xaa, 0x9c, 0x44, 0xc1, 0xca, 0x8a, 0x42, 0xe8, 0x09, 0xe8, 0x09, 0xf1,
	0x69, 0x4c, 0x49, 0x54, 0x4c, 0xff, 0x8e, 0xc8, 0x76, 0xe1, 0x30, 0x33, 0xa4, 0xa6, 0xae, 0x50,
	0x76, 0x73, 0x31, 0xe7, 0x44, 0x78, 0x38, 0x08, 0x12, 0x35, 0x61, 0x5d, 0x32, 0x9d, 0x20, 0x48,
	0xd0, 0x17, 0x50, 0xa7, 0xb9, 0x79, 0x8f, 0x0b, 0x2c, 0x52, 0x2e, 0xe7, 0x5b, 0x7f, 0xb1, 0xa3,
	0x86, 0xe5, 0x4a, 0x72, 0xb8, 0xa3, 0x44, 0x39, 0x7c, 0x18, 0xcb, 0xaa, 0x47, 0x91, 0x40, 0xeb,
	0x07, 0xd8, 0x5a, 0x4d, 0x6a, 0xb4, 0x40, 0x47, 0xb0, 0x55, 0x68, 0xbe, 0x23, 0x4b, 0x95, 0x07,
	0x28, 0xea, 0x1b, 0xb2, 0x44, 0x9f, 0x41, 0x55, 0x19, 0x28, 0x4b, 0x03, 0xa6, 0x32, 0x70, 0xaf,
	0x89, 0xf2, 0xa2, 0x74, 0x67, 0x4f, 0xee, 0x9b, 0xd8, 0x5d, 0x9b, 0x8d, 0x58, 0x9c, 0x5e, 0x80,
	0xf1, 0xff, 0x8b, 0x86, 0xf6, 0x01, 0x71, 0x3a, 0x89, 0x48, 0x70, 0xbf, 0x62, 0x94, 0xd0, 0x63,
	0x38, 0x48, 0xef, 0x8e, 0x59, 0x2b, 0x6a, 0xa7, 0xbf, 0x69, 0xb0, 0xf7, 0xc0, 0x04, 0xfa, 0x18,
	0x8e, 0xc6, 0x8e, 0x7d, 0xd5, 0x1f, 0xba, 0x9d, 0x4b, 0x6f, 0xf4, 0xad, 0xe7, 0x8e, 0x3a, 0xa3,
	0xb1, 0xeb, 0x8d, 0x1d, 0x77, 0xd0, 0xef, 0xda, 0xe7, 0x76, 0xbf, 0x67, 0x94, 0xd0, 0x07, 0xb0,
	0x6b, 0x3b, 0x2f, 0x5f, 0x8d, 0x9d, 0x9e, 0xe7, 0x8e, 0xbb, 0xdd, 0xbe, 0xeb, 0x1a, 0x1a, 0x6a,
	0x80, 0xf1, 0x6a, 0x3c, 0xca, 0xd9, 0x41, 0xdf, 0xe9, 0xd9, 0xce, 0x85, 0x51, 0x5e, 0x63, 0x0b,
	0xed, 0xa3, 0xac, 0xc1, 0x8a, 0x3d, 0xef, 0xd8, 0x97, 0xfd, 0x9e, 0xb1, 0x81, 0xb6, 0xa1, 0xd6,
	0xed, 0x38, 0xdd, 0x7e, 0x86, 0x2a, 0xa7, 0x9f, 0x40, 0x55, 0x59, 0xda, 0x82, 0xcd, 0xa2, 0x5f,
	0x09, 0xed, 0x80, 0x7e, 0x6e, 0x3b, 0x9d, 0x4b, 0xfb, 0x75, 0xbf, 0x67, 0x68, 0x2f, 0x3b, 0x7f,
	0xdc, 0x34, 0xb5, 0x77, 0x37, 0x4d, 0xed, 0xef, 0x9b, 0xa6, 0xf6, 0xd3, 0x6d, 0xb3, 0xf4, 0xee,
	0xb6, 0x59, 0xfa, 0xeb, 0xb6, 0x59, 0x7a, 0xfd, 0x6c, 0x42, 0xc5, 0x34, 0xbd, 0x6e, 0xfb, 0x2c,
	0xb4, 0x12, 0x36, 0x9b, 0xc9, 0xfb, 0xca, 0xad, 0x58, 0x7e, 0xad, 0x85, 0x95, 0x92, 0xfc, 0x09,
	0xbd, 0xae, 0xca, 0x37, 0xf1, 0xf3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x10, 0xad, 0x72, 0x08,
	0x58, 0x05, 0x00, 0x00,
>>>>>>> 2e4e4a5 (refactor: updated msg_vote_inbound_synthetic proto and generated protobuf):x/ue/types/types.pb.go
=======
	// 1059 bytes of a gzipped FileDescriptorProto
=======
	// 1073 bytes of a gzipped FileDescriptorProto
>>>>>>> 5b868de (feat: added inbound_synthetic in types):x/ue/types/types.pb.go
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x15, 0xfd, 0x8e, 0x12, 0x99, 0xda, 0x28, 0xb1, 0x6c, 0x27, 0xb2, 0xa3, 0xb6, 0x88,
	0xe1, 0x02, 0x12, 0xe2, 0x16, 0x39, 0xf8, 0x52, 0x28, 0x32, 0xed, 0x10, 0x70, 0x65, 0x81, 0xa2,
<<<<<<< HEAD:x/uexecutor/types/types.pb.go
	0x8c, 0x20, 0x17, 0x62, 0x4d, 0x6e, 0x24, 0xa2, 0x12, 0x49, 0x70, 0x97, 0x2a, 0x7d, 0xee, 0xad,
	0xa7, 0x16, 0xe8, 0xa1, 0xc7, 0x3c, 0x42, 0x5f, 0xa1, 0x40, 0x0f, 0xbd, 0x14, 0xc8, 0xb1, 0xc7,
	0xc2, 0x3e, 0xb4, 0x4f, 0x51, 0x14, 0xbb, 0x5c, 0xfd, 0x39, 0x48, 0x7a, 0xb1, 0x38, 0xdf, 0xfc,
	0x70, 0xe6, 0xfb, 0x66, 0x4c, 0xa8, 0x44, 0xa4, 0x35, 0x7d, 0xd6, 0x62, 0x37, 0x01, 0xa1, 0xcd,
	0x20, 0xf4, 0x99, 0x8f, 0xb2, 0x11, 0x69, 0x4e, 0x9f, 0xed, 0x56, 0x87, 0xfe, 0xd0, 0x17, 0x48,
	0x8b, 0x3f, 0x25, 0xce, 0xdd, 0x0a, 0x9e, 0xb8, 0x9e, 0xdf, 0x12, 0x7f, 0x13, 0xa8, 0xf1, 0x15,
	0xe4, 0x7a, 0x38, 0xc4, 0x13, 0x8a, 0x1e, 0x03, 0x50, 0x7f, 0x42, 0xac, 0x29, 0x1e, 0x47, 0xa4,
	0x96, 0x3e, 0x50, 0x0e, 0x0b, 0x46, 0x91, 0x23, 0x57, 0x1c, 0x38, 0xd9, 0xfa, 0xf9, 0xed, 0x7e,
	0xea, 0x9f, 0xb7, 0xfb, 0xca, 0xf7, 0x7f, 0xff, 0x72, 0x54, 0x8c, 0x48, 0x2b, 0x10, 0x69, 0x8d,
	0x3f, 0xd2, 0xa0, 0x0e, 0x3c, 0x77, 0x4a, 0x42, 0x8a, 0xc7, 0x3d, 0x7c, 0x33, 0xf6, 0xb1, 0x83,
	0xca, 0x90, 0x66, 0x7e, 0x4d, 0x39, 0x50, 0x0e, 0x8b, 0x46, 0x9a, 0xf9, 0xa8, 0x0a, 0xd9, 0x45,
	0xd9, 0xa2, 0x91, 0x18, 0x08, 0x41, 0xc6, 0xc1, 0x0c, 0xd7, 0xd6, 0x04, 0x28, 0x9e, 0xd1, 0x1e,
	0x14, 0x87, 0x98, 0x5a, 0x63, 0x77, 0xe2, 0xb2, 0x5a, 0x46, 0x38, 0x0a, 0x43, 0x4c, 0x2f, 0xb8,
	0x8d, 0x3e, 0x83, 0xcd, 0x09, 0x8e, 0xad, 0x37, 0x84, 0x58, 0x01, 0x09, 0xad, 0x21, 0xa6, 0xb5,
	0xac, 0x08, 0x59, 0x9f, 0xe0, 0xf8, 0x8c, 0x90, 0x1e, 0x09, 0xcf, 0x31, 0x45, 0xcf, 0xa1, 0xc6,
	0xc3, 0x82, 0xd0, 0xf5, 0x43, 0x97, 0xdd, 0xac, 0xc4, 0xe7, 0x44, 0x7c, 0x75, 0x82, 0xe3, 0x9e,
	0x74, 0x2f, 0xf2, 0xaa, 0x90, 0xf5, 0x7c, 0xcf, 0x26, 0xb5, 0x7c, 0xd2, 0xa5, 0x30, 0xd0, 0x2e,
	0x14, 0x1c, 0x82, 0x9d, 0xb1, 0xeb, 0x91, 0x5a, 0x21, 0x69, 0x68, 0x66, 0xa3, 0x26, 0xe4, 0xa6,
	0x16, 0xa7, 0xbf, 0x56, 0x3c, 0x50, 0x0e, 0xcb, 0xc7, 0xdb, 0x4d, 0x41, 0x7f, 0xf3, 0x8a, 0x84,
	0xee, 0x1b, 0xd7, 0xc6, 0xcc, 0xf5, 0x3d, 0xf3, 0x26, 0x20, 0x46, 0x76, 0xca, 0x7f, 0x4e, 0x9e,
	0x2c, 0x93, 0x58, 0x8d, 0x48, 0x2b, 0x9a, 0x31, 0x67, 0x05, 0x09, 0x75, 0x8d, 0x1f, 0x15, 0x40,
	0x73, 0x3e, 0xdb, 0xb6, 0xed, 0x47, 0x1e, 0xd3, 0x1d, 0xf4, 0x14, 0x36, 0xed, 0x11, 0x76, 0x3d,
	0xcb, 0xc3, 0x13, 0x42, 0x03, 0x6c, 0x13, 0x49, 0x6f, 0x59, 0xc0, 0xdd, 0x19, 0x8a, 0x76, 0xa0,
	0x90, 0x04, 0xba, 0x8e, 0x64, 0x3b, 0x2f, 0x6c, 0xdd, 0xe1, 0xf3, 0xf9, 0xdf, 0x7a, 0x24, 0x94,
	0x84, 0x27, 0xc6, 0xc7, 0x7a, 0xc2, 0xc9, 0xeb, 0x1b, 0x3f, 0xa5, 0x41, 0xd5, 0xbd, 0x6b, 0x3f,
	0xf2, 0x9c, 0xfe, 0x8d, 0xc7, 0x46, 0x84, 0xb9, 0x36, 0x7a, 0x02, 0xeb, 0xd4, 0x8f, 0x42, 0x9b,
	0x58, 0xa2, 0xbe, 0x6c, 0xa7, 0x94, 0x60, 0x1d, 0x0e, 0xa1, 0x6d, 0xc8, 0xb3, 0xd8, 0x1a, 0x61,
	0x3a, 0x92, 0xad, 0xe4, 0x58, 0xfc, 0x12, 0xd3, 0x11, 0xda, 0x82, 0x1c, 0x25, 0x9e, 0x33, 0x6f,
	0x45, 0x5a, 0xe8, 0x11, 0x14, 0x43, 0x62, 0xbb, 0x81, 0x4b, 0xbc, 0x99, 0xfa, 0x0b, 0x80, 0x67,
	0xe1, 0x09, 0x6f, 0x48, 0xaa, 0x2e, 0x2d, 0xbe, 0xb9, 0x98, 0x52, 0xc2, 0x2c, 0xec, 0x38, 0xa1,
	0x54, 0xb8, 0x28, 0x90, 0xb6, 0xe3, 0x84, 0xe8, 0x4b, 0x28, 0xbb, 0x49, 0xf3, 0x16, 0x65, 0x98,
	0x45, 0x54, 0xe8, 0x5b, 0x3e, 0xde, 0x90, 0x62, 0xf5, 0x05, 0x68, 0x6c, 0xc8, 0xa0, 0xc4, 0x7c,
	0x9f, 0x96, 0x79, 0x8d, 0x19, 0x03, 0x8d, 0x5f, 0x15, 0xc8, 0xf4, 0x3a, 0x66, 0xbc, 0x3c, 0xa7,
	0xf2, 0x81, 0x39, 0xd3, 0x2b, 0x73, 0xee, 0x00, 0x5f, 0x6a, 0x2b, 0xa2, 0xc4, 0x11, 0x0c, 0x64,
	0x8c, 0xfc, 0x10, 0xd3, 0x01, 0x25, 0x0e, 0xa7, 0xf5, 0x7a, 0xec, 0xdb, 0xdf, 0x58, 0x23, 0xe2,
	0x0e, 0x47, 0x09, 0x0b, 0x19, 0xa3, 0x24, 0xb0, 0x97, 0x02, 0x12, 0x55, 0x93, 0x41, 0x72, 0xb2,
	0xaa, 0xb0, 0xf8, 0xed, 0x90, 0x30, 0xf4, 0x43, 0x6b, 0x42, 0x87, 0x72, 0x87, 0x0b, 0x02, 0xf8,
	0x9a, 0x0e, 0x4f, 0x1e, 0x2e, 0xcf, 0x53, 0xe0, 0xf7, 0x6b, 0x5b, 0x2c, 0x6e, 0xfc, 0xa6, 0x00,
	0x5c, 0x46, 0x4c, 0x8c, 0x66, 0xc6, 0xe8, 0x73, 0xa8, 0x38, 0x84, 0x32, 0xd7, 0x13, 0xab, 0xbb,
	0xa2, 0xac, 0xba, 0xe4, 0xf8, 0x1f, 0x79, 0x57, 0x64, 0x5c, 0xfb, 0xb0, 0x8c, 0x99, 0x8f, 0xc8,
	0x98, 0xbd, 0x27, 0xe3, 0xc9, 0xde, 0xf2, 0x00, 0xe5, 0x88, 0xb4, 0x7c, 0xd9, 0x36, 0x1f, 0xe3,
	0x5f, 0x05, 0x4a, 0xf3, 0xab, 0x31, 0x63, 0xf4, 0x1c, 0x60, 0xa6, 0x17, 0x8b, 0xc5, 0x00, 0xa5,
	0xf9, 0x71, 0xde, 0xdf, 0x64, 0xa3, 0x28, 0x43, 0xcd, 0x18, 0x1d, 0x40, 0x36, 0x88, 0x79, 0x4a,
	0x5a, 0xa4, 0x94, 0x64, 0x0a, 0x57, 0xd9, 0xc8, 0x04, 0xb1, 0x19, 0xa3, 0x63, 0x28, 0x2d, 0xbd,
	0x58, 0x4c, 0x57, 0x3a, 0xae, 0xc8, 0xb8, 0x05, 0x93, 0x06, 0xf8, 0x0b, 0x56, 0x3b, 0xa0, 0x2e,
	0x8e, 0x4a, 0x4a, 0x97, 0x11, 0x3b, 0x58, 0x93, 0x89, 0x4b, 0xbd, 0xcb, 0x75, 0xdc, 0x9c, 0x67,
	0xc8, 0x85, 0x7c, 0xb4, 0x3c, 0xff, 0xe6, 0xca, 0x9d, 0xb2, 0xf8, 0xe8, 0x1c, 0xd4, 0xfb, 0xff,
	0x74, 0xd0, 0x16, 0x20, 0xea, 0x0e, 0x3d, 0xe2, 0x2c, 0x7b, 0xd4, 0x14, 0xda, 0x83, 0xed, 0x68,
	0xf1, 0xbe, 0x15, 0xa7, 0x72, 0xf4, 0x5d, 0x1a, 0x2a, 0xef, 0x75, 0x83, 0x3e, 0x81, 0xfd, 0x41,
	0x57, 0xbf, 0xd2, 0x8c, 0x7e, 0xfb, 0xc2, 0x32, 0x5f, 0x59, 0x7d, 0xb3, 0x6d, 0x0e, 0xfa, 0xd6,
	0xa0, 0xdb, 0xef, 0x69, 0x1d, 0xfd, 0x4c, 0xd7, 0x4e, 0xd5, 0x14, 0x7a, 0x00, 0x9b, 0x7a, 0xf7,
	0xc5, 0xe5, 0xa0, 0x7b, 0x6a, 0xf5, 0x07, 0x9d, 0x8e, 0xd6, 0xef, 0xab, 0x0a, 0x7a, 0x0c, 0x3b,
	0x3d, 0xad, 0x7b, 0xaa, 0x77, 0xcf, 0xad, 0x99, 0x53, 0x7b, 0xa5, 0x75, 0x06, 0xa6, 0x7e, 0xd9,
	0x55, 0xd3, 0x68, 0x1b, 0x1e, 0xf4, 0x3a, 0x12, 0xd1, 0x16, 0x79, 0x6b, 0xbc, 0xf9, 0x65, 0xc7,
	0x59, 0x5b, 0xbf, 0xd0, 0x4e, 0xd5, 0x0c, 0x7a, 0x08, 0x95, 0x5e, 0xc7, 0x9a, 0x95, 0x34, 0xb4,
	0x2b, 0xcd, 0x30, 0xd5, 0x2c, 0xaa, 0x82, 0x7a, 0x39, 0x30, 0x93, 0xfa, 0xd2, 0xa9, 0xe6, 0x56,
	0xd0, 0x59, 0xe9, 0x3c, 0xef, 0x73, 0x8e, 0xca, 0xba, 0x05, 0xb4, 0x0e, 0x85, 0x4e, 0xbb, 0xdb,
	0xd1, 0xb8, 0x55, 0x3c, 0xfa, 0x14, 0x72, 0x72, 0xf2, 0x12, 0xe4, 0x67, 0xf5, 0x52, 0x68, 0x03,
	0x8a, 0x67, 0x7a, 0xb7, 0x7d, 0xa1, 0xbf, 0xd6, 0x4e, 0x55, 0xe5, 0x45, 0xfb, 0xf7, 0xdb, 0xba,
	0xf2, 0xee, 0xb6, 0xae, 0xfc, 0x75, 0x5b, 0x57, 0x7e, 0xb8, 0xab, 0xa7, 0xde, 0xdd, 0xd5, 0x53,
	0x7f, 0xde, 0xd5, 0x53, 0xaf, 0x9f, 0x0e, 0x5d, 0x36, 0x8a, 0xae, 0x9b, 0xb6, 0x3f, 0x69, 0x85,
	0xfe, 0x78, 0x2c, 0x0e, 0x89, 0xb6, 0x02, 0xf1, 0xdb, 0x8a, 0x5b, 0x11, 0x49, 0xbe, 0xda, 0xd7,
	0x39, 0xf1, 0x19, 0xfe, 0xe2, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xc2, 0x9d, 0xd6, 0xcb,
	0x07, 0x00, 0x00,
>>>>>>> 6f271b2 (refactor: added generated protobuf):x/ue/types/types.pb.go
=======
	0x8c, 0x20, 0x17, 0x62, 0x4d, 0x6e, 0x28, 0xa2, 0x12, 0x97, 0xe0, 0x92, 0x2a, 0x7d, 0xee, 0xad,
	0xa7, 0xf6, 0xd6, 0x63, 0x1e, 0xa1, 0x7d, 0x84, 0x02, 0x3d, 0xf4, 0x52, 0x20, 0xc7, 0x1e, 0x0b,
	0xfb, 0xd0, 0x3e, 0x45, 0x51, 0xec, 0x72, 0xf5, 0xe7, 0x20, 0xe9, 0x45, 0xe4, 0x7c, 0xf3, 0xb3,
	0x33, 0xdf, 0x37, 0x2b, 0x42, 0x2d, 0x26, 0x9d, 0xd9, 0xb3, 0x4e, 0x74, 0x15, 0x10, 0xd6, 0x0e,
	0x42, 0x1a, 0x51, 0x94, 0x8f, 0x49, 0x7b, 0xf6, 0x6c, 0xbb, 0xee, 0x52, 0x97, 0x0a, 0xa4, 0xc3,
	0xdf, 0x52, 0xe7, 0x76, 0x0d, 0x4f, 0x3d, 0x9f, 0x76, 0xc4, 0x6f, 0x0a, 0xb5, 0xbe, 0x82, 0xc2,
	0x00, 0x87, 0x78, 0xca, 0xd0, 0x63, 0x00, 0x46, 0xa7, 0xc4, 0x9a, 0xe1, 0x49, 0x4c, 0x1a, 0xd9,
	0x3d, 0x65, 0xbf, 0x64, 0x94, 0x39, 0x72, 0xc1, 0x81, 0xa3, 0x87, 0x3f, 0xbd, 0xdd, 0xcd, 0xfc,
	0xf3, 0x76, 0x57, 0xf9, 0xfe, 0xef, 0x9f, 0x0f, 0xca, 0x31, 0xe9, 0x04, 0x22, 0xad, 0xf5, 0x47,
	0x16, 0xd4, 0x91, 0xef, 0xcd, 0x48, 0xc8, 0xf0, 0x64, 0x80, 0xaf, 0x26, 0x14, 0x3b, 0xa8, 0x0a,
	0xd9, 0x88, 0x36, 0x94, 0x3d, 0x65, 0xbf, 0x6c, 0x64, 0x23, 0x8a, 0xea, 0x90, 0x5f, 0x96, 0x2d,
	0x1b, 0xa9, 0x81, 0x10, 0xe4, 0x1c, 0x1c, 0xe1, 0xc6, 0x1d, 0x01, 0x8a, 0x77, 0xb4, 0x03, 0x65,
	0x17, 0x33, 0x6b, 0xe2, 0x4d, 0xbd, 0xa8, 0x91, 0x13, 0x8e, 0x92, 0x8b, 0xd9, 0x19, 0xb7, 0xd1,
	0x67, 0xb0, 0x31, 0xc5, 0x89, 0xf5, 0x86, 0x10, 0x2b, 0x20, 0xa1, 0xe5, 0x62, 0xd6, 0xc8, 0x8b,
	0x90, 0xbb, 0x53, 0x9c, 0x9c, 0x10, 0x32, 0x20, 0xe1, 0x29, 0x66, 0xe8, 0x39, 0x34, 0x78, 0x58,
	0x10, 0x7a, 0x34, 0xf4, 0xa2, 0xab, 0xb5, 0xf8, 0x82, 0x88, 0xaf, 0x4f, 0x71, 0x32, 0x90, 0xee,
	0x65, 0x5e, 0x1d, 0xf2, 0x3e, 0xf5, 0x6d, 0xd2, 0x28, 0xa6, 0x5d, 0x0a, 0x03, 0x6d, 0x43, 0xc9,
	0x21, 0xd8, 0x99, 0x78, 0x3e, 0x69, 0x94, 0xd2, 0x86, 0xe6, 0x36, 0x6a, 0x43, 0x61, 0x66, 0x71,
	0xfa, 0x1b, 0xe5, 0x3d, 0x65, 0xbf, 0x7a, 0xb8, 0xd9, 0x16, 0xf4, 0xb7, 0x2f, 0x48, 0xe8, 0xbd,
	0xf1, 0x6c, 0x1c, 0x79, 0xd4, 0x37, 0xaf, 0x02, 0x62, 0xe4, 0x67, 0xfc, 0x71, 0xf4, 0x64, 0x95,
	0xc4, 0x7a, 0x4c, 0x3a, 0xf1, 0x9c, 0x39, 0x2b, 0x48, 0xa9, 0x6b, 0xfd, 0xa8, 0x00, 0x5a, 0xf0,
	0xd9, 0xb5, 0x6d, 0x1a, 0xfb, 0x91, 0xee, 0xa0, 0xa7, 0xb0, 0x61, 0x8f, 0xb1, 0xe7, 0x5b, 0x3e,
	0x9e, 0x12, 0x16, 0x60, 0x9b, 0x48, 0x7a, 0xab, 0x02, 0xee, 0xcf, 0x51, 0xb4, 0x05, 0xa5, 0x34,
	0xd0, 0x73, 0x24, 0xdb, 0x45, 0x61, 0xeb, 0x0e, 0x9f, 0x8f, 0x7e, 0xeb, 0x93, 0x50, 0x12, 0x9e,
	0x1a, 0x1f, 0xeb, 0x09, 0xa7, 0xc7, 0xb7, 0x7e, 0xc9, 0x82, 0xaa, 0xfb, 0x97, 0x34, 0xf6, 0x9d,
	0xe1, 0x95, 0x1f, 0x8d, 0x49, 0xe4, 0xd9, 0xe8, 0x09, 0xdc, 0x65, 0x34, 0x0e, 0x6d, 0x62, 0x89,
	0xfa, 0xb2, 0x9d, 0x4a, 0x8a, 0xf5, 0x38, 0x84, 0x36, 0xa1, 0x18, 0x25, 0xd6, 0x18, 0xb3, 0xb1,
	0x6c, 0xa5, 0x10, 0x25, 0x2f, 0x31, 0x1b, 0xa3, 0x87, 0x50, 0x60, 0xc4, 0x77, 0x16, 0xad, 0x48,
	0x0b, 0x3d, 0x82, 0x72, 0x48, 0x6c, 0x2f, 0xf0, 0x88, 0x3f, 0x57, 0x7f, 0x09, 0xf0, 0x2c, 0x3c,
	0xe5, 0x0d, 0x49, 0xd5, 0xa5, 0xc5, 0x37, 0x17, 0x33, 0x46, 0x22, 0x0b, 0x3b, 0x4e, 0x28, 0x15,
	0x2e, 0x0b, 0xa4, 0xeb, 0x38, 0x21, 0x5f, 0xa9, 0x09, 0x75, 0x2d, 0xcf, 0x77, 0x48, 0x22, 0xa5,
	0x2d, 0x4d, 0xa8, 0xab, 0x73, 0x1b, 0x7d, 0x09, 0x55, 0x2f, 0x9d, 0xcc, 0x62, 0x11, 0x8e, 0x62,
	0x26, 0x34, 0xae, 0x1e, 0xde, 0x93, 0x4a, 0x0e, 0x05, 0x68, 0xdc, 0x93, 0x41, 0xa9, 0xf9, 0x3e,
	0x67, 0x8b, 0x1a, 0x73, 0x7a, 0x5a, 0xbf, 0x2a, 0x90, 0x1b, 0xf4, 0xcc, 0x64, 0x95, 0x04, 0xe5,
	0x03, 0x24, 0x64, 0xd7, 0x48, 0xd8, 0x02, 0xbe, 0xf1, 0x56, 0xcc, 0x88, 0x23, 0xe8, 0xc9, 0x19,
	0x45, 0x17, 0xb3, 0x11, 0x23, 0x0e, 0xe7, 0xfc, 0x72, 0x42, 0xed, 0x6f, 0xac, 0x31, 0xf1, 0xdc,
	0x71, 0x4a, 0x51, 0xce, 0xa8, 0x08, 0xec, 0xa5, 0x80, 0x44, 0xd5, 0x74, 0x90, 0x82, 0xac, 0x2a,
	0x2c, 0xce, 0x02, 0x09, 0x43, 0x1a, 0x5a, 0x53, 0xe6, 0xce, 0x59, 0x10, 0xc0, 0xd7, 0xcc, 0x3d,
	0x7a, 0xb0, 0x3a, 0x4f, 0x89, 0x5f, 0x6e, 0xdb, 0x8a, 0x92, 0xd6, 0x6f, 0x0a, 0xc0, 0x79, 0x1c,
	0x89, 0xd1, 0xcc, 0x04, 0x7d, 0x0e, 0x35, 0x87, 0xb0, 0xc8, 0xf3, 0xc5, 0x5e, 0xaf, 0xc9, 0xae,
	0xae, 0x38, 0xfe, 0x47, 0xfb, 0x35, 0x8d, 0xef, 0x7c, 0x58, 0xe3, 0xdc, 0x47, 0x34, 0xce, 0xdf,
	0xd2, 0xf8, 0x68, 0x67, 0x75, 0x80, 0x6a, 0x4c, 0x3a, 0x54, 0xb6, 0xcd, 0xc7, 0xf8, 0x57, 0x81,
	0xca, 0xe2, 0x4a, 0x99, 0x09, 0x7a, 0x0e, 0x30, 0xd7, 0x2b, 0x4a, 0xc4, 0x00, 0x95, 0xc5, 0xcd,
	0xbd, 0xbd, 0xe6, 0x46, 0x59, 0x86, 0x9a, 0x09, 0xda, 0x83, 0x7c, 0x90, 0xf0, 0x94, 0xac, 0x48,
	0xa9, 0xc8, 0x14, 0xae, 0xb2, 0x91, 0x0b, 0x12, 0x33, 0x41, 0x87, 0x50, 0x59, 0x39, 0x58, 0x4c,
	0x57, 0x39, 0xac, 0xc9, 0xb8, 0x25, 0x93, 0x06, 0xd0, 0x25, 0xab, 0x3d, 0x50, 0x97, 0x37, 0x4e,
	0x4a, 0x97, 0x13, 0x3b, 0xd8, 0x90, 0x89, 0x2b, 0xbd, 0xcb, 0x75, 0xdc, 0x58, 0x64, 0xc8, 0x85,
	0x7c, 0xb4, 0x3a, 0xff, 0xc6, 0xda, 0x25, 0x8e, 0x92, 0x83, 0x53, 0x50, 0x6f, 0xff, 0x23, 0xa1,
	0x87, 0x80, 0x98, 0xe7, 0xfa, 0xc4, 0x59, 0xf5, 0xa8, 0x19, 0xb4, 0x03, 0x9b, 0xf1, 0xf2, 0xbc,
	0x35, 0xa7, 0x72, 0xf0, 0x5d, 0x16, 0x6a, 0xef, 0x75, 0x83, 0x3e, 0x81, 0xdd, 0x51, 0x5f, 0xbf,
	0xd0, 0x8c, 0x61, 0xf7, 0xcc, 0x32, 0x5f, 0x59, 0x43, 0xb3, 0x6b, 0x8e, 0x86, 0xd6, 0xa8, 0x3f,
	0x1c, 0x68, 0x3d, 0xfd, 0x44, 0xd7, 0x8e, 0xd5, 0x0c, 0xba, 0x0f, 0x1b, 0x7a, 0xff, 0xc5, 0xf9,
	0xa8, 0x7f, 0x6c, 0x0d, 0x47, 0xbd, 0x9e, 0x36, 0x1c, 0xaa, 0x0a, 0x7a, 0x0c, 0x5b, 0x03, 0xad,
	0x7f, 0xac, 0xf7, 0x4f, 0xad, 0xb9, 0x53, 0x7b, 0xa5, 0xf5, 0x46, 0xa6, 0x7e, 0xde, 0x57, 0xb3,
	0x68, 0x13, 0xee, 0x0f, 0x7a, 0x12, 0xd1, 0x96, 0x79, 0x77, 0x78, 0xf3, 0xab, 0x8e, 0x93, 0xae,
	0x7e, 0xa6, 0x1d, 0xab, 0x39, 0xf4, 0x00, 0x6a, 0x83, 0x9e, 0x35, 0x2f, 0x69, 0x68, 0x17, 0x9a,
	0x61, 0xaa, 0x79, 0x54, 0x07, 0xf5, 0x7c, 0x64, 0xa6, 0xf5, 0xa5, 0x53, 0x2d, 0xac, 0xa1, 0xf3,
	0xd2, 0x45, 0xde, 0xe7, 0x02, 0x95, 0x75, 0x4b, 0xe8, 0x2e, 0x94, 0x7a, 0xdd, 0x7e, 0x4f, 0xe3,
	0x56, 0xf9, 0xe0, 0x53, 0x28, 0xc8, 0xc9, 0x2b, 0x50, 0x9c, 0xd7, 0xcb, 0xa0, 0x7b, 0x50, 0x3e,
	0xd1, 0xfb, 0xdd, 0x33, 0xfd, 0xb5, 0x76, 0xac, 0x2a, 0x2f, 0xba, 0xbf, 0x5f, 0x37, 0x95, 0x77,
	0xd7, 0x4d, 0xe5, 0xaf, 0xeb, 0xa6, 0xf2, 0xc3, 0x4d, 0x33, 0xf3, 0xee, 0xa6, 0x99, 0xf9, 0xf3,
	0xa6, 0x99, 0x79, 0xfd, 0xd4, 0xf5, 0xa2, 0x71, 0x7c, 0xd9, 0xb6, 0xe9, 0xb4, 0x13, 0xd2, 0xc9,
	0x44, 0x5c, 0x24, 0xd6, 0x09, 0xc4, 0xb3, 0x93, 0x74, 0x62, 0x92, 0x7e, 0xd2, 0x2f, 0x0b, 0xe2,
	0x1b, 0xfd, 0xc5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0x5a, 0xe6, 0xc5, 0xe8, 0x07, 0x00,
	0x00,
>>>>>>> 5b868de (feat: added inbound_synthetic in types):x/ue/types/types.pb.go
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SomeValue != that1.SomeValue {
		return false
	}
	return true
}
func (this *UniversalPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalPayload)
	if !ok {
		that2, ok := that.(UniversalPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.MaxFeePerGas != that1.MaxFeePerGas {
		return false
	}
	if this.MaxPriorityFeePerGas != that1.MaxPriorityFeePerGas {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if this.VType != that1.VType {
		return false
	}
	return true
}
func (this *UniversalAccountId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalAccountId)
	if !ok {
		that2, ok := that.(UniversalAccountId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainNamespace != that1.ChainNamespace {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	return true
}
func (this *InboundSynthetic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InboundSynthetic)
	if !ok {
		that2, ok := that.(InboundSynthetic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceChain != that1.SourceChain {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Recipient != that1.Recipient {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.AssetAddr != that1.AssetAddr {
		return false
	}
	if this.LogIndex != that1.LogIndex {
		return false
	}
	if this.InboundStatus != that1.InboundStatus {
		return false
	}
	return true
}
func (this *PCTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PCTx)
	if !ok {
		that2, ok := that.(PCTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.ErrorMsg != that1.ErrorMsg {
		return false
	}
	return true
}
func (this *OutboundTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutboundTx)
	if !ok {
		that2, ok := that.(OutboundTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChain != that1.DestinationChain {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Recipient != that1.Recipient {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.AssetAddr != that1.AssetAddr {
		return false
	}
	return true
}
func (this *UniversalTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalTx)
	if !ok {
		that2, ok := that.(UniversalTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InboundTx.Equal(that1.InboundTx) {
		return false
	}
	if !this.PxTx.Equal(that1.PxTx) {
		return false
	}
	if !this.OutboundTx.Equal(that1.OutboundTx) {
		return false
	}
	if this.UniversalStatus != that1.UniversalStatus {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SomeValue {
		i--
		if m.SomeValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *UniversalPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxPriorityFeePerGas) > 0 {
		i -= len(m.MaxPriorityFeePerGas)
		copy(dAtA[i:], m.MaxPriorityFeePerGas)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaxPriorityFeePerGas)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MaxFeePerGas) > 0 {
		i -= len(m.MaxFeePerGas)
		copy(dAtA[i:], m.MaxFeePerGas)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaxFeePerGas)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniversalAccountId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalAccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalAccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNamespace) > 0 {
		i -= len(m.ChainNamespace)
		copy(dAtA[i:], m.ChainNamespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainNamespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InboundSynthetic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundSynthetic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundSynthetic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InboundStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InboundStatus))
		i--
		dAtA[i] = 0x40
	}
	if len(m.LogIndex) > 0 {
		i -= len(m.LogIndex)
		copy(dAtA[i:], m.LogIndex)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LogIndex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AssetAddr) > 0 {
		i -= len(m.AssetAddr)
		copy(dAtA[i:], m.AssetAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AssetAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceChain) > 0 {
		i -= len(m.SourceChain)
		copy(dAtA[i:], m.SourceChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PCTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PCTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PCTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.GasUsed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetAddr) > 0 {
		i -= len(m.AssetAddr)
		copy(dAtA[i:], m.AssetAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AssetAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniversalTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniversalStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UniversalStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.OutboundTx != nil {
		{
			size, err := m.OutboundTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PxTx != nil {
		{
			size, err := m.PxTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InboundTx != nil {
		{
			size, err := m.InboundTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SomeValue {
		n += 2
	}
	return n
}

func (m *UniversalPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaxFeePerGas)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaxPriorityFeePerGas)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VType != 0 {
		n += 1 + sovTypes(uint64(m.VType))
	}
	return n
}

func (m *UniversalAccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainNamespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *InboundSynthetic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AssetAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LogIndex)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InboundStatus != 0 {
		n += 1 + sovTypes(uint64(m.InboundStatus))
	}
	return n
}

func (m *PCTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTypes(uint64(m.GasUsed))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.BlockHeight))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OutboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AssetAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UniversalTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InboundTx != nil {
		l = m.InboundTx.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PxTx != nil {
		l = m.PxTx.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OutboundTx != nil {
		l = m.OutboundTx.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UniversalStatus != 0 {
		n += 1 + sovTypes(uint64(m.UniversalStatus))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SomeValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SomeValue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPriorityFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VType", wireType)
			}
			m.VType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VType |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalAccountId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalAccountId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalAccountId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundSynthetic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundSynthetic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundSynthetic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundStatus", wireType)
			}
			m.InboundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundStatus |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PCTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PCTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PCTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundTx == nil {
				m.InboundTx = &InboundSynthetic{}
			}
			if err := m.InboundTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PxTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PxTx == nil {
				m.PxTx = &PCTx{}
			}
			if err := m.PxTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundTx == nil {
				m.OutboundTx = &OutboundTx{}
			}
			if err := m.OutboundTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalStatus", wireType)
			}
			m.UniversalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniversalStatus |= UniversalTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
