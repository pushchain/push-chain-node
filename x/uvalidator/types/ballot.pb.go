// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uvalidator/v1/ballot.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ---------------------------
// Ballot Status Enum
// ---------------------------
type BallotStatus int32

const (
	BallotStatus_BALLOT_STATUS_UNSPECIFIED BallotStatus = 0
	BallotStatus_BALLOT_STATUS_PENDING     BallotStatus = 1
	BallotStatus_BALLOT_STATUS_PASSED      BallotStatus = 2
	BallotStatus_BALLOT_STATUS_REJECTED    BallotStatus = 3
	BallotStatus_BALLOT_STATUS_EXPIRED     BallotStatus = 4
)

var BallotStatus_name = map[int32]string{
	0: "BALLOT_STATUS_UNSPECIFIED",
	1: "BALLOT_STATUS_PENDING",
	2: "BALLOT_STATUS_PASSED",
	3: "BALLOT_STATUS_REJECTED",
	4: "BALLOT_STATUS_EXPIRED",
}

var BallotStatus_value = map[string]int32{
	"BALLOT_STATUS_UNSPECIFIED": 0,
	"BALLOT_STATUS_PENDING":     1,
	"BALLOT_STATUS_PASSED":      2,
	"BALLOT_STATUS_REJECTED":    3,
	"BALLOT_STATUS_EXPIRED":     4,
}

func (x BallotStatus) String() string {
	return proto.EnumName(BallotStatus_name, int32(x))
}

func (BallotStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9f9c8e0d3c818f3, []int{0}
}

// ---------------------------
// Ballot Observation Type
// ---------------------------
type BallotObservationType int32

const (
	BallotObservationType_BALLOT_OBSERVATION_TYPE_UNSPECIFIED BallotObservationType = 0
	BallotObservationType_BALLOT_OBSERVATION_TYPE_INBOUND_TX  BallotObservationType = 1
	BallotObservationType_BALLOT_OBSERVATION_TYPE_OUTBOUND_TX BallotObservationType = 2
)

var BallotObservationType_name = map[int32]string{
	0: "BALLOT_OBSERVATION_TYPE_UNSPECIFIED",
	1: "BALLOT_OBSERVATION_TYPE_INBOUND_TX",
	2: "BALLOT_OBSERVATION_TYPE_OUTBOUND_TX",
}

var BallotObservationType_value = map[string]int32{
	"BALLOT_OBSERVATION_TYPE_UNSPECIFIED": 0,
	"BALLOT_OBSERVATION_TYPE_INBOUND_TX":  1,
	"BALLOT_OBSERVATION_TYPE_OUTBOUND_TX": 2,
}

func (x BallotObservationType) String() string {
	return proto.EnumName(BallotObservationType_name, int32(x))
}

func (BallotObservationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9f9c8e0d3c818f3, []int{1}
}

// ---------------------------
// Vote Result Enum
// ---------------------------
type VoteResult int32

const (
	VoteResult_VOTE_RESULT_NOT_YET_VOTED VoteResult = 0
	VoteResult_VOTE_RESULT_SUCCESS       VoteResult = 1
	VoteResult_VOTE_RESULT_FAILURE       VoteResult = 2
)

var VoteResult_name = map[int32]string{
	0: "VOTE_RESULT_NOT_YET_VOTED",
	1: "VOTE_RESULT_SUCCESS",
	2: "VOTE_RESULT_FAILURE",
}

var VoteResult_value = map[string]int32{
	"VOTE_RESULT_NOT_YET_VOTED": 0,
	"VOTE_RESULT_SUCCESS":       1,
	"VOTE_RESULT_FAILURE":       2,
}

func (x VoteResult) String() string {
	return proto.EnumName(VoteResult_name, int32(x))
}

func (VoteResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9f9c8e0d3c818f3, []int{2}
}

// ---------------------------
// Core Ballot Message (Indexed Voting Approach)
// ---------------------------
type Ballot struct {
	Id                 string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BallotType         BallotObservationType `protobuf:"varint,2,opt,name=ballot_type,json=ballotType,proto3,enum=uvalidator.v1.BallotObservationType" json:"ballot_type,omitempty"`
	EligibleVoters     []string              `protobuf:"bytes,3,rep,name=eligible_voters,json=eligibleVoters,proto3" json:"eligible_voters,omitempty"`
	Votes              []VoteResult          `protobuf:"varint,4,rep,packed,name=votes,proto3,enum=uvalidator.v1.VoteResult" json:"votes,omitempty"`
	VotingThreshold    int64                 `protobuf:"varint,5,opt,name=voting_threshold,json=votingThreshold,proto3" json:"voting_threshold,omitempty"`
	Status             BallotStatus          `protobuf:"varint,6,opt,name=status,proto3,enum=uvalidator.v1.BallotStatus" json:"status,omitempty"`
	BlockHeightCreated int64                 `protobuf:"varint,7,opt,name=block_height_created,json=blockHeightCreated,proto3" json:"block_height_created,omitempty"`
	BlockHeightExpiry  int64                 `protobuf:"varint,8,opt,name=block_height_expiry,json=blockHeightExpiry,proto3" json:"block_height_expiry,omitempty"`
}

func (m *Ballot) Reset()         { *m = Ballot{} }
func (m *Ballot) String() string { return proto.CompactTextString(m) }
func (*Ballot) ProtoMessage()    {}
func (*Ballot) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9f9c8e0d3c818f3, []int{0}
}
func (m *Ballot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ballot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ballot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ballot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ballot.Merge(m, src)
}
func (m *Ballot) XXX_Size() int {
	return m.Size()
}
func (m *Ballot) XXX_DiscardUnknown() {
	xxx_messageInfo_Ballot.DiscardUnknown(m)
}

var xxx_messageInfo_Ballot proto.InternalMessageInfo

func (m *Ballot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ballot) GetBallotType() BallotObservationType {
	if m != nil {
		return m.BallotType
	}
	return BallotObservationType_BALLOT_OBSERVATION_TYPE_UNSPECIFIED
}

func (m *Ballot) GetEligibleVoters() []string {
	if m != nil {
		return m.EligibleVoters
	}
	return nil
}

func (m *Ballot) GetVotes() []VoteResult {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Ballot) GetVotingThreshold() int64 {
	if m != nil {
		return m.VotingThreshold
	}
	return 0
}

func (m *Ballot) GetStatus() BallotStatus {
	if m != nil {
		return m.Status
	}
	return BallotStatus_BALLOT_STATUS_UNSPECIFIED
}

func (m *Ballot) GetBlockHeightCreated() int64 {
	if m != nil {
		return m.BlockHeightCreated
	}
	return 0
}

func (m *Ballot) GetBlockHeightExpiry() int64 {
	if m != nil {
		return m.BlockHeightExpiry
	}
	return 0
}

func init() {
	proto.RegisterEnum("uvalidator.v1.BallotStatus", BallotStatus_name, BallotStatus_value)
	proto.RegisterEnum("uvalidator.v1.BallotObservationType", BallotObservationType_name, BallotObservationType_value)
	proto.RegisterEnum("uvalidator.v1.VoteResult", VoteResult_name, VoteResult_value)
	proto.RegisterType((*Ballot)(nil), "uvalidator.v1.Ballot")
}

func init() { proto.RegisterFile("uvalidator/v1/ballot.proto", fileDescriptor_b9f9c8e0d3c818f3) }

var fileDescriptor_b9f9c8e0d3c818f3 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0xd3, 0x3e,
	0x1c, 0xc6, 0xeb, 0x76, 0xeb, 0xef, 0x37, 0x03, 0x5d, 0xe6, 0x6d, 0x90, 0x15, 0x11, 0x55, 0x03,
	0xb1, 0xb2, 0x43, 0xc3, 0xb6, 0x57, 0xd0, 0x3f, 0x1e, 0x04, 0x55, 0x49, 0xe5, 0x38, 0xd3, 0xc6,
	0xc5, 0x4a, 0x5b, 0xab, 0xb5, 0xc8, 0xea, 0x2a, 0x71, 0xab, 0xed, 0x5d, 0x70, 0xe3, 0xc8, 0x85,
	0x03, 0x2f, 0x85, 0xe3, 0x8e, 0x1c, 0xd1, 0xf6, 0x32, 0xb8, 0xa0, 0x38, 0x2b, 0x6b, 0xcb, 0xe0,
	0xd2, 0x5a, 0xcf, 0xe7, 0x79, 0xfc, 0xd8, 0x49, 0xbe, 0xb0, 0x3c, 0x99, 0x86, 0x91, 0xe8, 0x87,
	0x4a, 0xc6, 0xf6, 0xf4, 0xc0, 0xee, 0x86, 0x51, 0x24, 0x55, 0x6d, 0x1c, 0x4b, 0x25, 0xd1, 0xa3,
	0x3b, 0x56, 0x9b, 0x1e, 0x94, 0xb7, 0x06, 0x72, 0x20, 0x35, 0xb1, 0xd3, 0x55, 0x66, 0x2a, 0x6f,
	0x84, 0xe7, 0x62, 0x24, 0x6d, 0xfd, 0x9b, 0x49, 0xbb, 0x3f, 0xf3, 0xb0, 0xd8, 0xd0, 0x1b, 0xa1,
	0x12, 0xcc, 0x8b, 0xbe, 0x09, 0x2a, 0xa0, 0xba, 0x46, 0xf2, 0xa2, 0x8f, 0x30, 0x7c, 0x90, 0x55,
	0x30, 0x75, 0x39, 0xe6, 0x66, 0xbe, 0x02, 0xaa, 0xa5, 0xc3, 0x17, 0xb5, 0x85, 0xa2, 0x5a, 0x96,
	0xf5, 0xba, 0x09, 0x8f, 0xa7, 0xa1, 0x12, 0x72, 0x44, 0x2f, 0xc7, 0x9c, 0xc0, 0x2c, 0x98, 0xae,
	0xd1, 0x1e, 0x5c, 0xe7, 0x91, 0x18, 0x88, 0x6e, 0xc4, 0xd9, 0x54, 0x2a, 0x1e, 0x27, 0x66, 0xa1,
	0x52, 0xa8, 0xae, 0x91, 0xd2, 0x4c, 0x3e, 0xd1, 0x2a, 0xb2, 0xe1, 0x6a, 0xca, 0x13, 0x73, 0xa5,
	0x52, 0xa8, 0x96, 0x0e, 0x77, 0x96, 0x9a, 0x52, 0x17, 0xe1, 0xc9, 0x24, 0x52, 0x24, 0xf3, 0xa1,
	0x57, 0xd0, 0x98, 0x4a, 0x25, 0x46, 0x03, 0xa6, 0x86, 0x31, 0x4f, 0x86, 0x32, 0xea, 0x9b, 0xab,
	0x15, 0x50, 0x2d, 0x90, 0xf5, 0x4c, 0xa7, 0x33, 0x19, 0x1d, 0xc1, 0x62, 0xa2, 0x42, 0x35, 0x49,
	0xcc, 0xa2, 0xbe, 0xc6, 0xd3, 0x7b, 0xaf, 0xe1, 0x6b, 0x0b, 0xb9, 0xb5, 0xa2, 0xd7, 0x70, 0xab,
	0x1b, 0xc9, 0xde, 0x07, 0x36, 0xe4, 0x62, 0x30, 0x54, 0xac, 0x17, 0xf3, 0x50, 0xf1, 0xbe, 0xf9,
	0x9f, 0xee, 0x40, 0x9a, 0xbd, 0xd5, 0xa8, 0x99, 0x11, 0x54, 0x83, 0x9b, 0x0b, 0x09, 0x7e, 0x31,
	0x16, 0xf1, 0xa5, 0xf9, 0xbf, 0x0e, 0x6c, 0xcc, 0x05, 0xb0, 0x06, 0xfb, 0x9f, 0x01, 0x7c, 0x38,
	0x5f, 0x8d, 0x9e, 0xc1, 0x9d, 0x46, 0xbd, 0xdd, 0xf6, 0x28, 0xf3, 0x69, 0x9d, 0x06, 0x3e, 0x0b,
	0x5c, 0xbf, 0x83, 0x9b, 0xce, 0xb1, 0x83, 0x5b, 0x46, 0x0e, 0xed, 0xc0, 0xed, 0x45, 0xdc, 0xc1,
	0x6e, 0xcb, 0x71, 0xdf, 0x18, 0x00, 0x99, 0x70, 0x6b, 0x09, 0xd5, 0x7d, 0x1f, 0xb7, 0x8c, 0x3c,
	0x2a, 0xc3, 0xc7, 0x8b, 0x84, 0xe0, 0x77, 0xb8, 0x49, 0x71, 0xcb, 0x28, 0xfc, 0xb9, 0x21, 0x3e,
	0xed, 0x38, 0x04, 0xb7, 0x8c, 0x95, 0xf2, 0xca, 0xd7, 0x2f, 0x16, 0xd8, 0xff, 0x04, 0xe0, 0xf6,
	0xbd, 0xef, 0x18, 0xed, 0xc1, 0xe7, 0xb7, 0x51, 0xaf, 0xe1, 0x63, 0x72, 0x52, 0xa7, 0x8e, 0xe7,
	0x32, 0x7a, 0xd6, 0xc1, 0x4b, 0x87, 0x7e, 0x09, 0x77, 0xff, 0x66, 0x74, 0xdc, 0x86, 0x17, 0xb8,
	0x2d, 0x46, 0x4f, 0x0d, 0xf0, 0xaf, 0x0d, 0xbd, 0x80, 0xfe, 0x36, 0xe6, 0x6f, 0x4f, 0xd6, 0x83,
	0xf0, 0xee, 0x93, 0x48, 0x1f, 0xdc, 0x89, 0x47, 0x31, 0x23, 0xd8, 0x0f, 0xda, 0x94, 0xb9, 0x1e,
	0x65, 0x67, 0x98, 0xb2, 0x54, 0x4b, 0xcf, 0xf0, 0x04, 0x6e, 0xce, 0x63, 0x3f, 0x68, 0x36, 0xb1,
	0xef, 0x1b, 0x60, 0x19, 0x1c, 0xd7, 0x9d, 0x76, 0x40, 0xf0, 0xac, 0xa4, 0xe1, 0x7c, 0xbb, 0xb6,
	0xc0, 0xd5, 0xb5, 0x05, 0x7e, 0x5c, 0x5b, 0xe0, 0xe3, 0x8d, 0x95, 0xbb, 0xba, 0xb1, 0x72, 0xdf,
	0x6f, 0xac, 0xdc, 0x7b, 0x7b, 0x20, 0xd4, 0x70, 0xd2, 0xad, 0xf5, 0xe4, 0xb9, 0x1d, 0xcb, 0x28,
	0xea, 0x0d, 0x43, 0x31, 0x4a, 0xec, 0xb1, 0xfe, 0xb7, 0x2f, 0xec, 0xb9, 0x59, 0x4d, 0xc7, 0x27,
	0xe9, 0x16, 0xf5, 0xc0, 0x1d, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x10, 0x67, 0xa7, 0xc3, 0xc6,
	0x03, 0x00, 0x00,
}

func (m *Ballot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ballot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ballot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeightExpiry != 0 {
		i = encodeVarintBallot(dAtA, i, uint64(m.BlockHeightExpiry))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockHeightCreated != 0 {
		i = encodeVarintBallot(dAtA, i, uint64(m.BlockHeightCreated))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintBallot(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.VotingThreshold != 0 {
		i = encodeVarintBallot(dAtA, i, uint64(m.VotingThreshold))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Votes) > 0 {
		dAtA2 := make([]byte, len(m.Votes)*10)
		var j1 int
		for _, num := range m.Votes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBallot(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EligibleVoters) > 0 {
		for iNdEx := len(m.EligibleVoters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EligibleVoters[iNdEx])
			copy(dAtA[i:], m.EligibleVoters[iNdEx])
			i = encodeVarintBallot(dAtA, i, uint64(len(m.EligibleVoters[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BallotType != 0 {
		i = encodeVarintBallot(dAtA, i, uint64(m.BallotType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBallot(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBallot(dAtA []byte, offset int, v uint64) int {
	offset -= sovBallot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ballot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBallot(uint64(l))
	}
	if m.BallotType != 0 {
		n += 1 + sovBallot(uint64(m.BallotType))
	}
	if len(m.EligibleVoters) > 0 {
		for _, s := range m.EligibleVoters {
			l = len(s)
			n += 1 + l + sovBallot(uint64(l))
		}
	}
	if len(m.Votes) > 0 {
		l = 0
		for _, e := range m.Votes {
			l += sovBallot(uint64(e))
		}
		n += 1 + sovBallot(uint64(l)) + l
	}
	if m.VotingThreshold != 0 {
		n += 1 + sovBallot(uint64(m.VotingThreshold))
	}
	if m.Status != 0 {
		n += 1 + sovBallot(uint64(m.Status))
	}
	if m.BlockHeightCreated != 0 {
		n += 1 + sovBallot(uint64(m.BlockHeightCreated))
	}
	if m.BlockHeightExpiry != 0 {
		n += 1 + sovBallot(uint64(m.BlockHeightExpiry))
	}
	return n
}

func sovBallot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBallot(x uint64) (n int) {
	return sovBallot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ballot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBallot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ballot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ballot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBallot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBallot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotType", wireType)
			}
			m.BallotType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BallotType |= BallotObservationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleVoters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBallot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBallot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EligibleVoters = append(m.EligibleVoters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v VoteResult
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBallot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VoteResult(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Votes = append(m.Votes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBallot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBallot
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBallot
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Votes) == 0 {
					m.Votes = make([]VoteResult, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VoteResult
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBallot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VoteResult(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Votes = append(m.Votes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingThreshold", wireType)
			}
			m.VotingThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BallotStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightCreated", wireType)
			}
			m.BlockHeightCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightCreated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightExpiry", wireType)
			}
			m.BlockHeightExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightExpiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBallot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBallot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBallot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBallot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBallot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBallot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBallot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBallot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBallot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBallot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBallot = fmt.Errorf("proto: unexpected end of group")
)
