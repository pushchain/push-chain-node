syntax = "proto3";
package uvalidator.v1;

import "google/api/annotations.proto";
import "uvalidator/v1/genesis.proto";
import "uvalidator/v1/types.proto";
import "uvalidator/v1/ballot.proto";

import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/rollchains/pchain/x/uvalidator/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params queries all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/uvalidator/v1/params";
  }

  // UniversalValidatorByCore queries the universal validator associated with the given core validator address.
  rpc UniversalValidatorByCore(QueryUniversalValidatorByCoreRequest) returns (QueryUniversalValidatorByCoreResponse) {
    option (google.api.http).get = "/uvalidator/v1/core_validators/{core_validator_address}/universal_validator";
  }

  // CoreValidatorByUniversal queries the core validator address associated with the given universal validator address.
  rpc CoreValidatorByUniversal(QueryCoreValidatorByUniversalRequest) returns (QueryCoreValidatorByUniversalResponse) {
    option (google.api.http).get = "/uvalidator/v1/universal_validators/{universal_validator_address}/core_validator";
  }

  // AllUniversalValidators queries the details of a specific universal validator by its address.
  rpc AllUniversalValidators(QueryUniversalValidatorsSetRequest) returns (QueryUniversalValidatorsSetResponse) {
    option (google.api.http).get = "/uvalidator/v1/universal_validators";
  }

  // Ballot queries one ballot by ID.
  rpc Ballot(QueryBallotRequest) returns (QueryBallotResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/{id}";
  }

  // Ballots queries all ballots.
  rpc AllBallots(QueryBallotsRequest) returns (QueryBallotsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots";
  }

  // ActiveBallotIDs queries all active ballot IDs.
  rpc AllActiveBallotIDs(QueryActiveBallotIDsRequest) returns (QueryActiveBallotIDsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/active/ids";
  }

  // ActiveBallots queries all active ballots with full details.
  rpc AllActiveBallots(QueryActiveBallotsRequest) returns (QueryActiveBallotsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/active";
  }

  // ExpiredBallotIDs queries all expired ballot IDs.
  rpc AllExpiredBallotIDs(QueryExpiredBallotIDsRequest) returns (QueryExpiredBallotIDsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/expired/ids";
  }

  // ExpiredBallots queries all expired ballots with full details.
  rpc AllExpiredBallots(QueryExpiredBallotsRequest) returns (QueryExpiredBallotsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/expired";
  }

  // FinalizedBallotIDs queries all finalized ballot IDs.
  rpc AllFinalizedBallotIDs(QueryFinalizedBallotIDsRequest) returns (QueryFinalizedBallotIDsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/finalized/ids";
  }

  // FinalizedBallots queries all finalized ballots with full details.
  rpc AllFinalizedBallots(QueryFinalizedBallotsRequest) returns (QueryFinalizedBallotsResponse) {
    option (google.api.http).get = "/uvalidator/v1/ballots/finalized";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

// QueryUniversalValidatorByCoreRequest is the request type for the Query/UniversalValidatorByCore RPC method.
message QueryUniversalValidatorByCoreRequest {
  // core_validator_address specifies the address of the core validator to query.
  string core_validator_address = 1;
}

// QueryUniversalValidatorByCoreResponse is the response type for the Query/UniversalValidatorByCore RPC method.
message QueryUniversalValidatorByCoreResponse {
  // universal_validator defines the universal validator associated with the specified core validator.
  string universal_validator = 1;
}

// QueryCoreValidatorByUniversalRequest is the request type for the Query/CoreValidatorByUniversal RPC method.
message QueryCoreValidatorByUniversalRequest {
  // universal_validator_address specifies the address of the universal validator to query.
  string universal_validator_address = 1;
}

// QueryCoreValidatorByUniversalResponse is the response type for the Query/CoreValidatorByUniversal RPC method.
message QueryCoreValidatorByUniversalResponse {
  // core_validator_address defines the core validator associated with the specified universal validator.
  string core_validator_address = 1;
}

// QueryUniversalValidatorsSetRequest is the request type for Query/UniversalValidatorAddresses.
message QueryUniversalValidatorsSetRequest {}

// QueryUniversalValidatorsSetResponse is the response type for Query/UniversalValidatorAddresses.
message QueryUniversalValidatorsSetResponse {
  // addresses is the list of all universal validator addresses registered in the module.
  repeated string addresses = 1;
}

// Single ballot
message QueryBallotRequest {
  string id = 1;
}
message QueryBallotResponse {
  Ballot ballot = 1;
}

// All ballots
message QueryBallotsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryBallotsResponse {
  repeated Ballot ballots = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Active ballots
message QueryActiveBallotIDsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryActiveBallotIDsResponse {
  repeated string ids = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryActiveBallotsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryActiveBallotsResponse {
  repeated Ballot ballots = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Expired ballots
message QueryExpiredBallotIDsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryExpiredBallotIDsResponse {
  repeated string ids = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryExpiredBallotsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryExpiredBallotsResponse {
  repeated Ballot ballots = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Finalized ballots
message QueryFinalizedBallotIDsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryFinalizedBallotIDsResponse {
  repeated string ids = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFinalizedBallotsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryFinalizedBallotsResponse {
  repeated Ballot ballots = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}