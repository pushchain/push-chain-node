// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uvalidator/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryUniversalValidatorByCoreRequest is the request type for the Query/UniversalValidatorByCore RPC method.
type QueryUniversalValidatorByCoreRequest struct {
	// core_validator_address specifies the address of the core validator to query.
	CoreValidatorAddress string `protobuf:"bytes,1,opt,name=core_validator_address,json=coreValidatorAddress,proto3" json:"core_validator_address,omitempty"`
}

func (m *QueryUniversalValidatorByCoreRequest) Reset()         { *m = QueryUniversalValidatorByCoreRequest{} }
func (m *QueryUniversalValidatorByCoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorByCoreRequest) ProtoMessage()    {}
func (*QueryUniversalValidatorByCoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{2}
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorByCoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorByCoreRequest.Merge(m, src)
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorByCoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorByCoreRequest proto.InternalMessageInfo

func (m *QueryUniversalValidatorByCoreRequest) GetCoreValidatorAddress() string {
	if m != nil {
		return m.CoreValidatorAddress
	}
	return ""
}

// QueryUniversalValidatorByCoreResponse is the response type for the Query/UniversalValidatorByCore RPC method.
type QueryUniversalValidatorByCoreResponse struct {
	// universal_validator defines the universal validator associated with the specified core validator.
	UniversalValidator string `protobuf:"bytes,1,opt,name=universal_validator,json=universalValidator,proto3" json:"universal_validator,omitempty"`
}

func (m *QueryUniversalValidatorByCoreResponse) Reset()         { *m = QueryUniversalValidatorByCoreResponse{} }
func (m *QueryUniversalValidatorByCoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorByCoreResponse) ProtoMessage()    {}
func (*QueryUniversalValidatorByCoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{3}
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorByCoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorByCoreResponse.Merge(m, src)
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorByCoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorByCoreResponse proto.InternalMessageInfo

func (m *QueryUniversalValidatorByCoreResponse) GetUniversalValidator() string {
	if m != nil {
		return m.UniversalValidator
	}
	return ""
}

// QueryCoreValidatorByUniversalRequest is the request type for the Query/CoreValidatorByUniversal RPC method.
type QueryCoreValidatorByUniversalRequest struct {
	// universal_validator_address specifies the address of the universal validator to query.
	UniversalValidatorAddress string `protobuf:"bytes,1,opt,name=universal_validator_address,json=universalValidatorAddress,proto3" json:"universal_validator_address,omitempty"`
}

func (m *QueryCoreValidatorByUniversalRequest) Reset()         { *m = QueryCoreValidatorByUniversalRequest{} }
func (m *QueryCoreValidatorByUniversalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoreValidatorByUniversalRequest) ProtoMessage()    {}
func (*QueryCoreValidatorByUniversalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{4}
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoreValidatorByUniversalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoreValidatorByUniversalRequest.Merge(m, src)
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoreValidatorByUniversalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoreValidatorByUniversalRequest proto.InternalMessageInfo

func (m *QueryCoreValidatorByUniversalRequest) GetUniversalValidatorAddress() string {
	if m != nil {
		return m.UniversalValidatorAddress
	}
	return ""
}

// QueryCoreValidatorByUniversalResponse is the response type for the Query/CoreValidatorByUniversal RPC method.
type QueryCoreValidatorByUniversalResponse struct {
	// core_validator_address defines the core validator associated with the specified universal validator.
	CoreValidatorAddress string `protobuf:"bytes,1,opt,name=core_validator_address,json=coreValidatorAddress,proto3" json:"core_validator_address,omitempty"`
}

func (m *QueryCoreValidatorByUniversalResponse) Reset()         { *m = QueryCoreValidatorByUniversalResponse{} }
func (m *QueryCoreValidatorByUniversalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoreValidatorByUniversalResponse) ProtoMessage()    {}
func (*QueryCoreValidatorByUniversalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{5}
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoreValidatorByUniversalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoreValidatorByUniversalResponse.Merge(m, src)
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoreValidatorByUniversalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoreValidatorByUniversalResponse proto.InternalMessageInfo

func (m *QueryCoreValidatorByUniversalResponse) GetCoreValidatorAddress() string {
	if m != nil {
		return m.CoreValidatorAddress
	}
	return ""
}

// QueryUniversalValidatorsSetRequest is the request type for Query/UniversalValidatorAddresses.
type QueryUniversalValidatorsSetRequest struct {
}

func (m *QueryUniversalValidatorsSetRequest) Reset()         { *m = QueryUniversalValidatorsSetRequest{} }
func (m *QueryUniversalValidatorsSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorsSetRequest) ProtoMessage()    {}
func (*QueryUniversalValidatorsSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{6}
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorsSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorsSetRequest.Merge(m, src)
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorsSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorsSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorsSetRequest proto.InternalMessageInfo

// QueryUniversalValidatorsSetResponse is the response type for Query/UniversalValidatorAddresses.
type QueryUniversalValidatorsSetResponse struct {
	// addresses is the list of all universal validator addresses registered in the module.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryUniversalValidatorsSetResponse) Reset()         { *m = QueryUniversalValidatorsSetResponse{} }
func (m *QueryUniversalValidatorsSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorsSetResponse) ProtoMessage()    {}
func (*QueryUniversalValidatorsSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{7}
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorsSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorsSetResponse.Merge(m, src)
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorsSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorsSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorsSetResponse proto.InternalMessageInfo

func (m *QueryUniversalValidatorsSetResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "uvalidator.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "uvalidator.v1.QueryParamsResponse")
	proto.RegisterType((*QueryUniversalValidatorByCoreRequest)(nil), "uvalidator.v1.QueryUniversalValidatorByCoreRequest")
	proto.RegisterType((*QueryUniversalValidatorByCoreResponse)(nil), "uvalidator.v1.QueryUniversalValidatorByCoreResponse")
	proto.RegisterType((*QueryCoreValidatorByUniversalRequest)(nil), "uvalidator.v1.QueryCoreValidatorByUniversalRequest")
	proto.RegisterType((*QueryCoreValidatorByUniversalResponse)(nil), "uvalidator.v1.QueryCoreValidatorByUniversalResponse")
	proto.RegisterType((*QueryUniversalValidatorsSetRequest)(nil), "uvalidator.v1.QueryUniversalValidatorsSetRequest")
	proto.RegisterType((*QueryUniversalValidatorsSetResponse)(nil), "uvalidator.v1.QueryUniversalValidatorsSetResponse")
}

func init() { proto.RegisterFile("uvalidator/v1/query.proto", fileDescriptor_f4cd4c651106fbb0) }

var fileDescriptor_f4cd4c651106fbb0 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0x2a, 0x0d, 0xe4, 0x89, 0x97, 0xe9, 0x1f, 0xd3, 0x6d, 0x5d, 0x74, 0xda, 0x42, 0x41,
	0xdc, 0x21, 0x69, 0xcf, 0x42, 0x13, 0x2f, 0x22, 0x42, 0x4d, 0x51, 0x8a, 0x28, 0x65, 0x9a, 0x8c,
	0xe9, 0xc2, 0x76, 0x67, 0x3b, 0xb3, 0x1b, 0x0c, 0xa5, 0x17, 0x3f, 0x81, 0xe0, 0xd7, 0xf0, 0x83,
	0x78, 0x2c, 0x78, 0x11, 0x2f, 0x4a, 0xa2, 0xdf, 0x43, 0x32, 0x3b, 0xdb, 0x64, 0x37, 0x93, 0x6c,
	0xdb, 0xd3, 0xc2, 0xbc, 0xf7, 0x7e, 0x7f, 0xe6, 0xfd, 0x76, 0x60, 0x35, 0xee, 0x51, 0xdf, 0xeb,
	0xd0, 0x88, 0x0b, 0xd2, 0xab, 0x91, 0xb3, 0x98, 0x89, 0xbe, 0x1b, 0x0a, 0x1e, 0x71, 0x74, 0x7f,
	0x5c, 0x72, 0x7b, 0x35, 0x7b, 0xbd, 0xcb, 0x79, 0xd7, 0x67, 0x84, 0x86, 0x1e, 0xa1, 0x41, 0xc0,
	0x23, 0x1a, 0x79, 0x3c, 0x90, 0x49, 0xb3, 0xbd, 0x96, 0xc5, 0xe9, 0xb2, 0x80, 0x49, 0x2f, 0x2d,
	0xe6, 0x48, 0xa2, 0x7e, 0xc8, 0x74, 0x09, 0x2f, 0x01, 0x7a, 0x3d, 0xe2, 0xdc, 0xa7, 0x82, 0x9e,
	0xca, 0x16, 0x3b, 0x8b, 0x99, 0x8c, 0xf0, 0x73, 0x58, 0xcc, 0x9c, 0xca, 0x90, 0x07, 0x92, 0xa1,
	0xa7, 0x50, 0x0e, 0xd5, 0x49, 0xd5, 0x7a, 0x64, 0x6d, 0xdf, 0xab, 0x2f, 0xbb, 0x19, 0x89, 0xae,
	0x6e, 0xd7, 0x4d, 0xf8, 0x3d, 0x6c, 0x2a, 0x94, 0x37, 0x81, 0xd7, 0x63, 0x42, 0x52, 0xff, 0x6d,
	0xda, 0xdc, 0xe8, 0x37, 0xb9, 0x60, 0x9a, 0x0d, 0xed, 0xc2, 0x4a, 0x9b, 0x0b, 0x76, 0x74, 0x85,
	0x75, 0x44, 0x3b, 0x1d, 0xc1, 0x64, 0x42, 0x53, 0x69, 0x2d, 0x8d, 0xaa, 0x57, 0xb3, 0x7b, 0x49,
	0x0d, 0x1f, 0xc2, 0x56, 0x01, 0xba, 0x56, 0x4d, 0x60, 0x31, 0x4e, 0x7b, 0xc6, 0x1c, 0x1a, 0x1b,
	0xc5, 0x53, 0xe3, 0xf8, 0xa3, 0xd6, 0xdd, 0x9c, 0xa4, 0x6d, 0x8c, 0x89, 0x52, 0xdd, 0xcf, 0x60,
	0xcd, 0x00, 0x9c, 0x13, 0xbf, 0x3a, 0x4d, 0x90, 0x3a, 0xf8, 0xa0, 0x1d, 0xcc, 0xe6, 0xd1, 0x0e,
	0x6e, 0x77, 0x41, 0x9b, 0x80, 0x67, 0x5c, 0x90, 0x3c, 0x60, 0x51, 0xba, 0xea, 0x26, 0x6c, 0xcc,
	0xed, 0xd2, 0x12, 0xd6, 0xa1, 0xa2, 0x39, 0xd9, 0x88, 0xf5, 0xee, 0x76, 0xa5, 0x35, 0x3e, 0xa8,
	0xff, 0x5b, 0x80, 0x05, 0x85, 0x82, 0x02, 0x28, 0x27, 0x29, 0x40, 0x8f, 0x73, 0xe1, 0x98, 0x8e,
	0x99, 0x8d, 0xe7, 0xb5, 0x24, 0xc4, 0xf8, 0xe1, 0xe7, 0x1f, 0x7f, 0xbf, 0xde, 0x79, 0x80, 0x96,
	0x49, 0x36, 0xc4, 0x49, 0xc6, 0xd0, 0x2f, 0x0b, 0xaa, 0xb3, 0x12, 0x80, 0x76, 0x4c, 0xf8, 0x05,
	0x69, 0xb4, 0x77, 0x6f, 0x36, 0xa4, 0x65, 0x1e, 0x28, 0x99, 0xaf, 0xd0, 0xcb, 0x9c, 0xcc, 0xec,
	0xde, 0x24, 0x39, 0x37, 0x2f, 0xf2, 0x82, 0x18, 0x92, 0x84, 0x7e, 0x5b, 0x50, 0x9d, 0x15, 0x0e,
	0xb3, 0xb9, 0x82, 0xc8, 0x9a, 0xcd, 0x15, 0xe5, 0x0f, 0x1f, 0x2a, 0x73, 0x2d, 0xb4, 0x9f, 0x33,
	0x67, 0xd0, 0x2c, 0xc9, 0xf9, 0x9c, 0x7f, 0xe2, 0x22, 0x77, 0x1f, 0xe8, 0x9b, 0x05, 0x2b, 0x7b,
	0xbe, 0x6f, 0x08, 0x1f, 0xaa, 0x5d, 0x6f, 0x0f, 0x13, 0x59, 0xb6, 0xeb, 0x37, 0x19, 0xd1, 0xde,
	0x9e, 0x28, 0x6f, 0x5b, 0x68, 0xe3, 0x1a, 0xde, 0x1a, 0x2f, 0xbe, 0x0f, 0x1c, 0xeb, 0x72, 0xe0,
	0x58, 0x7f, 0x06, 0x8e, 0xf5, 0x65, 0xe8, 0x94, 0x2e, 0x87, 0x4e, 0xe9, 0xe7, 0xd0, 0x29, 0xbd,
	0x23, 0x5d, 0x2f, 0x3a, 0x89, 0x8f, 0xdd, 0x36, 0x3f, 0x25, 0x82, 0xfb, 0x7e, 0xfb, 0x84, 0x7a,
	0x81, 0x24, 0xa1, 0xfa, 0x92, 0x4f, 0x93, 0xe0, 0xea, 0xf9, 0x3d, 0x2e, 0xab, 0xf7, 0x77, 0xe7,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0xd6, 0xa9, 0x0b, 0x01, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// UniversalValidatorByCore queries the universal validator associated with the given core validator address.
	UniversalValidatorByCore(ctx context.Context, in *QueryUniversalValidatorByCoreRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorByCoreResponse, error)
	// CoreValidatorByUniversal queries the core validator address associated with the given universal validator address.
	CoreValidatorByUniversal(ctx context.Context, in *QueryCoreValidatorByUniversalRequest, opts ...grpc.CallOption) (*QueryCoreValidatorByUniversalResponse, error)
	// AllUniversalValidators queries the details of a specific universal validator by its address.
	AllUniversalValidators(ctx context.Context, in *QueryUniversalValidatorsSetRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorsSetResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UniversalValidatorByCore(ctx context.Context, in *QueryUniversalValidatorByCoreRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorByCoreResponse, error) {
	out := new(QueryUniversalValidatorByCoreResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/UniversalValidatorByCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoreValidatorByUniversal(ctx context.Context, in *QueryCoreValidatorByUniversalRequest, opts ...grpc.CallOption) (*QueryCoreValidatorByUniversalResponse, error) {
	out := new(QueryCoreValidatorByUniversalResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/CoreValidatorByUniversal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllUniversalValidators(ctx context.Context, in *QueryUniversalValidatorsSetRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorsSetResponse, error) {
	out := new(QueryUniversalValidatorsSetResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllUniversalValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// UniversalValidatorByCore queries the universal validator associated with the given core validator address.
	UniversalValidatorByCore(context.Context, *QueryUniversalValidatorByCoreRequest) (*QueryUniversalValidatorByCoreResponse, error)
	// CoreValidatorByUniversal queries the core validator address associated with the given universal validator address.
	CoreValidatorByUniversal(context.Context, *QueryCoreValidatorByUniversalRequest) (*QueryCoreValidatorByUniversalResponse, error)
	// AllUniversalValidators queries the details of a specific universal validator by its address.
	AllUniversalValidators(context.Context, *QueryUniversalValidatorsSetRequest) (*QueryUniversalValidatorsSetResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UniversalValidatorByCore(ctx context.Context, req *QueryUniversalValidatorByCoreRequest) (*QueryUniversalValidatorByCoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniversalValidatorByCore not implemented")
}
func (*UnimplementedQueryServer) CoreValidatorByUniversal(ctx context.Context, req *QueryCoreValidatorByUniversalRequest) (*QueryCoreValidatorByUniversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoreValidatorByUniversal not implemented")
}
func (*UnimplementedQueryServer) AllUniversalValidators(ctx context.Context, req *QueryUniversalValidatorsSetRequest) (*QueryUniversalValidatorsSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUniversalValidators not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UniversalValidatorByCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUniversalValidatorByCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UniversalValidatorByCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/UniversalValidatorByCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UniversalValidatorByCore(ctx, req.(*QueryUniversalValidatorByCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoreValidatorByUniversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoreValidatorByUniversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoreValidatorByUniversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/CoreValidatorByUniversal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoreValidatorByUniversal(ctx, req.(*QueryCoreValidatorByUniversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllUniversalValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUniversalValidatorsSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllUniversalValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllUniversalValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllUniversalValidators(ctx, req.(*QueryUniversalValidatorsSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uvalidator.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UniversalValidatorByCore",
			Handler:    _Query_UniversalValidatorByCore_Handler,
		},
		{
			MethodName: "CoreValidatorByUniversal",
			Handler:    _Query_CoreValidatorByUniversal_Handler,
		},
		{
			MethodName: "AllUniversalValidators",
			Handler:    _Query_AllUniversalValidators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uvalidator/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorByCoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorByCoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorByCoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoreValidatorAddress) > 0 {
		i -= len(m.CoreValidatorAddress)
		copy(dAtA[i:], m.CoreValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CoreValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorByCoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorByCoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorByCoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniversalValidator) > 0 {
		i -= len(m.UniversalValidator)
		copy(dAtA[i:], m.UniversalValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniversalValidator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoreValidatorByUniversalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoreValidatorByUniversalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoreValidatorByUniversalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniversalValidatorAddress) > 0 {
		i -= len(m.UniversalValidatorAddress)
		copy(dAtA[i:], m.UniversalValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniversalValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoreValidatorByUniversalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoreValidatorByUniversalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoreValidatorByUniversalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoreValidatorAddress) > 0 {
		i -= len(m.CoreValidatorAddress)
		copy(dAtA[i:], m.CoreValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CoreValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorsSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorsSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorsSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorsSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorsSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorsSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUniversalValidatorByCoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoreValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUniversalValidatorByCoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniversalValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCoreValidatorByUniversalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniversalValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCoreValidatorByUniversalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoreValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUniversalValidatorsSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUniversalValidatorsSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorByCoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorByCoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversalValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoreValidatorByUniversalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversalValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoreValidatorByUniversalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorsSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorsSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
