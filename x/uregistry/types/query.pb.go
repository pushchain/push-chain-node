// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uregistry/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params
// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// SystemConfig
// QuerySystemConfigRequest is the request type for the Query/SystemConfig RPC method.
type QuerySystemConfigRequest struct {
}

func (m *QuerySystemConfigRequest) Reset()         { *m = QuerySystemConfigRequest{} }
func (m *QuerySystemConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySystemConfigRequest) ProtoMessage()    {}
func (*QuerySystemConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{2}
}
func (m *QuerySystemConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystemConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystemConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystemConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystemConfigRequest.Merge(m, src)
}
func (m *QuerySystemConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystemConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystemConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystemConfigRequest proto.InternalMessageInfo

// QuerySystemConfigResponse is the response type for the Query/SystemConfig RPC method.
type QuerySystemConfigResponse struct {
	SystemConfig *SystemConfig `protobuf:"bytes,1,opt,name=system_config,json=systemConfig,proto3" json:"system_config,omitempty"`
}

func (m *QuerySystemConfigResponse) Reset()         { *m = QuerySystemConfigResponse{} }
func (m *QuerySystemConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySystemConfigResponse) ProtoMessage()    {}
func (*QuerySystemConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{3}
}
func (m *QuerySystemConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySystemConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySystemConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySystemConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySystemConfigResponse.Merge(m, src)
}
func (m *QuerySystemConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySystemConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySystemConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySystemConfigResponse proto.InternalMessageInfo

func (m *QuerySystemConfigResponse) GetSystemConfig() *SystemConfig {
	if m != nil {
		return m.SystemConfig
	}
	return nil
}

// ChainConfig
// QueryChainConfigRequest is the request type for the Query/ChainConfig RPC method.
type QueryChainConfigRequest struct {
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryChainConfigRequest) Reset()         { *m = QueryChainConfigRequest{} }
func (m *QueryChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainConfigRequest) ProtoMessage()    {}
func (*QueryChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{4}
}
func (m *QueryChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainConfigRequest.Merge(m, src)
}
func (m *QueryChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainConfigRequest proto.InternalMessageInfo

func (m *QueryChainConfigRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryChainConfigResponse is the response type for the Query/ChainConfig RPC method.
type QueryChainConfigResponse struct {
	Config *ChainConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *QueryChainConfigResponse) Reset()         { *m = QueryChainConfigResponse{} }
func (m *QueryChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainConfigResponse) ProtoMessage()    {}
func (*QueryChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{5}
}
func (m *QueryChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainConfigResponse.Merge(m, src)
}
func (m *QueryChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainConfigResponse proto.InternalMessageInfo

func (m *QueryChainConfigResponse) GetConfig() *ChainConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// QueryAllChainConfigsRequest is the request type for the Query/AllChainConfigs RPC method.
type QueryAllChainConfigsRequest struct {
}

func (m *QueryAllChainConfigsRequest) Reset()         { *m = QueryAllChainConfigsRequest{} }
func (m *QueryAllChainConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainConfigsRequest) ProtoMessage()    {}
func (*QueryAllChainConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{6}
}
func (m *QueryAllChainConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainConfigsRequest.Merge(m, src)
}
func (m *QueryAllChainConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainConfigsRequest proto.InternalMessageInfo

// QueryAllChainConfigsResponse is the response type for the Query/AllChainConfigs RPC method.
type QueryAllChainConfigsResponse struct {
	Configs []*ChainConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *QueryAllChainConfigsResponse) Reset()         { *m = QueryAllChainConfigsResponse{} }
func (m *QueryAllChainConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainConfigsResponse) ProtoMessage()    {}
func (*QueryAllChainConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{7}
}
func (m *QueryAllChainConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainConfigsResponse.Merge(m, src)
}
func (m *QueryAllChainConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainConfigsResponse proto.InternalMessageInfo

func (m *QueryAllChainConfigsResponse) GetConfigs() []*ChainConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

// TokenConfig
// QueryTokenConfigRequest is the request type for the Query/TokenConfig RPC method.
type QueryTokenConfigRequest struct {
	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryTokenConfigRequest) Reset()         { *m = QueryTokenConfigRequest{} }
func (m *QueryTokenConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenConfigRequest) ProtoMessage()    {}
func (*QueryTokenConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{8}
}
func (m *QueryTokenConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenConfigRequest.Merge(m, src)
}
func (m *QueryTokenConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenConfigRequest proto.InternalMessageInfo

func (m *QueryTokenConfigRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryTokenConfigRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryTokenConfigResponse is the response type for the Query/TokenConfig RPC method.
type QueryTokenConfigResponse struct {
	Config *TokenConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *QueryTokenConfigResponse) Reset()         { *m = QueryTokenConfigResponse{} }
func (m *QueryTokenConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenConfigResponse) ProtoMessage()    {}
func (*QueryTokenConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{9}
}
func (m *QueryTokenConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenConfigResponse.Merge(m, src)
}
func (m *QueryTokenConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenConfigResponse proto.InternalMessageInfo

func (m *QueryTokenConfigResponse) GetConfig() *TokenConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// QueryAllTokenConfigsRequest is the request type for the Query/AllTokenConfigs RPC method.
type QueryAllTokenConfigsRequest struct {
}

func (m *QueryAllTokenConfigsRequest) Reset()         { *m = QueryAllTokenConfigsRequest{} }
func (m *QueryAllTokenConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenConfigsRequest) ProtoMessage()    {}
func (*QueryAllTokenConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{10}
}
func (m *QueryAllTokenConfigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenConfigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenConfigsRequest.Merge(m, src)
}
func (m *QueryAllTokenConfigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenConfigsRequest proto.InternalMessageInfo

// QueryAllTokenConfigsResponse is the response type for the Query/AllTokenConfigs RPC method.
type QueryAllTokenConfigsResponse struct {
	Configs []*TokenConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *QueryAllTokenConfigsResponse) Reset()         { *m = QueryAllTokenConfigsResponse{} }
func (m *QueryAllTokenConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenConfigsResponse) ProtoMessage()    {}
func (*QueryAllTokenConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{11}
}
func (m *QueryAllTokenConfigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenConfigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenConfigsResponse.Merge(m, src)
}
func (m *QueryAllTokenConfigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenConfigsResponse proto.InternalMessageInfo

func (m *QueryAllTokenConfigsResponse) GetConfigs() []*TokenConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

// QueryTokenConfigsByChainRequest is the request type for the Query/TokenConfigsByChain RPC method.
type QueryTokenConfigsByChainRequest struct {
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryTokenConfigsByChainRequest) Reset()         { *m = QueryTokenConfigsByChainRequest{} }
func (m *QueryTokenConfigsByChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenConfigsByChainRequest) ProtoMessage()    {}
func (*QueryTokenConfigsByChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{12}
}
func (m *QueryTokenConfigsByChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenConfigsByChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenConfigsByChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenConfigsByChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenConfigsByChainRequest.Merge(m, src)
}
func (m *QueryTokenConfigsByChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenConfigsByChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenConfigsByChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenConfigsByChainRequest proto.InternalMessageInfo

func (m *QueryTokenConfigsByChainRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryTokenConfigsByChainResponse is the response type for the Query/TokenConfigsByChain RPC method.
type QueryTokenConfigsByChainResponse struct {
	Configs []*TokenConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (m *QueryTokenConfigsByChainResponse) Reset()         { *m = QueryTokenConfigsByChainResponse{} }
func (m *QueryTokenConfigsByChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenConfigsByChainResponse) ProtoMessage()    {}
func (*QueryTokenConfigsByChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_18d604066d6ee842, []int{13}
}
func (m *QueryTokenConfigsByChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenConfigsByChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenConfigsByChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenConfigsByChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenConfigsByChainResponse.Merge(m, src)
}
func (m *QueryTokenConfigsByChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenConfigsByChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenConfigsByChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenConfigsByChainResponse proto.InternalMessageInfo

func (m *QueryTokenConfigsByChainResponse) GetConfigs() []*TokenConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "uregistry.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "uregistry.v1.QueryParamsResponse")
	proto.RegisterType((*QuerySystemConfigRequest)(nil), "uregistry.v1.QuerySystemConfigRequest")
	proto.RegisterType((*QuerySystemConfigResponse)(nil), "uregistry.v1.QuerySystemConfigResponse")
	proto.RegisterType((*QueryChainConfigRequest)(nil), "uregistry.v1.QueryChainConfigRequest")
	proto.RegisterType((*QueryChainConfigResponse)(nil), "uregistry.v1.QueryChainConfigResponse")
	proto.RegisterType((*QueryAllChainConfigsRequest)(nil), "uregistry.v1.QueryAllChainConfigsRequest")
	proto.RegisterType((*QueryAllChainConfigsResponse)(nil), "uregistry.v1.QueryAllChainConfigsResponse")
	proto.RegisterType((*QueryTokenConfigRequest)(nil), "uregistry.v1.QueryTokenConfigRequest")
	proto.RegisterType((*QueryTokenConfigResponse)(nil), "uregistry.v1.QueryTokenConfigResponse")
	proto.RegisterType((*QueryAllTokenConfigsRequest)(nil), "uregistry.v1.QueryAllTokenConfigsRequest")
	proto.RegisterType((*QueryAllTokenConfigsResponse)(nil), "uregistry.v1.QueryAllTokenConfigsResponse")
	proto.RegisterType((*QueryTokenConfigsByChainRequest)(nil), "uregistry.v1.QueryTokenConfigsByChainRequest")
	proto.RegisterType((*QueryTokenConfigsByChainResponse)(nil), "uregistry.v1.QueryTokenConfigsByChainResponse")
}

func init() { proto.RegisterFile("uregistry/v1/query.proto", fileDescriptor_18d604066d6ee842) }

var fileDescriptor_18d604066d6ee842 = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xee, 0xf6, 0x47, 0x53, 0x7e, 0x2f, 0x11, 0xe1, 0x35, 0x68, 0xba, 0x4d, 0xd7, 0xb8, 0xb5,
	0x55, 0x6b, 0xb3, 0x4b, 0x5a, 0xd1, 0xa3, 0xd8, 0x9c, 0x3c, 0x08, 0xb5, 0x15, 0x04, 0x11, 0x64,
	0x9b, 0x8c, 0x9b, 0xa5, 0xc9, 0xce, 0x76, 0x67, 0x53, 0x0c, 0xc5, 0x8b, 0x78, 0xf0, 0x22, 0x88,
	0xfe, 0x05, 0xfe, 0x37, 0x1e, 0x0b, 0x5e, 0xbc, 0x29, 0x89, 0x7f, 0x88, 0x64, 0x76, 0x12, 0x66,
	0x92, 0xc9, 0x36, 0xe0, 0x6d, 0x67, 0xde, 0xf7, 0xde, 0xf7, 0xcd, 0xb7, 0xf3, 0xed, 0x42, 0xa9,
	0x1b, 0x13, 0x3f, 0x60, 0x49, 0xdc, 0x73, 0xcf, 0x6a, 0xee, 0x69, 0x97, 0xc4, 0x3d, 0x27, 0x8a,
	0x69, 0x42, 0xb1, 0x30, 0xae, 0x38, 0x67, 0x35, 0xb3, 0xec, 0x53, 0xea, 0xb7, 0x89, 0xeb, 0x45,
	0x81, 0xeb, 0x85, 0x21, 0x4d, 0xbc, 0x24, 0xa0, 0x21, 0x4b, 0xb1, 0xa6, 0xa9, 0x4c, 0xf1, 0x49,
	0x48, 0x58, 0x30, 0xaa, 0xa9, 0x0c, 0x49, 0x2f, 0x22, 0xa2, 0x62, 0x17, 0x01, 0x9f, 0x0d, 0x09,
	0x0f, 0xbc, 0xd8, 0xeb, 0xb0, 0x43, 0x72, 0xda, 0x25, 0x2c, 0xb1, 0xeb, 0xb0, 0xa2, 0xec, 0xb2,
	0x88, 0x86, 0x8c, 0xe0, 0x0e, 0xe4, 0x22, 0xbe, 0x53, 0x32, 0x2a, 0xc6, 0x9d, 0xfc, 0x6e, 0xd1,
	0x91, 0xf5, 0x39, 0x02, 0x2d, 0x30, 0xb6, 0x09, 0x25, 0x3e, 0xe4, 0xa8, 0xc7, 0x12, 0xd2, 0xa9,
	0xd3, 0xf0, 0x4d, 0xe0, 0x8f, 0x08, 0x5e, 0xc1, 0xaa, 0xa6, 0x26, 0x68, 0x1e, 0xc1, 0x15, 0xc6,
	0xf7, 0x5f, 0x37, 0x78, 0x41, 0xb0, 0x99, 0x2a, 0x9b, 0xd2, 0x5a, 0x60, 0xd2, 0xca, 0x76, 0xe1,
	0x3a, 0x9f, 0x5e, 0x6f, 0x79, 0x41, 0xa8, 0x10, 0x63, 0x11, 0x96, 0x1a, 0xc3, 0x5d, 0x3e, 0xf3,
	0xff, 0xc3, 0x74, 0x61, 0x3f, 0x15, 0x52, 0x95, 0x06, 0xa1, 0xa6, 0x06, 0x39, 0x45, 0xc6, 0xaa,
	0x2a, 0x43, 0x6e, 0x11, 0x40, 0x7b, 0x1d, 0xd6, 0xf8, 0xb8, 0xc7, 0xed, 0xb6, 0x54, 0x1e, 0xbb,
	0x7b, 0x04, 0x65, 0x7d, 0x59, 0x30, 0xee, 0xc1, 0x72, 0x3a, 0x68, 0xe8, 0xf3, 0x7f, 0xd9, 0x94,
	0x23, 0xa4, 0xfd, 0x44, 0x9c, 0xf9, 0x39, 0x3d, 0x21, 0xf3, 0x9c, 0x19, 0x4b, 0xb0, 0xec, 0x35,
	0x9b, 0x31, 0x61, 0xac, 0xb4, 0xc8, 0xf7, 0x47, 0xcb, 0xb1, 0x1b, 0xca, 0xa8, 0xf9, 0xdc, 0x90,
	0x5b, 0x34, 0x6e, 0x48, 0x65, 0x9d, 0x1b, 0x6a, 0x79, 0x4e, 0x37, 0x64, 0xca, 0xb1, 0x1b, 0x0f,
	0xe1, 0xc6, 0xe4, 0x11, 0xd8, 0x7e, 0xfa, 0x7a, 0xb3, 0x6f, 0xc2, 0x0b, 0xa8, 0xcc, 0x6e, 0xfc,
	0x07, 0x45, 0xbb, 0xbf, 0x96, 0x61, 0x89, 0x4f, 0xc6, 0x13, 0xc8, 0xa5, 0x49, 0xc1, 0x8a, 0xda,
	0x37, 0x1d, 0x44, 0xf3, 0x66, 0x06, 0x22, 0x55, 0x63, 0x97, 0xdf, 0xff, 0xf8, 0xf3, 0x75, 0xf1,
	0x1a, 0x16, 0x5d, 0x25, 0xe4, 0x69, 0x08, 0xf1, 0x83, 0x01, 0x05, 0x39, 0x29, 0xb8, 0xa5, 0x99,
	0xa8, 0x49, 0xa8, 0x79, 0xfb, 0x52, 0x9c, 0xe0, 0xdf, 0xe0, 0xfc, 0xeb, 0xb8, 0xa6, 0xf2, 0x2b,
	0x09, 0xc6, 0x8f, 0x06, 0xe4, 0xa5, 0x6b, 0x8b, 0x9b, 0x9a, 0xe9, 0xd3, 0x69, 0x35, 0xb7, 0x2e,
	0x83, 0x09, 0x0d, 0xdb, 0x5c, 0xc3, 0x2d, 0xb4, 0x55, 0x0d, 0xfc, 0x95, 0x0a, 0x09, 0xee, 0x39,
	0x5f, 0xbd, 0xc3, 0x4f, 0x06, 0x5c, 0x9d, 0x48, 0x1e, 0xde, 0xd5, 0xf0, 0xe8, 0xc3, 0x6b, 0x6e,
	0xcf, 0x03, 0xcd, 0xb6, 0x46, 0x96, 0xc5, 0xf0, 0x8b, 0x01, 0x79, 0xe9, 0xc6, 0x68, 0xad, 0x99,
	0x0e, 0xb5, 0xd6, 0x1a, 0x4d, 0x60, 0xed, 0xfb, 0x5c, 0x83, 0x83, 0x3b, 0xaa, 0x86, 0x64, 0x08,
	0x9d, 0xb0, 0xc6, 0x3d, 0x17, 0x5f, 0x80, 0xb1, 0x49, 0x72, 0x0a, 0x66, 0x99, 0xa4, 0xc9, 0xf4,
	0x2c, 0x93, 0x74, 0xf9, 0x9e, 0x65, 0x92, 0x2c, 0x90, 0xe1, 0x37, 0x03, 0x56, 0x34, 0x91, 0xc4,
	0x6a, 0xb6, 0x0b, 0x13, 0x99, 0x37, 0x9d, 0x79, 0xe1, 0x42, 0xdb, 0x3d, 0xae, 0x6d, 0x13, 0x37,
	0x32, 0xb4, 0x8d, 0xdc, 0xdb, 0x3f, 0xf8, 0xde, 0xb7, 0x8c, 0x8b, 0xbe, 0x65, 0xfc, 0xee, 0x5b,
	0xc6, 0xe7, 0x81, 0xb5, 0x70, 0x31, 0xb0, 0x16, 0x7e, 0x0e, 0xac, 0x85, 0x97, 0x0f, 0xfc, 0x20,
	0x69, 0x75, 0x8f, 0x9d, 0x06, 0xed, 0xb8, 0x51, 0x97, 0xb5, 0x78, 0x03, 0x7f, 0xaa, 0xf2, 0xc7,
	0x6a, 0x48, 0x9b, 0xc4, 0x7d, 0x2b, 0x91, 0xf0, 0x5f, 0xf4, 0x71, 0x8e, 0xff, 0xa3, 0xf7, 0xfe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xfc, 0x0d, 0x35, 0x21, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// SystemConfig queries SystemConfig of the module.
	SystemConfig(ctx context.Context, in *QuerySystemConfigRequest, opts ...grpc.CallOption) (*QuerySystemConfigResponse, error)
	// ChainConfig queries a ChainConfig by chain.
	ChainConfig(ctx context.Context, in *QueryChainConfigRequest, opts ...grpc.CallOption) (*QueryChainConfigResponse, error)
	// AllChainConfigs returns all registered chain configs.
	AllChainConfigs(ctx context.Context, in *QueryAllChainConfigsRequest, opts ...grpc.CallOption) (*QueryAllChainConfigsResponse, error)
	// TokenConfig queries a token config by chain and address.
	TokenConfig(ctx context.Context, in *QueryTokenConfigRequest, opts ...grpc.CallOption) (*QueryTokenConfigResponse, error)
	// AllTokenConfigs queries all token configs across all chains.
	AllTokenConfigs(ctx context.Context, in *QueryAllTokenConfigsRequest, opts ...grpc.CallOption) (*QueryAllTokenConfigsResponse, error)
	// TokenConfigsByChain queries all token configs for a given chain.
	TokenConfigsByChain(ctx context.Context, in *QueryTokenConfigsByChainRequest, opts ...grpc.CallOption) (*QueryTokenConfigsByChainResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemConfig(ctx context.Context, in *QuerySystemConfigRequest, opts ...grpc.CallOption) (*QuerySystemConfigResponse, error) {
	out := new(QuerySystemConfigResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/SystemConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainConfig(ctx context.Context, in *QueryChainConfigRequest, opts ...grpc.CallOption) (*QueryChainConfigResponse, error) {
	out := new(QueryChainConfigResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/ChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllChainConfigs(ctx context.Context, in *QueryAllChainConfigsRequest, opts ...grpc.CallOption) (*QueryAllChainConfigsResponse, error) {
	out := new(QueryAllChainConfigsResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/AllChainConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenConfig(ctx context.Context, in *QueryTokenConfigRequest, opts ...grpc.CallOption) (*QueryTokenConfigResponse, error) {
	out := new(QueryTokenConfigResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/TokenConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllTokenConfigs(ctx context.Context, in *QueryAllTokenConfigsRequest, opts ...grpc.CallOption) (*QueryAllTokenConfigsResponse, error) {
	out := new(QueryAllTokenConfigsResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/AllTokenConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenConfigsByChain(ctx context.Context, in *QueryTokenConfigsByChainRequest, opts ...grpc.CallOption) (*QueryTokenConfigsByChainResponse, error) {
	out := new(QueryTokenConfigsByChainResponse)
	err := c.cc.Invoke(ctx, "/uregistry.v1.Query/TokenConfigsByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// SystemConfig queries SystemConfig of the module.
	SystemConfig(context.Context, *QuerySystemConfigRequest) (*QuerySystemConfigResponse, error)
	// ChainConfig queries a ChainConfig by chain.
	ChainConfig(context.Context, *QueryChainConfigRequest) (*QueryChainConfigResponse, error)
	// AllChainConfigs returns all registered chain configs.
	AllChainConfigs(context.Context, *QueryAllChainConfigsRequest) (*QueryAllChainConfigsResponse, error)
	// TokenConfig queries a token config by chain and address.
	TokenConfig(context.Context, *QueryTokenConfigRequest) (*QueryTokenConfigResponse, error)
	// AllTokenConfigs queries all token configs across all chains.
	AllTokenConfigs(context.Context, *QueryAllTokenConfigsRequest) (*QueryAllTokenConfigsResponse, error)
	// TokenConfigsByChain queries all token configs for a given chain.
	TokenConfigsByChain(context.Context, *QueryTokenConfigsByChainRequest) (*QueryTokenConfigsByChainResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SystemConfig(ctx context.Context, req *QuerySystemConfigRequest) (*QuerySystemConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemConfig not implemented")
}
func (*UnimplementedQueryServer) ChainConfig(ctx context.Context, req *QueryChainConfigRequest) (*QueryChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainConfig not implemented")
}
func (*UnimplementedQueryServer) AllChainConfigs(ctx context.Context, req *QueryAllChainConfigsRequest) (*QueryAllChainConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllChainConfigs not implemented")
}
func (*UnimplementedQueryServer) TokenConfig(ctx context.Context, req *QueryTokenConfigRequest) (*QueryTokenConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenConfig not implemented")
}
func (*UnimplementedQueryServer) AllTokenConfigs(ctx context.Context, req *QueryAllTokenConfigsRequest) (*QueryAllTokenConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTokenConfigs not implemented")
}
func (*UnimplementedQueryServer) TokenConfigsByChain(ctx context.Context, req *QueryTokenConfigsByChainRequest) (*QueryTokenConfigsByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenConfigsByChain not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/SystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemConfig(ctx, req.(*QuerySystemConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/ChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainConfig(ctx, req.(*QueryChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllChainConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllChainConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/AllChainConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllChainConfigs(ctx, req.(*QueryAllChainConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/TokenConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenConfig(ctx, req.(*QueryTokenConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllTokenConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllTokenConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/AllTokenConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllTokenConfigs(ctx, req.(*QueryAllTokenConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenConfigsByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenConfigsByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenConfigsByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uregistry.v1.Query/TokenConfigsByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenConfigsByChain(ctx, req.(*QueryTokenConfigsByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uregistry.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SystemConfig",
			Handler:    _Query_SystemConfig_Handler,
		},
		{
			MethodName: "ChainConfig",
			Handler:    _Query_ChainConfig_Handler,
		},
		{
			MethodName: "AllChainConfigs",
			Handler:    _Query_AllChainConfigs_Handler,
		},
		{
			MethodName: "TokenConfig",
			Handler:    _Query_TokenConfig_Handler,
		},
		{
			MethodName: "AllTokenConfigs",
			Handler:    _Query_AllTokenConfigs_Handler,
		},
		{
			MethodName: "TokenConfigsByChain",
			Handler:    _Query_TokenConfigsByChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uregistry/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySystemConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystemConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystemConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySystemConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySystemConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySystemConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemConfig != nil {
		{
			size, err := m.SystemConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllChainConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenConfigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenConfigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenConfigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenConfigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenConfigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenConfigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenConfigsByChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenConfigsByChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenConfigsByChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenConfigsByChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenConfigsByChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenConfigsByChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySystemConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySystemConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemConfig != nil {
		l = m.SystemConfig.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllChainConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenConfigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllTokenConfigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenConfigsByChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenConfigsByChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystemConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystemConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystemConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySystemConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySystemConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySystemConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemConfig == nil {
				m.SystemConfig = &SystemConfig{}
			}
			if err := m.SystemConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ChainConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &ChainConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &TokenConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenConfigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenConfigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &TokenConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenConfigsByChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenConfigsByChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenConfigsByChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenConfigsByChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenConfigsByChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenConfigsByChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &TokenConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
