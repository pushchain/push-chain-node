#!/usr/bin/env bash
# Local Validator Manager - Multi-validator Docker setup management
# Manages 3 core validators + 3 universal validators

set -euo pipefail
IFS=$'\n\t'

# Resolve script directory
SCRIPT_DIR="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m' 
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BLUE='\033[1;94m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m'
BOLD='\033[1m'

# Print functions
print_status() { echo -e "${CYAN}$1${NC}"; }
print_header() { echo -e "${BLUE}$1${NC}"; }
print_success() { echo -e "${GREEN}$1${NC}"; }
print_error() { echo -e "${RED}$1${NC}"; }
print_warning() { echo -e "${YELLOW}$1${NC}"; }

# Calculate human-readable uptime from container StartedAt timestamp
calculate_uptime() {
    local started_at="$1"
    
    # Handle case where timestamp is unknown or empty
    if [ "$started_at" = "unknown" ] || [ -z "$started_at" ]; then
        echo "unknown"
        return
    fi
    
    # Convert ISO timestamp to Unix timestamp (handle both Linux and macOS)
    local start_unix
    
    if date --version >/dev/null 2>&1; then
        # GNU date (Linux) - handles UTC automatically
        start_unix=$(date -d "$started_at" +%s 2>/dev/null || echo "0")
    else
        # BSD date (macOS) - handle UTC timezone properly
        start_unix=$(date -j -u -f "%Y-%m-%dT%H:%M:%S" "${started_at%.*}" +%s 2>/dev/null || echo "0")
    fi
    
    # Get current Unix timestamp
    local current_unix=$(date +%s)
    
    # Calculate difference in seconds
    local diff=$((current_unix - start_unix))
    
    # Handle negative or zero differences
    if [ "$diff" -le 0 ]; then
        echo "just now"
        return
    fi
    
    # Format based on time magnitude
    if [ "$diff" -lt 60 ]; then
        echo "${diff} sec ago"
    elif [ "$diff" -lt 3600 ]; then
        local minutes=$((diff / 60))
        echo "${minutes} min ago"
    elif [ "$diff" -lt 86400 ]; then
        local hours=$((diff / 3600))
        echo "${hours} hr ago"
    else
        local days=$((diff / 86400))
        echo "${days} day ago"
    fi
}

# ASCII Art Banner
show_banner() {
    echo -e "${BOLD}${GREEN}"
    echo "    ____             __       ________          _      "
    echo "   / __ \\__  _______/ /_     / ____/ /_  ____ _(_)___  "
    echo "  / /_/ / / / / ___/ __ \\   / /   / __ \\/ __ \`/ / __ \\ "
    echo " / ____/ /_/ (__  ) / / /  / /___/ / / / /_/ / / / / / "
    echo "/_/    \\__,_/____/_/ /_/   \\____/_/ /_/\\__,_/_/_/ /_/  "
    echo -e "${NC}"
    echo -e "${BOLD}${YELLOW}        Local Multi-Validator Manager${NC}"
    echo -e "${GREEN}        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
}

# Check docker-compose availability
require_docker_compose() {
    if ! command -v docker-compose >/dev/null 2>&1; then
        print_error "‚ùå docker-compose not found"
        echo "Install docker-compose to manage the local validator setup"
        exit 1
    fi
}

# Start all validators
start_all() {
    show_banner
    print_status "üöÄ Starting local multi-validator setup..."
    require_docker_compose
    
    # Check if images exist, build if needed
    if ! docker images | grep -q "push-core.*latest" || ! docker images | grep -q "push-universal.*latest"; then
        print_status "üîß Building Docker images..."
        ./build.sh
    else
        print_status "‚úÖ Docker images already exist, skipping build..."
    fi
    
    docker-compose up -d
    print_success "‚úÖ All validators starting up..."
    echo
    print_status "üí° Use './local-validator-manager status' to check progress"
}

# Stop all validators
stop_all() {
    print_status "üõë Stopping all validators..."
    require_docker_compose
    
    docker-compose down
    print_success "‚úÖ All validators stopped"
}

# Restart all validators
restart_all() {
    print_status "üîÑ Restarting all validators..."
    require_docker_compose
    
    docker-compose restart
    print_success "‚úÖ All validators restarted"
}

# Show overall status
show_status() {
    echo
    print_header "üìä Local Multi-Validator Status"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    require_docker_compose
    
    echo
    print_header "Container Status:"
    
    # Custom formatted status display
    printf "${BOLD}${YELLOW}%-25s %-12s %-12s %-12s %-10s %-25s${NC}\n" "SERVICE" "STATUS" "HEALTH" "CONTAINER ID" "UPTIME" "KEY PORTS"
    echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    
    docker-compose ps --format json | jq -r '
        .Name + "|" + 
        .State + "|" + 
        (.Health // "none") + "|" + 
        .Service + "|" +
        (.Publishers // [] | map((.PublishedPort | tostring) + ":" + (.TargetPort | tostring)) | join(","))
    ' | while IFS='|' read -r name state health service ports; do
        
        local status_color="${RED}"
        if [ "$state" = "running" ]; then
            status_color="${GREEN}"
        fi
        
        # Check health for universal validators via port accessibility
        local health_display="$health"
        if [[ "$service" == universal-validator-* ]] && [ "$state" = "running" ]; then
            # For universal validators, if they're running, consider them healthy
            # (they don't have health checks but port accessibility indicates health)
            health_display="healthy"
            health="healthy"
        fi
        
        local health_color="${YELLOW}"
        if [ "$health" = "healthy" ]; then
            health_color="${GREEN}"
        elif [ "$health" = "none" ]; then
            health_color="${CYAN}"
            health_display="n/a"
        elif [ "$health" = "unhealthy" ]; then
            health_color="${RED}"
        fi
        
        # Get container ID and uptime
        local container_info=$(docker inspect "$name" 2>/dev/null | jq -r '.[0].Id[0:12] + "|" + .[0].State.StartedAt' || echo "unknown|unknown")
        local container_id=$(echo "$container_info" | cut -d'|' -f1)
        local started_at=$(echo "$container_info" | cut -d'|' -f2)
        local uptime=$(calculate_uptime "$started_at")
        
        # Extract key ports for different service types
        local key_ports=""
        if [[ "$service" == core-validator-* ]]; then
            # Show RPC, REST, and WebSocket ports for core validators
            local rpc_port=$(echo "$ports" | grep -o '[0-9]*:26657' | cut -d: -f1 | head -1)
            local rest_port=$(echo "$ports" | grep -o '[0-9]*:1317' | cut -d: -f1 | head -1)
            local ws_port=$(echo "$ports" | grep -o '[0-9]*:8546' | cut -d: -f1 | head -1)
            key_ports="RPC:$rpc_port REST:$rest_port WS:$ws_port"
        elif [[ "$service" == universal-validator-* ]]; then
            # Show query API port for universal validators
            local api_port=$(echo "$ports" | grep -o '[0-9]*:8080' | cut -d: -f1 | head -1)
            key_ports="API:$api_port"
        fi
        
        printf "%-25s ${status_color}%-12s${NC} ${health_color}%-12s${NC} ${CYAN}%-12s${NC} %-10s ${MAGENTA}%-25s${NC}\n" \
            "$service" "$state" "$health_display" "$container_id" "$uptime" "$key_ports"
    done
    
    echo
    print_header "Core Validators Block Heights:"
    echo -e "${GREEN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    
    # Check each core validator
    for i in 1 2 3; do
        local port=26657
        if [ "$i" -eq 2 ]; then port=26658; fi
        if [ "$i" -eq 3 ]; then port=26659; fi
        
        local height=$(curl -s "http://localhost:$port/status" 2>/dev/null | jq -r '.result.sync_info.latest_block_height // "offline"' 2>/dev/null || echo "offline")
        local status_color="${RED}"
        if [ "$height" != "offline" ] && [ "$height" != "null" ]; then
            status_color="${GREEN}"
        fi
        printf "  ${BOLD}Validator $i:${NC} ${status_color}$height${NC}\n"
    done
    
    echo
    print_header "Universal Validators:"
    echo -e "${GREEN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    
    # Check each universal validator
    for i in 1 2 3; do
        local port=$((8079 + i))
        local status=$(curl -s "http://localhost:$port/health" 2>/dev/null || echo "offline")
        local status_color="${RED}"
        if [ "$status" = "OK" ]; then
            status_color="${GREEN}"
        fi
        printf "  ${BOLD}Universal Validator $i:${NC} ${status_color}$status${NC} (port $port)\n"
    done
}

# Show logs for specific validator
show_logs() {
    local validator_name="${2:-}"
    
    if [ -z "$validator_name" ]; then
        print_error "‚ùå Validator name required"
        echo "Usage: ./local-validator-manager logs <validator-name>"
        echo "Available validators: core-validator-1, core-validator-2, core-validator-3,"
        echo "                     universal-validator-1, universal-validator-2, universal-validator-3"
        exit 1
    fi
    
    require_docker_compose
    print_status "üìú Showing logs for $validator_name..."
    
    docker-compose logs -f "$validator_name"
}

# Show status for specific validator
show_validator_status() {
    local validator_id="${2:-}"
    
    if [ -z "$validator_id" ] || ! [[ "$validator_id" =~ ^[1-3]$ ]]; then
        print_error "‚ùå Valid validator ID required (1, 2, or 3)"
        echo "Usage: ./local-validator-manager validator-status <1|2|3>"
        exit 1
    fi
    
    require_docker_compose
    print_header "üìä Validator $validator_id Status"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # Core validator status
    local core_port=26657
    local rest_port=1317
    if [ "$validator_id" -eq 2 ]; then core_port=26658; rest_port=1318; fi
    if [ "$validator_id" -eq 3 ]; then core_port=26659; rest_port=1319; fi
    
    echo
    print_header "Core Validator $validator_id:"
    local core_status=$(curl -s "http://localhost:$core_port/status" 2>/dev/null)
    
    if [ -n "$core_status" ]; then
        local height=$(echo "$core_status" | jq -r '.result.sync_info.latest_block_height // "0"')
        local catching_up=$(echo "$core_status" | jq -r '.result.sync_info.catching_up // "true"')
        local moniker=$(echo "$core_status" | jq -r '.result.node_info.moniker // "unknown"')
        local node_id=$(echo "$core_status" | jq -r '.result.node_info.id // "unknown"')
        
        echo -e "  ${BOLD}Status:${NC} ${GREEN}‚úÖ Running${NC}"
        echo -e "  ${BOLD}Moniker:${NC} ${WHITE}$moniker${NC}"
        echo -e "  ${BOLD}Node ID:${NC} ${MAGENTA}$node_id${NC}"
        echo -e "  ${BOLD}Block Height:${NC} ${MAGENTA}$height${NC}"
        
        if [ "$catching_up" = "false" ]; then
            echo -e "  ${BOLD}Sync Status:${NC} ${GREEN}‚úÖ Synced${NC}"
        else
            echo -e "  ${BOLD}Sync Status:${NC} ${YELLOW}‚è≥ Syncing${NC}"
        fi
        
        echo -e "  ${BOLD}RPC:${NC} ${YELLOW}http://localhost:$core_port${NC}"
        echo -e "  ${BOLD}REST:${NC} ${YELLOW}http://localhost:$rest_port${NC}"
    else
        echo -e "  ${BOLD}Status:${NC} ${RED}‚ùå Offline${NC}"
    fi
    
    # Universal validator status
    local universal_port=$((8079 + validator_id))
    
    echo
    print_header "Universal Validator $validator_id:"
    local universal_status=$(curl -s "http://localhost:$universal_port/health" 2>/dev/null || echo "offline")
    
    if [ "$universal_status" = "OK" ]; then
        echo -e "  ${BOLD}Status:${NC} ${GREEN}‚úÖ Running${NC}"
        echo -e "  ${BOLD}Connected to:${NC} ${CYAN}core-validator-$validator_id${NC}"
        echo -e "  ${BOLD}Query API:${NC} ${YELLOW}http://localhost:$universal_port${NC}"
    else
        echo -e "  ${BOLD}Status:${NC} ${RED}‚ùå Offline${NC}"
    fi
}

# List all validators in the network
list_validators() {
    print_header "üë• Local Network Validators"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # Query from core-validator-1
    local validators=$(curl -s "http://localhost:26657/validators" 2>/dev/null | jq -r '.result.validators[]' 2>/dev/null || echo "")
    
    if [ -n "$validators" ]; then
        echo
        printf "${BOLD}${YELLOW}%-15s %-20s %-12s${NC}\n" "VALIDATOR" "VOTING POWER" "STATUS"
        echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
        
        echo "$validators" | jq -r '
            .address[0:15] + "|" + 
            .voting_power + "|" + 
            (if .proposer_priority then "ACTIVE" else "INACTIVE" end)
        ' | while IFS='|' read -r address power status; do
            local status_color="${GREEN}"
            if [ "$status" = "INACTIVE" ]; then
                status_color="${YELLOW}"
            fi
            printf "${BOLD}%-15s${NC} ${MAGENTA}%-20s${NC} ${status_color}%-12s${NC}\n" "$address" "$power" "$status"
        done
        
        local count=$(echo "$validators" | jq -s length)
        echo
        print_status "Total Active Validators: $count"
    else
        print_warning "‚ùå Could not query validators (node may be starting)"
    fi
}

# Regenerate accounts
regenerate_accounts() {
    print_warning "‚ö†Ô∏è This will regenerate all account mnemonics"
    read -p "Continue? (yes/no): " confirm
    if [[ "$confirm" =~ ^[Yy][Ee][Ss]$ ]]; then
        print_status "üîë Regenerating accounts..."
        require_docker_compose
        
        docker-compose run --rm account-generator
        print_success "‚úÖ New accounts generated in /tmp/push-accounts/"
        print_status "üí° Restart validators to use new accounts: ./local-validator-manager restart"
    fi
}

# Rebuild containers
rebuild_containers() {
    local rebuild_target="${2:-all}"
    
    require_docker_compose
    
    case "$rebuild_target" in
        all)
            print_status "üîß Rebuilding all validators (with cache)..."
            ./build.sh
            print_success "‚úÖ All validators rebuilt successfully"
            print_status "üí° Use './local-validator-manager restart' to apply changes"
            ;;
        core)
            print_status "üîß Rebuilding core validators..."
            (cd .. && docker build --pull=false -f local-multi-validator/Dockerfile.core -t push-core:latest .)
            print_success "‚úÖ Core validators rebuilt successfully"
            ;;
        universal)
            print_status "üîß Rebuilding universal validators..."
            (cd .. && docker build --pull=false -f local-multi-validator/Dockerfile.universal -t push-universal:latest .)
            print_success "‚úÖ Universal validators rebuilt successfully"
            ;;
        base)
            print_status "üîß Rebuilding base dependencies..."
            (cd .. && docker build -f local-multi-validator/Dockerfile.base -t local-multi-validator-base:latest .)
            print_success "‚úÖ Base dependencies rebuilt successfully"
            print_status "üí° Rebuild core/universal images next to apply changes"
            ;;
        clean)
            print_status "üîß Clean rebuilding all validators (no cache)..."
            (cd .. && docker build --no-cache -f local-multi-validator/Dockerfile.base -t local-multi-validator-base:latest . && \
            docker build --no-cache --pull=false -f local-multi-validator/Dockerfile.core -t push-core:latest . && \
            docker build --no-cache --pull=false -f local-multi-validator/Dockerfile.universal -t push-universal:latest .)
            print_success "‚úÖ Clean rebuild completed successfully"
            print_status "üí° Use './local-validator-manager restart' to apply changes"
            ;;
        *)
            print_error "‚ùå Invalid rebuild target: $rebuild_target"
            echo "Valid targets: all, core, universal, base, clean"
            echo "Note: All validators are rebuilt together"
            exit 1
            ;;
    esac
}

# Clean reset
clean_reset() {
    print_warning "‚ö†Ô∏è This will completely reset the local validator setup"
    print_warning "   - Stop all containers"
    print_warning "   - Remove all volumes and data"
    print_warning "   - Regenerate all accounts"
    read -p "Continue? (yes/no): " confirm
    if [[ "$confirm" =~ ^[Yy][Ee][Ss]$ ]]; then
        require_docker_compose
        
        print_status "üõë Stopping all containers..."
        docker-compose down -v
        
        print_status "üßπ Cleaning account files..."
        rm -rf /tmp/push-accounts
        
        print_status "üîë Regenerating accounts..."
        docker-compose run --rm account-generator
        
        print_success "‚úÖ Clean reset complete"
        print_status "üí° Start validators: ./local-validator-manager start"
    fi
}

# Container-based AuthZ setup
setup_container_authz() {
    print_header "üîê Setting up AuthZ in Containers"
    
    # Check if containers are running
    if ! docker ps --filter "name=core-validator-1" --format "{{.Names}}" | grep -q "core-validator-1"; then
        print_error "‚ùå Validators are not running"
        exit 1
    fi
    
    echo -e "${YELLOW}Setting up AuthZ grants using container-based operations...${NC}"
    
    # Load or create hot keys with mnemonics
    local HOTKEYS_FILE="/tmp/push-accounts/hotkeys.json"
    
    # Create hot key in universal-validator-1 container
    echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    echo -e "${BOLD}Creating hot key in universal-validator-1:${NC}"
    
    # Generate or reuse existing hot key inside universal validator container
    echo -ne "  ${YELLOW}Setting up hot key:${NC} "
    
    # Check if we have stored mnemonic for this hotkey
    local stored_mnemonic=""
    local hotkey_name="container-hotkey-1"
    
    if [ -f "$HOTKEYS_FILE" ]; then
        stored_mnemonic=$(jq -r --arg name "$hotkey_name" '.[] | select(.name == $name) | .mnemonic' "$HOTKEYS_FILE" 2>/dev/null || echo "")
    fi
    
    # Check if key already exists in container
    local hotkey_addr
    hotkey_addr=$(docker exec universal-validator-1 puniversald keys show container-hotkey --address --keyring-backend test 2>/dev/null || echo "")
    
    if [ -n "$hotkey_addr" ] && [ -n "$stored_mnemonic" ]; then
        # Key exists and we have its mnemonic stored
        echo -e "${GREEN}‚úÖ Existing key found${NC}"
        echo -e "  ${CYAN}Hot key address: $hotkey_addr${NC}"
    elif [ -n "$stored_mnemonic" ]; then
        # We have mnemonic but key doesn't exist in container - restore it
        echo -e "${YELLOW}‚ö†Ô∏è Restoring from stored mnemonic${NC}"
        echo "$stored_mnemonic" | docker exec -i universal-validator-1 puniversald keys add container-hotkey --keyring-backend test --recover > /dev/null 2>&1
        hotkey_addr=$(docker exec universal-validator-1 puniversald keys show container-hotkey --address --keyring-backend test 2>/dev/null)
        echo -e "  ${GREEN}‚úÖ Key restored${NC}"
        echo -e "  ${CYAN}Hot key address: $hotkey_addr${NC}"
    else
        # No stored mnemonic and no key - create new one with mnemonic
        echo -e "${YELLOW}‚ö†Ô∏è Creating new key${NC}"
        local key_creation_result
        key_creation_result=$(docker exec universal-validator-1 puniversald keys add container-hotkey --keyring-backend test 2>&1)
        
        # Extract address from output
        if echo "$key_creation_result" | grep -q "Address:"; then
            hotkey_addr=$(echo "$key_creation_result" | grep "Address:" | awk '{print $2}')
            echo -e "${GREEN}‚úÖ New key created${NC}"
            echo -e "  ${CYAN}Hot key address: $hotkey_addr${NC}"
        else
            echo -e "${RED}‚ùå Failed to create key${NC}"
            return 1
        fi
    fi
    
    # Get operator address from core validator
    local operator_addr=$(docker exec core-validator-1 cat /tmp/push-accounts/validators.json 2>/dev/null | jq -r '.[0].address' 2>/dev/null)
    echo -e "  ${CYAN}Operator address: $operator_addr${NC}"
    
    # Check if grants already exist for this hot key
    echo -ne "  ${YELLOW}Checking existing grants:${NC} "
    local existing_grants=$(docker exec core-validator-1 pchaind query authz grants "$operator_addr" "$hotkey_addr" --node tcp://localhost:26657 --output json 2>/dev/null)
    local existing_count=$(echo "$existing_grants" | jq -r '.grants | length' 2>/dev/null || echo "0")
    
    if [ "$existing_count" -ge 4 ]; then
        echo -e "${GREEN}‚úÖ $existing_count grants already exist${NC}"
        echo -e "  ${YELLOW}Skipping grant creation${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Only $existing_count grants exist, creating missing ones${NC}"
        
        # Create AuthZ grants inside core validator container
        echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
        echo -e "${BOLD}Creating AuthZ grants in core-validator-1:${NC}"
        
        # Calculate expiration (1 year from now)
        local expiration_unix=$(date -j -v+1y '+%s' 2>/dev/null || date -d '+1 year' '+%s' 2>/dev/null)
        
        # Create all required AuthZ grants
        local grant_types=(
            "send|--spend-limit 1000000000000000000upc|Bank send authorization"
            "generic|--msg-type /cosmos.staking.v1beta1.MsgDelegate|Staking delegate authorization"
            "generic|--msg-type /cosmos.staking.v1beta1.MsgUndelegate|Staking undelegate authorization" 
            "generic|--msg-type /cosmos.gov.v1beta1.MsgVote|Governance vote authorization"
        )
        
        for grant_info in "${grant_types[@]}"; do
            IFS='|' read -r grant_type extra_params description <<< "$grant_info"
            echo -ne "  ${YELLOW}$description:${NC} "
            
            # Build the command dynamically based on grant type
            local cmd="docker exec core-validator-1 pchaind tx authz grant \"$hotkey_addr\" $grant_type"
            
            # Add extra parameters (msg-type or spend-limit)
            if [ -n "$extra_params" ]; then
                cmd="$cmd $extra_params"
            fi
            
            # Add common parameters
            cmd="$cmd --from validator-1 --expiration $expiration_unix --chain-id localchain_9000-1 --keyring-backend test --node tcp://localhost:26657 --fees 200000000000000upc --yes --output json"
            
            # Execute the command
            tx_result=$(eval "$cmd" 2>&1)
            local exit_code=$?
            
            if [ $exit_code -eq 0 ] && echo "$tx_result" | grep -q '"txhash"'; then
                local tx_hash=$(echo "$tx_result" | jq -r '.txhash // "unknown"' 2>/dev/null)
                echo -e "${GREEN}‚úÖ Created (tx: ${tx_hash:0:16}...)${NC}"
            else
                echo -e "${RED}‚ùå Failed${NC}"
                echo "  ${RED}Error: $(echo "$tx_result" | head -1)${NC}"
            fi
            
            # Small delay between grants to avoid conflicts
            sleep 1
        done
    fi
        
    # Update universal validator configuration
    echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    echo -e "${BOLD}Updating universal validator configuration:${NC}"
    
    # Create configuration with container hot key
    docker exec universal-validator-1 bash -c "cat > /root/.puniversal/config/pushuv_config.json << EOF
{
  \"log_level\": 1,
  \"log_format\": \"console\",
  \"log_sampler\": false,
  \"push_chain_grpc_urls\": [\"core-validator-1:9090\"],
  \"config_refresh_interval\": 10000000000,
  \"max_retries\": 3,
  \"retry_backoff\": 1000000000,
  \"initial_fetch_retries\": 5,
  \"initial_fetch_timeout\": 30000000000,
  \"query_server_port\": 8080,
  \"authz_granter\": \"$operator_addr\",
  \"authz_hotkey\": \"container-hotkey\",
  \"keyring_backend\": \"test\",
  \"pchain_home\": \"/root/.puniversal\",
  \"message_type_category\": \"default\"
}
EOF"
        
        echo -e "  ${GREEN}‚úÖ Configuration updated${NC}"
        
        # Verify grants
        echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
        echo -e "${BOLD}Verifying AuthZ grants:${NC}"
        
        # Wait for transactions to be processed and verify using the universal validator
        echo -ne "  ${YELLOW}Waiting for transactions to process...${NC} "
        sleep 5
        echo -e "${GREEN}Done${NC}"
        
        # Use the universal validator to verify grants (more reliable)
        echo -ne "  ${YELLOW}Running AuthZ verification...${NC} "
        local verify_result
        verify_result=$(docker exec universal-validator-1 puniversald authz verify --rpc core-validator-1:9090 --chain-id localchain_9000-1 2>&1)
        
        if echo "$verify_result" | grep -q "üéâ Hot key setup is COMPLETE"; then
            echo -e "${GREEN}‚úÖ All grants verified${NC}"
            local grant_count=$(echo "$verify_result" | grep -o "Valid grants: [0-9]*/[0-9]*" | cut -d' ' -f3)
            echo -e "  ${CYAN}$grant_count grants active${NC}"
            
            # Show the actual grants created
            echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
            echo -e "${BOLD}Created AuthZ grants:${NC}"
            
            local grants_output
            grants_output=$(docker exec universal-validator-1 bash -c "cd /root && puniversald authz list $operator_addr --rpc core-validator-1:9090 --chain-id localchain_9000-1" 2>/dev/null)
            
            # Filter out the GRANTEE section completely since it's confusing
            echo "$grants_output" | sed '/is the GRANTEE:/,$d' | while read -r line; do
                echo "  $line"
            done
        else
            echo -e "${RED}‚ùå Verification failed${NC}"
            echo "$verify_result" | grep -E "(‚ùå|Missing|Failed)" | head -3 | sed 's/^/  /'
        fi
}

# Container-based AuthZ verification
verify_container_authz() {
    print_header "üîç Verifying Container AuthZ"
    
    # Check if containers are running
    if ! docker ps --filter "name=universal-validator-1" --format "{{.Names}}" | grep -q "universal-validator-1"; then
        print_error "‚ùå Universal validators are not running"
        exit 1
    fi
    
    echo -e "${YELLOW}Verifying AuthZ functionality in containers...${NC}"
    
    # Check if hot key exists
    echo -ne "${YELLOW}Hot key exists:${NC} "
    if docker exec universal-validator-1 puniversald keys show container-hotkey --keyring-backend test >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Found${NC}"
        
        # Get addresses
        local hotkey_addr=$(docker exec universal-validator-1 puniversald keys show container-hotkey --address --keyring-backend test 2>/dev/null)
        local operator_addr=$(docker exec core-validator-1 cat /tmp/push-accounts/validators.json 2>/dev/null | jq -r '.[0].address' 2>/dev/null)
        
        echo -e "  ${CYAN}Hot key: $hotkey_addr${NC}"
        echo -e "  ${CYAN}Operator: $operator_addr${NC}"
        
        # Test AuthZ verification inside universal validator
        echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
        echo -e "${BOLD}AuthZ verification from universal-validator-1:${NC}"
        
        # Use correct gRPC endpoint for AuthZ verification
        docker exec universal-validator-1 bash -c "cd /root && puniversald authz verify --rpc core-validator-1:9090 --chain-id localchain_9000-1" 2>/dev/null | while read -r line; do
            echo "  $line"
        done
        
        # Test grant listing
        echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
        echo -e "${BOLD}Listing grants from universal-validator-1:${NC}"
        
        local grants_output
        grants_output=$(docker exec universal-validator-1 bash -c "cd /root && puniversald authz list $operator_addr --rpc core-validator-1:9090 --chain-id localchain_9000-1" 2>/dev/null)
        
        # Filter out the GRANTEE section completely since it's confusing
        echo "$grants_output" | sed '/is the GRANTEE:/,$d' | while read -r line; do
            echo "  $line"
        done
        
    else
        echo -e "${RED}‚ùå Hot key not found${NC}"
        echo -e "  ${YELLOW}Run 'setup-container-authz' first${NC}"
    fi
}

# Execute AuthZ transactions in containers
exec_container_authz() {
    print_header "üöÄ Executing AuthZ Transactions"
    
    # Check if containers are running
    if ! docker ps --filter "name=universal-validator-1" --format "{{.Names}}" | grep -q "universal-validator-1"; then
        print_error "‚ùå Universal validators are not running"
        exit 1
    fi
    
    echo -e "${YELLOW}Executing transactions using puniversald AuthZ exec...${NC}"
    
    # Check if hot key exists 
    echo -ne "${YELLOW}Checking hot key:${NC} "
    if ! docker exec universal-validator-1 puniversald keys show container-hotkey --keyring-backend test >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Hot key not found in universal validator${NC}"
        echo -e "  ${YELLOW}Run 'setup-container-authz' first${NC}"
        return 1
    fi
    
    # Get addresses
    local hotkey_addr=$(docker exec universal-validator-1 puniversald keys show container-hotkey --address --keyring-backend test 2>/dev/null)
    local operator_addr=$(docker exec core-validator-1 cat /tmp/push-accounts/validators.json 2>/dev/null | jq -r '.[0].address' 2>/dev/null)
    
    echo -e "${GREEN}‚úÖ Found${NC}"
    echo -e "  ${CYAN}Hot key: $hotkey_addr${NC}"
    echo -e "  ${CYAN}Operator: $operator_addr${NC}"
    
    # Check if puniversald config is set up
    echo -ne "${YELLOW}Checking puniversald config:${NC} "
    local config_check=$(docker exec universal-validator-1 puniversald authz verify --rpc core-validator-1:9090 --chain-id localchain_9000-1 2>&1)
    
    if echo "$config_check" | grep -q "Hot key setup is COMPLETE"; then
        echo -e "${GREEN}‚úÖ Config ready${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Config needs setup${NC}"
        echo -e "  ${GRAY}AuthZ verification result: $(echo "$config_check" | head -1)${NC}"
    fi
    
    echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    echo -e "${BOLD}Executing AuthZ transactions with puniversald:${NC}"
    
    # Get validator address for transactions
    local validator_addr=$(docker exec core-validator-1 pchaind keys show validator-1 --bech val --address --keyring-backend test 2>/dev/null)
    
    if [ -z "$validator_addr" ]; then
        echo -e "${RED}‚ùå Validator address not found${NC}"
        return 1
    fi
    
    echo -e "  ${CYAN}Validator: $validator_addr${NC}"
    echo
    
    # Transaction 1: Bank Send
    echo -e "${CYAN}1. Executing Bank Send Transaction:${NC}"
    echo -e "  ${GRAY}Sending 1000upc from operator to hot key${NC}"
    
    local authz_result=$(docker exec universal-validator-1 puniversald authz exec container-hotkey "/cosmos.bank.v1beta1.MsgSend" "$hotkey_addr" "1000upc" --rpc core-validator-1:9090 --chain-id localchain_9000-1 --fees "200000000000000upc" --memo "AuthZ Bank Send Test" 2>&1)
    
    if echo "$authz_result" | grep -q "Transaction Hash:"; then
        local tx_hash=$(echo "$authz_result" | grep "Transaction Hash:" | awk '{print $3}')
        echo -e "  ${GREEN}‚úÖ Transaction executed${NC}"
        echo -e "    ${YELLOW}TX Hash: ${tx_hash:0:20}...${NC}"
        echo "$authz_result" | grep -E "(Gas Used:|Gas Wanted:)" | sed 's/^/    /'
    else
        echo -e "  ${RED}‚ùå Transaction failed${NC}"
        echo "$authz_result" | head -3 | sed 's/^/    /'
    fi
    echo
    
    # Transaction 2: Staking Delegate
    echo -e "${CYAN}2. Executing Staking Delegate Transaction:${NC}"
    echo -e "  ${GRAY}Delegating 2000upc to validator${NC}"
    
    authz_result=$(docker exec universal-validator-1 puniversald authz exec container-hotkey "/cosmos.staking.v1beta1.MsgDelegate" "$validator_addr" "2000upc" --rpc core-validator-1:9090 --chain-id localchain_9000-1 --fees "200000000000000upc" --memo "AuthZ Delegate Test" 2>&1)
    
    if echo "$authz_result" | grep -q "Transaction Hash:"; then
        local tx_hash=$(echo "$authz_result" | grep "Transaction Hash:" | awk '{print $3}')
        echo -e "  ${GREEN}‚úÖ Transaction executed${NC}"
        echo -e "    ${YELLOW}TX Hash: ${tx_hash:0:20}...${NC}"
        echo "$authz_result" | grep -E "(Gas Used:|Gas Wanted:)" | sed 's/^/    /'
    else
        echo -e "  ${RED}‚ùå Transaction failed${NC}"
        echo "$authz_result" | head -3 | sed 's/^/    /'
    fi
    echo
    
    # Transaction 3: Staking Undelegate (only if we have delegations)
    echo -e "${CYAN}3. Executing Staking Undelegate Transaction:${NC}"
    echo -e "  ${GRAY}Undelegating 500upc from validator${NC}"
    
    authz_result=$(docker exec universal-validator-1 puniversald authz exec container-hotkey "/cosmos.staking.v1beta1.MsgUndelegate" "$validator_addr" "500upc" --rpc core-validator-1:9090 --chain-id localchain_9000-1 --fees "200000000000000upc" --memo "AuthZ Undelegate Test" 2>&1)
    
    if echo "$authz_result" | grep -q "Transaction Hash:"; then
        local tx_hash=$(echo "$authz_result" | grep "Transaction Hash:" | awk '{print $3}')
        echo -e "  ${GREEN}‚úÖ Transaction executed${NC}"
        echo -e "    ${YELLOW}TX Hash: ${tx_hash:0:20}...${NC}"
        echo "$authz_result" | grep -E "(Gas Used:|Gas Wanted:)" | sed 's/^/    /'
    else
        echo -e "  ${RED}‚ùå Transaction failed${NC}"
        echo "$authz_result" | head -3 | sed 's/^/    /'
    fi
    echo
    
    # Transaction 4: Governance Vote (check for proposals first)
    echo -e "${CYAN}4. Checking for Governance Proposals:${NC}"
    local proposals=$(docker exec core-validator-1 pchaind q gov proposals --node tcp://localhost:26657 --output json 2>/dev/null)
    local proposal_count=$(echo "$proposals" | jq -r '.proposals | length' 2>/dev/null || echo "0")
    
    if [ "$proposal_count" -gt 0 ]; then
        local proposal_id=$(echo "$proposals" | jq -r '.proposals[0].id // "1"' 2>/dev/null)
        echo -e "  ${GREEN}‚úÖ Found $proposal_count proposals${NC}"
        echo -e "  ${GRAY}Voting YES on proposal $proposal_id${NC}"
        
        authz_result=$(docker exec universal-validator-1 puniversald authz exec container-hotkey "/cosmos.gov.v1beta1.MsgVote" "$proposal_id" "yes" --rpc core-validator-1:9090 --chain-id localchain_9000-1 --fees "200000000000000upc" --memo "AuthZ Vote Test" 2>&1)
        
        if echo "$authz_result" | grep -q "Transaction Hash:"; then
            local tx_hash=$(echo "$authz_result" | grep "Transaction Hash:" | awk '{print $3}')
            echo -e "  ${GREEN}‚úÖ Vote transaction executed${NC}"
            echo -e "    ${YELLOW}TX Hash: ${tx_hash:0:20}...${NC}"
            echo "$authz_result" | grep -E "(Gas Used:|Gas Wanted:)" | sed 's/^/    /'
        else
            echo -e "  ${RED}‚ùå Vote transaction failed${NC}"
            echo "$authz_result" | head -3 | sed 's/^/    /'
        fi
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è No active governance proposals${NC}"
        echo -e "    ${GRAY}Skipping governance vote test${NC}"
    fi
    echo
    
    echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
    echo -e "${BOLD}${GREEN}‚úÖ AuthZ transaction execution completed${NC}"
    echo -e "${YELLOW}All supported transaction types tested with real execution${NC}"
}

# Show individual validator help
show_validator_help() {
    echo
    echo -e "${BOLD}${GREEN}Local Validator Commands${NC}"
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo
    echo -e "${BOLD}INDIVIDUAL VALIDATOR COMMANDS${NC}"
    printf "  ${BOLD}%-25s${NC}%s\n" "validator-status <1-3>" "Show specific validator status"
    printf "  ${BOLD}%-25s${NC}%s\n" "logs <validator-name>" "Show logs for validator"
    printf "  ${BOLD}%-25s${NC}%s\n" "restart-validator <name>" "Restart specific validator"
    echo
    echo -e "${BOLD}VALIDATOR NAMES:${NC}"
    echo -e "  ${CYAN}Core validators:${NC} core-validator-1, core-validator-2, core-validator-3"
    echo -e "  ${CYAN}Universal validators:${NC} universal-validator-1, universal-validator-2, universal-validator-3"
    echo
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo -e "  ./local-validator-manager ${BOLD}validator-status 1${NC}"
    echo -e "  ./local-validator-manager ${BOLD}logs core-validator-2${NC}"
    echo -e "  ./local-validator-manager ${BOLD}restart-validator universal-validator-3${NC}"
}

# Restart specific validator
restart_validator() {
    local validator_name="${2:-}"
    
    if [ -z "$validator_name" ]; then
        print_error "‚ùå Validator name required"
        show_validator_help
        exit 1
    fi
    
    require_docker_compose
    print_status "üîÑ Restarting $validator_name..."
    
    docker-compose restart "$validator_name"
    print_success "‚úÖ $validator_name restarted"
}

# Show help
show_help() {
    echo
    echo -e "${BOLD}${GREEN}Local Multi-Validator Manager${NC}"
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo
    echo -e "${BOLD}Usage:${NC} local-validator-manager [command] [options]"
    echo
    echo -e "${BOLD}${CYAN}SETUP COMMANDS${NC}"
    printf "  ${BOLD}%-20s${NC}%s\n" "start" "Start all validators (3 core + 3 universal)"
    printf "  ${BOLD}%-20s${NC}%s\n" "stop" "Stop all validators"
    printf "  ${BOLD}%-20s${NC}%s\n" "restart" "Restart all validators"
    printf "  ${BOLD}%-20s${NC}%s\n" "status" "Show overall status"
    echo
    echo -e "${BOLD}${CYAN}VALIDATOR MANAGEMENT${NC}"
    printf "  ${BOLD}%-25s${NC}%s\n" "validator-status <id>" "Show validator <1-3> detailed status"
    printf "  ${BOLD}%-25s${NC}%s\n" "logs <name>" "Show logs for specific validator"
    printf "  ${BOLD}%-25s${NC}%s\n" "restart-validator <name>" "Restart specific validator"
    printf "  ${BOLD}%-25s${NC}%s\n" "validators" "List all active validators"
    echo
    echo -e "${BOLD}${CYAN}MAINTENANCE${NC}"
    printf "  ${BOLD}%-25s${NC}%s\n" "regenerate-accounts" "Generate new account mnemonics"
    printf "  ${BOLD}%-25s${NC}%s\n" "clean-reset" "Complete reset (removes all data)"
    printf "  ${BOLD}%-25s${NC}%s\n" "validator-help" "Show validator-specific commands"
    echo
    echo -e "${BOLD}${CYAN}AUTHZ TESTING${NC}"
    printf "  ${BOLD}%-25s${NC}%s\n" "setup-container-authz" "Setup hot key and AuthZ grants"
    printf "  ${BOLD}%-25s${NC}%s\n" "verify-container-authz" "Verify AuthZ setup and list grants"
    printf "  ${BOLD}%-25s${NC}%s\n" "exec-container-authz" "Execute all AuthZ transaction types"
    echo
    echo -e "${BOLD}${CYAN}REBUILD COMMANDS${NC}"
    printf "  ${BOLD}%-25s${NC}%s\n" "rebuild all" "Rebuild base + all validators (with cache)"
    printf "  ${BOLD}%-25s${NC}%s\n" "rebuild core" "Rebuild core validators only"
    printf "  ${BOLD}%-25s${NC}%s\n" "rebuild universal" "Rebuild universal validators only"  
    printf "  ${BOLD}%-25s${NC}%s\n" "rebuild base" "Rebuild shared dependencies only"
    printf "  ${BOLD}%-25s${NC}%s\n" "rebuild clean" "Clean rebuild all (slow, no cache)"
    echo
    echo -e "${BOLD}${CYAN}üî• DEVELOPMENT & HOT RELOAD${NC}"
    printf "  ${BOLD}%-25s${NC}%s\n" "dev-watch" "Auto-rebuild on file changes (requires fswatch)"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BOLD}${YELLOW}QUICK START${NC}"
    echo -e "  1. local-validator-manager ${BOLD}start${NC}"
    echo -e "  2. local-validator-manager ${BOLD}status${NC}"
    echo -e "  3. local-validator-manager ${BOLD}validators${NC}"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BOLD}NETWORK ACCESS${NC}"
    echo -e "  Chain ID:       ${YELLOW}localchain_9000-1${NC}"
    echo -e "  Network:        ${YELLOW}Local Docker${NC}"
    echo
    echo -e "${BOLD}CORE VALIDATORS${NC}"
    echo -e "  Validator 1:    ${YELLOW}http://localhost:26657${NC} (RPC) ${YELLOW}http://localhost:1317${NC} (REST)"
    echo -e "  Validator 2:    ${YELLOW}http://localhost:26658${NC} (RPC) ${YELLOW}http://localhost:1318${NC} (REST)"
    echo -e "  Validator 3:    ${YELLOW}http://localhost:26659${NC} (RPC) ${YELLOW}http://localhost:1319${NC} (REST)"
    echo
    echo -e "${BOLD}UNIVERSAL VALIDATORS${NC}"
    echo -e "  Universal 1:    ${YELLOW}http://localhost:8080${NC} (Query API)"
    echo -e "  Universal 2:    ${YELLOW}http://localhost:8081${NC} (Query API)"
    echo -e "  Universal 3:    ${YELLOW}http://localhost:8082${NC} (Query API)"
    echo
    echo -e "${BOLD}DATA LOCATIONS${NC}"
    echo -e "  Accounts:       ${YELLOW}/tmp/push-accounts/#{NC}"
    echo -e "  Validator data: ${YELLOW}Docker volumes${NC}"
    echo
}

# Hot reload functionality
start_dev_watch() {
    require_docker_compose
    
    print_header "üî• Hot Reload Development Mode"
    echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # Check if fswatch is available
    if ! command -v fswatch >/dev/null 2>&1; then
        print_error "‚ùå fswatch not found"
        echo "Install fswatch for file watching:"
        echo "  macOS: brew install fswatch"
        echo "  Linux: apt-get install fswatch"
        exit 1
    fi
    
    print_status "üìÅ Watching source directories: cmd/, app/, x/, universalClient/"
    print_status "üîß Auto-rebuild on file changes (Ctrl+C to stop)"
    echo
    
    # Initial status check
    show_status
    echo
    
    # Start file watching
    fswatch -e "\.git" -e "\.log" -e "build/" ../cmd/ ../app/ ../x/ ../universalClient/ | while read file; do
        echo
        print_status "üìù File changed: $(basename "$file")"
        # Smart rebuilding based on changed file
        if echo "$file" | grep -qE "(universalClient/)"; then
            print_status "üîß Universal file changed - rebuilding universal validators..."
            BUILD_CMD="(cd .. && docker build -f local-multi-validator/Dockerfile.universal -t push-universal:latest .)"
        else
            print_status "üîß Core file changed - rebuilding core validators..."
            BUILD_CMD="(cd .. && docker build -f local-multi-validator/Dockerfile.core -t push-core:latest .)"
        fi
        
        if eval "$BUILD_CMD"; then
            print_status "üîÑ Restarting validators..."
            docker-compose restart core-validator-1 core-validator-2 core-validator-3 universal-validator-1 universal-validator-2 universal-validator-3
            print_success "‚úÖ Hot reload complete! New code is active."
        else
            print_error "‚ùå Build failed - check your code changes"
        fi
        echo
    done
}


# Command handling
case "${1:-help}" in
    start)
        start_all
        ;;
        
    stop)
        stop_all
        ;;
        
    restart)
        restart_all
        ;;
        
    status)
        show_status
        ;;
        
    logs)
        show_logs "$@"
        ;;
        
    validator-status)
        show_validator_status "$@"
        ;;
        
    restart-validator)
        restart_validator "$@"
        ;;
        
    validators)
        list_validators
        ;;
        
    regenerate-accounts)
        regenerate_accounts
        ;;
        
    clean-reset)
        clean_reset
        ;;
        
    validator-help)
        show_validator_help
        ;;
        
    setup-container-authz)
        setup_container_authz
        ;;
        
    verify-container-authz)
        verify_container_authz
        ;;
        
    exec-container-authz)
        exec_container_authz
        ;;
        
    rebuild)
        rebuild_containers "$@"
        ;;
        
    dev-watch)
        start_dev_watch "$@"
        ;;
        
    help|--help|-h|"")
        show_help
        ;;
        
    *)
        print_error "‚ùå Unknown command: $1"
        echo "Use './local-validator-manager help' for usage information"
        exit 1
        ;;
esac