// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ue/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Signature verification types
type VerificationType int32

const (
	VerificationType_signedVerification      VerificationType = 0
	VerificationType_universalTxVerification VerificationType = 1
)

var VerificationType_name = map[int32]string{
	0: "signedVerification",
	1: "universalTxVerification",
}

var VerificationType_value = map[string]int32{
	"signedVerification":      0,
	"universalTxVerification": 1,
}

func (x VerificationType) String() string {
	return proto.EnumName(VerificationType_name, int32(x))
}

func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{0}
}

type UniversalTxStatus int32

const (
	UniversalTxStatus_UNIVERSAL_TX_STATUS_UNSPECIFIED UniversalTxStatus = 0
	UniversalTxStatus_INBOUND_SUCCESS                 UniversalTxStatus = 1
	UniversalTxStatus_PENDING_INBOUND_EXECUTION       UniversalTxStatus = 2
	UniversalTxStatus_PC_EXECUTED_SUCCESS             UniversalTxStatus = 3
	UniversalTxStatus_PC_EXECUTED_FAILED              UniversalTxStatus = 4
	UniversalTxStatus_PC_PENDING_REVERT               UniversalTxStatus = 5
	UniversalTxStatus_OUTBOUND_PENDING                UniversalTxStatus = 6
	UniversalTxStatus_OUTBOUND_SUCCESS                UniversalTxStatus = 7
	UniversalTxStatus_OUTBOUND_FAILED                 UniversalTxStatus = 8
	UniversalTxStatus_CANCELED                        UniversalTxStatus = 9
)

var UniversalTxStatus_name = map[int32]string{
	0: "UNIVERSAL_TX_STATUS_UNSPECIFIED",
	1: "INBOUND_SUCCESS",
	2: "PENDING_INBOUND_EXECUTION",
	3: "PC_EXECUTED_SUCCESS",
	4: "PC_EXECUTED_FAILED",
	5: "PC_PENDING_REVERT",
	6: "OUTBOUND_PENDING",
	7: "OUTBOUND_SUCCESS",
	8: "OUTBOUND_FAILED",
	9: "CANCELED",
}

var UniversalTxStatus_value = map[string]int32{
	"UNIVERSAL_TX_STATUS_UNSPECIFIED": 0,
	"INBOUND_SUCCESS":                 1,
	"PENDING_INBOUND_EXECUTION":       2,
	"PC_EXECUTED_SUCCESS":             3,
	"PC_EXECUTED_FAILED":              4,
	"PC_PENDING_REVERT":               5,
	"OUTBOUND_PENDING":                6,
	"OUTBOUND_SUCCESS":                7,
	"OUTBOUND_FAILED":                 8,
	"CANCELED":                        9,
}

func (x UniversalTxStatus) String() string {
	return proto.EnumName(UniversalTxStatus_name, int32(x))
}

func (UniversalTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{1}
}

type Status int32

const (
	Status_UNSPECIFIED Status = 0
	Status_PENDING     Status = 1
	Status_FINALIZED   Status = 2
)

var Status_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "PENDING",
	2: "FINALIZED",
}

var Status_value = map[string]int32{
	"UNSPECIFIED": 0,
	"PENDING":     1,
	"FINALIZED":   2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{2}
}

// Params defines the set of module parameters.
type Params struct {
	SomeValue bool `protobuf:"varint,2,opt,name=some_value,json=someValue,proto3" json:"some_value,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSomeValue() bool {
	if m != nil {
		return m.SomeValue
	}
	return false
}

// UniversalPayload mirrors the Solidity struct
type UniversalPayload struct {
	To                   string           `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Value                string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Data                 string           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	GasLimit             string           `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	MaxFeePerGas         string           `protobuf:"bytes,5,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string           `protobuf:"bytes,6,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	Nonce                string           `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Deadline             string           `protobuf:"bytes,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
	VType                VerificationType `protobuf:"varint,9,opt,name=v_type,json=vType,proto3,enum=ue.v1.VerificationType" json:"v_type,omitempty"`
}

func (m *UniversalPayload) Reset()      { *m = UniversalPayload{} }
func (*UniversalPayload) ProtoMessage() {}
func (*UniversalPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{1}
}
func (m *UniversalPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalPayload.Merge(m, src)
}
func (m *UniversalPayload) XXX_Size() int {
	return m.Size()
}
func (m *UniversalPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalPayload proto.InternalMessageInfo

func (m *UniversalPayload) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *UniversalPayload) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UniversalPayload) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *UniversalPayload) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *UniversalPayload) GetMaxFeePerGas() string {
	if m != nil {
		return m.MaxFeePerGas
	}
	return ""
}

func (m *UniversalPayload) GetMaxPriorityFeePerGas() string {
	if m != nil {
		return m.MaxPriorityFeePerGas
	}
	return ""
}

func (m *UniversalPayload) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *UniversalPayload) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *UniversalPayload) GetVType() VerificationType {
	if m != nil {
		return m.VType
	}
	return VerificationType_signedVerification
}

// UniversalAccountId is the identifier of a owner account
type UniversalAccountId struct {
	ChainNamespace string `protobuf:"bytes,1,opt,name=chain_namespace,json=chainNamespace,proto3" json:"chain_namespace,omitempty"`
	ChainId        string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Owner          string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *UniversalAccountId) Reset()      { *m = UniversalAccountId{} }
func (*UniversalAccountId) ProtoMessage() {}
func (*UniversalAccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{2}
}
func (m *UniversalAccountId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalAccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalAccountId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalAccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalAccountId.Merge(m, src)
}
func (m *UniversalAccountId) XXX_Size() int {
	return m.Size()
}
func (m *UniversalAccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalAccountId.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalAccountId proto.InternalMessageInfo

func (m *UniversalAccountId) GetChainNamespace() string {
	if m != nil {
		return m.ChainNamespace
	}
	return ""
}

func (m *UniversalAccountId) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UniversalAccountId) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type InboundStatus struct {
	Status Status `protobuf:"varint,1,opt,name=status,proto3,enum=ue.v1.Status" json:"status,omitempty"`
}

func (m *InboundStatus) Reset()         { *m = InboundStatus{} }
func (m *InboundStatus) String() string { return proto.CompactTextString(m) }
func (*InboundStatus) ProtoMessage()    {}
func (*InboundStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{3}
}
func (m *InboundStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundStatus.Merge(m, src)
}
func (m *InboundStatus) XXX_Size() int {
	return m.Size()
}
func (m *InboundStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InboundStatus proto.InternalMessageInfo

func (m *InboundStatus) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNSPECIFIED
}

type InboundSynthetic struct {
	SourceChain string `protobuf:"bytes,1,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	TxHash      string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Sender      string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient   string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount      string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetAddr   string `protobuf:"bytes,6,opt,name=asset_addr,json=assetAddr,proto3" json:"asset_addr,omitempty"`
	LogIndex    string `protobuf:"bytes,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *InboundSynthetic) Reset()      { *m = InboundSynthetic{} }
func (*InboundSynthetic) ProtoMessage() {}
func (*InboundSynthetic) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{4}
}
func (m *InboundSynthetic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundSynthetic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundSynthetic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundSynthetic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundSynthetic.Merge(m, src)
}
func (m *InboundSynthetic) XXX_Size() int {
	return m.Size()
}
func (m *InboundSynthetic) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundSynthetic.DiscardUnknown(m)
}

var xxx_messageInfo_InboundSynthetic proto.InternalMessageInfo

func (m *InboundSynthetic) GetSourceChain() string {
	if m != nil {
		return m.SourceChain
	}
	return ""
}

func (m *InboundSynthetic) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *InboundSynthetic) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InboundSynthetic) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *InboundSynthetic) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *InboundSynthetic) GetAssetAddr() string {
	if m != nil {
		return m.AssetAddr
	}
	return ""
}

func (m *InboundSynthetic) GetLogIndex() string {
	if m != nil {
		return m.LogIndex
	}
	return ""
}

type PCTx struct {
	TxHash      string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Sender      string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	GasUsed     uint64 `protobuf:"varint,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	ErrorMsg    string `protobuf:"bytes,7,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (m *PCTx) Reset()      { *m = PCTx{} }
func (*PCTx) ProtoMessage() {}
func (*PCTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{5}
}
func (m *PCTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PCTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PCTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PCTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PCTx.Merge(m, src)
}
func (m *PCTx) XXX_Size() int {
	return m.Size()
}
func (m *PCTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PCTx.DiscardUnknown(m)
}

var xxx_messageInfo_PCTx proto.InternalMessageInfo

func (m *PCTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *PCTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *PCTx) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *PCTx) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PCTx) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PCTx) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type OutboundTx struct {
	DestinationChain string `protobuf:"bytes,1,opt,name=destination_chain,json=destinationChain,proto3" json:"destination_chain,omitempty"`
	TxHash           string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Recipient        string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount           string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetAddr        string `protobuf:"bytes,5,opt,name=asset_addr,json=assetAddr,proto3" json:"asset_addr,omitempty"`
}

func (m *OutboundTx) Reset()      { *m = OutboundTx{} }
func (*OutboundTx) ProtoMessage() {}
func (*OutboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{6}
}
func (m *OutboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTx.Merge(m, src)
}
func (m *OutboundTx) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTx proto.InternalMessageInfo

func (m *OutboundTx) GetDestinationChain() string {
	if m != nil {
		return m.DestinationChain
	}
	return ""
}

func (m *OutboundTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *OutboundTx) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *OutboundTx) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *OutboundTx) GetAssetAddr() string {
	if m != nil {
		return m.AssetAddr
	}
	return ""
}

type UniversalTx struct {
	InboundTx       *InboundSynthetic `protobuf:"bytes,1,opt,name=inbound_tx,json=inboundTx,proto3" json:"inbound_tx,omitempty"`
	PcTx            *PCTx             `protobuf:"bytes,2,opt,name=pc_tx,json=pcTx,proto3" json:"pc_tx,omitempty"`
	OutboundTx      *OutboundTx       `protobuf:"bytes,3,opt,name=outbound_tx,json=outboundTx,proto3" json:"outbound_tx,omitempty"`
	UniversalStatus UniversalTxStatus `protobuf:"varint,4,opt,name=universal_status,json=universalStatus,proto3,enum=ue.v1.UniversalTxStatus" json:"universal_status,omitempty"`
}

func (m *UniversalTx) Reset()      { *m = UniversalTx{} }
func (*UniversalTx) ProtoMessage() {}
func (*UniversalTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{7}
}
func (m *UniversalTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalTx.Merge(m, src)
}
func (m *UniversalTx) XXX_Size() int {
	return m.Size()
}
func (m *UniversalTx) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalTx.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalTx proto.InternalMessageInfo

func (m *UniversalTx) GetInboundTx() *InboundSynthetic {
	if m != nil {
		return m.InboundTx
	}
	return nil
}

func (m *UniversalTx) GetPcTx() *PCTx {
	if m != nil {
		return m.PcTx
	}
	return nil
}

func (m *UniversalTx) GetOutboundTx() *OutboundTx {
	if m != nil {
		return m.OutboundTx
	}
	return nil
}

func (m *UniversalTx) GetUniversalStatus() UniversalTxStatus {
	if m != nil {
		return m.UniversalStatus
	}
	return UniversalTxStatus_UNIVERSAL_TX_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("ue.v1.VerificationType", VerificationType_name, VerificationType_value)
	proto.RegisterEnum("ue.v1.UniversalTxStatus", UniversalTxStatus_name, UniversalTxStatus_value)
	proto.RegisterEnum("ue.v1.Status", Status_name, Status_value)
	proto.RegisterType((*Params)(nil), "ue.v1.Params")
	proto.RegisterType((*UniversalPayload)(nil), "ue.v1.UniversalPayload")
	proto.RegisterType((*UniversalAccountId)(nil), "ue.v1.UniversalAccountId")
	proto.RegisterType((*InboundStatus)(nil), "ue.v1.InboundStatus")
	proto.RegisterType((*InboundSynthetic)(nil), "ue.v1.InboundSynthetic")
	proto.RegisterType((*PCTx)(nil), "ue.v1.PCTx")
	proto.RegisterType((*OutboundTx)(nil), "ue.v1.OutboundTx")
	proto.RegisterType((*UniversalTx)(nil), "ue.v1.UniversalTx")
}

func init() { proto.RegisterFile("ue/v1/types.proto", fileDescriptor_8e38d69320e5df94) }

var fileDescriptor_8e38d69320e5df94 = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x15, 0xfd, 0x71, 0x64, 0x5b, 0xd4, 0x46, 0xb1, 0x65, 0x3b, 0x91, 0x1d, 0x15, 0x41,
	0x0c, 0x17, 0x90, 0x10, 0x17, 0xf5, 0xc1, 0x97, 0x42, 0x91, 0x69, 0x87, 0x80, 0x2b, 0x0b, 0x14,
	0x65, 0x04, 0xb9, 0x10, 0x6b, 0x72, 0x43, 0x11, 0x95, 0xb8, 0x02, 0x97, 0x54, 0xe9, 0x73, 0x6f,
	0x3d, 0xb5, 0xb7, 0x1e, 0xf3, 0x08, 0x7d, 0x85, 0x02, 0x3d, 0xf4, 0x52, 0x20, 0xc7, 0x1e, 0x0b,
	0xfb, 0xd0, 0xbe, 0x43, 0x81, 0xa2, 0xe0, 0x72, 0xa9, 0x1f, 0x07, 0x49, 0x2f, 0x22, 0xe7, 0x9b,
	0x9d, 0xd9, 0xf9, 0xbe, 0x99, 0x11, 0xa1, 0x1a, 0x92, 0xf6, 0xec, 0x45, 0x3b, 0xb8, 0x99, 0x12,
	0xd6, 0x9a, 0xfa, 0x34, 0xa0, 0x28, 0x1f, 0x92, 0xd6, 0xec, 0xc5, 0x4e, 0xcd, 0xa1, 0x0e, 0xe5,
	0x48, 0x3b, 0x7e, 0x4b, 0x9c, 0x3b, 0x55, 0x3c, 0x71, 0x3d, 0xda, 0xe6, 0xbf, 0x09, 0xd4, 0xfc,
	0x0a, 0x0a, 0x7d, 0xec, 0xe3, 0x09, 0x43, 0x4f, 0x00, 0x18, 0x9d, 0x10, 0x73, 0x86, 0xc7, 0x21,
	0xa9, 0x67, 0xf7, 0xa5, 0x83, 0x92, 0x2e, 0xc7, 0xc8, 0x55, 0x0c, 0x9c, 0x6c, 0xfe, 0xf4, 0x6e,
	0x2f, 0xf3, 0xf7, 0xbb, 0x3d, 0xe9, 0xfb, 0xbf, 0x7e, 0x3e, 0x94, 0x43, 0xd2, 0x9e, 0xf2, 0xb0,
	0xe6, 0xef, 0x59, 0x50, 0x86, 0x9e, 0x3b, 0x23, 0x3e, 0xc3, 0xe3, 0x3e, 0xbe, 0x19, 0x53, 0x6c,
	0xa3, 0x0d, 0xc8, 0x06, 0xb4, 0x2e, 0xed, 0x4b, 0x07, 0xb2, 0x9e, 0x0d, 0x28, 0xaa, 0x41, 0x7e,
	0x91, 0x56, 0xd6, 0x13, 0x03, 0x21, 0xc8, 0xd9, 0x38, 0xc0, 0xf5, 0x07, 0x1c, 0xe4, 0xef, 0x68,
	0x17, 0x64, 0x07, 0x33, 0x73, 0xec, 0x4e, 0xdc, 0xa0, 0x9e, 0xe3, 0x8e, 0x92, 0x83, 0xd9, 0x45,
	0x6c, 0xa3, 0x67, 0x50, 0x99, 0xe0, 0xc8, 0x7c, 0x4b, 0x88, 0x39, 0x25, 0xbe, 0xe9, 0x60, 0x56,
	0xcf, 0xf3, 0x23, 0x6b, 0x13, 0x1c, 0x9d, 0x11, 0xd2, 0x27, 0xfe, 0x39, 0x66, 0xe8, 0x18, 0xea,
	0xf1, 0xb1, 0xa9, 0xef, 0x52, 0xdf, 0x0d, 0x6e, 0x56, 0xce, 0x17, 0xf8, 0xf9, 0xda, 0x04, 0x47,
	0x7d, 0xe1, 0x5e, 0xc4, 0xd5, 0x20, 0xef, 0x51, 0xcf, 0x22, 0xf5, 0x62, 0x52, 0x25, 0x37, 0xd0,
	0x0e, 0x94, 0x6c, 0x82, 0xed, 0xb1, 0xeb, 0x91, 0x7a, 0x29, 0x29, 0x28, 0xb5, 0x51, 0x0b, 0x0a,
	0x33, 0x33, 0x96, 0xbf, 0x2e, 0xef, 0x4b, 0x07, 0x1b, 0x47, 0x5b, 0x2d, 0x2e, 0x7f, 0xeb, 0x8a,
	0xf8, 0xee, 0x5b, 0xd7, 0xc2, 0x81, 0x4b, 0x3d, 0xe3, 0x66, 0x4a, 0xf4, 0xfc, 0x2c, 0x7e, 0x9c,
	0x3c, 0x5d, 0x16, 0xb1, 0x16, 0x92, 0x76, 0x98, 0x2a, 0x67, 0x4e, 0x13, 0xe9, 0x9a, 0x3f, 0x4a,
	0x80, 0xe6, 0x7a, 0x76, 0x2c, 0x8b, 0x86, 0x5e, 0xa0, 0xd9, 0xe8, 0x39, 0x54, 0xac, 0x11, 0x76,
	0x3d, 0xd3, 0xc3, 0x13, 0xc2, 0xa6, 0xd8, 0x22, 0x42, 0xde, 0x0d, 0x0e, 0xf7, 0x52, 0x14, 0x6d,
	0x43, 0x29, 0x39, 0xe8, 0xda, 0x42, 0xed, 0x22, 0xb7, 0x35, 0x3b, 0xe6, 0x47, 0xbf, 0xf5, 0x88,
	0x2f, 0x04, 0x4f, 0x8c, 0x4f, 0xd5, 0x84, 0x93, 0xeb, 0x9b, 0xc7, 0xb0, 0xae, 0x79, 0xd7, 0x34,
	0xf4, 0xec, 0x41, 0x80, 0x83, 0x90, 0xa1, 0x67, 0x50, 0x60, 0xfc, 0x8d, 0x17, 0xb1, 0x71, 0xb4,
	0x2e, 0x78, 0x27, 0x6e, 0x5d, 0x38, 0x9b, 0xff, 0x48, 0xa0, 0xa4, 0x81, 0x37, 0x5e, 0x30, 0x22,
	0x81, 0x6b, 0xa1, 0xa7, 0xb0, 0xc6, 0x68, 0xe8, 0x5b, 0xc4, 0xe4, 0x75, 0x09, 0x1a, 0xe5, 0x04,
	0xeb, 0xc6, 0x10, 0xda, 0x82, 0x62, 0x10, 0x99, 0x23, 0xcc, 0x46, 0x82, 0x42, 0x21, 0x88, 0x5e,
	0x61, 0x36, 0x42, 0x9b, 0x50, 0x60, 0xc4, 0xb3, 0xe7, 0x14, 0x84, 0x85, 0x1e, 0x83, 0xec, 0x13,
	0xcb, 0x9d, 0xba, 0xc4, 0x4b, 0xa7, 0x66, 0x01, 0xc4, 0x51, 0x78, 0x12, 0x13, 0x11, 0xd3, 0x22,
	0xac, 0x78, 0xe2, 0x31, 0x63, 0x24, 0x30, 0xb1, 0x6d, 0xfb, 0x62, 0x32, 0x64, 0x8e, 0x74, 0x6c,
	0xdb, 0x8f, 0x47, 0x71, 0x4c, 0x1d, 0xd3, 0xf5, 0x6c, 0x12, 0x89, 0x91, 0x28, 0x8d, 0xa9, 0xa3,
	0xc5, 0xf6, 0x87, 0xaa, 0xb9, 0x09, 0x4f, 0x93, 0xa5, 0x44, 0x9b, 0xbf, 0x48, 0x90, 0xeb, 0x77,
	0x8d, 0x68, 0x99, 0x8e, 0xf4, 0x11, 0x3a, 0xd9, 0x15, 0x3a, 0xdb, 0x10, 0xcf, 0xbc, 0x19, 0x32,
	0x62, 0x73, 0xa2, 0x39, 0xbd, 0xe8, 0x60, 0x36, 0x64, 0xc4, 0x8e, 0xd5, 0xbb, 0x1e, 0x53, 0xeb,
	0x1b, 0x73, 0x44, 0x5c, 0x67, 0x94, 0x90, 0xcd, 0xe9, 0x65, 0x8e, 0xbd, 0xe2, 0x10, 0xcf, 0x9a,
	0x34, 0xa7, 0x20, 0xb2, 0x26, 0x4d, 0xdb, 0x05, 0x99, 0xf8, 0x3e, 0xf5, 0xcd, 0x09, 0x73, 0x52,
	0x3e, 0x1c, 0xf8, 0x9a, 0x39, 0x27, 0x8f, 0x96, 0xf9, 0x94, 0xe2, 0xf5, 0xb6, 0xcc, 0x20, 0x6a,
	0xfe, 0x2a, 0x01, 0x5c, 0x86, 0x01, 0xa7, 0x66, 0x44, 0xe8, 0x73, 0xa8, 0xda, 0x84, 0x05, 0xae,
	0xc7, 0x27, 0x7b, 0xa5, 0x81, 0xca, 0x92, 0xe3, 0x7f, 0xba, 0xb8, 0xd2, 0xad, 0x07, 0x1f, 0xef,
	0x56, 0xee, 0x13, 0xdd, 0xca, 0xdf, 0xeb, 0xd6, 0xc9, 0xee, 0x32, 0x81, 0x8d, 0x90, 0xb4, 0xa9,
	0x28, 0x3b, 0xa6, 0xf1, 0xaf, 0x04, 0xe5, 0xf9, 0x52, 0x19, 0x11, 0x3a, 0x06, 0x48, 0xfb, 0x15,
	0x44, 0x9c, 0x40, 0x79, 0xbe, 0xbb, 0xf7, 0x07, 0x56, 0x97, 0xc5, 0x51, 0x23, 0x42, 0xfb, 0x90,
	0xe7, 0xba, 0x70, 0x42, 0xe5, 0xa3, 0xb2, 0x08, 0x89, 0xbb, 0xac, 0xe7, 0xa6, 0x96, 0x11, 0xa1,
	0x23, 0x28, 0x2f, 0x5d, 0xcc, 0xd9, 0x95, 0x8f, 0xaa, 0xe2, 0xdc, 0x42, 0x49, 0x1d, 0xe8, 0x42,
	0xd5, 0x2e, 0x28, 0x8b, 0x9d, 0x13, 0xad, 0xcb, 0xf1, 0xbd, 0xaa, 0x8b, 0xc0, 0xa5, 0xda, 0xc5,
	0x8a, 0x55, 0xe6, 0x11, 0x09, 0x70, 0xf2, 0x78, 0x99, 0x7f, 0x65, 0x65, 0x8d, 0x83, 0xe8, 0xf0,
	0x1c, 0x94, 0xfb, 0xff, 0x49, 0x68, 0x13, 0x10, 0x73, 0x1d, 0x8f, 0xd8, 0xcb, 0x1e, 0x25, 0x83,
	0x76, 0x61, 0x2b, 0x5c, 0xdc, 0xb7, 0xe2, 0x94, 0x0e, 0xbf, 0xcb, 0x42, 0xf5, 0x83, 0x6a, 0xd0,
	0x67, 0xb0, 0x37, 0xec, 0x69, 0x57, 0xaa, 0x3e, 0xe8, 0x5c, 0x98, 0xc6, 0x6b, 0x73, 0x60, 0x74,
	0x8c, 0xe1, 0xc0, 0x1c, 0xf6, 0x06, 0x7d, 0xb5, 0xab, 0x9d, 0x69, 0xea, 0xa9, 0x92, 0x41, 0x0f,
	0xa1, 0xa2, 0xf5, 0x5e, 0x5e, 0x0e, 0x7b, 0xa7, 0xe6, 0x60, 0xd8, 0xed, 0xaa, 0x83, 0x81, 0x22,
	0xa1, 0x27, 0xb0, 0xdd, 0x57, 0x7b, 0xa7, 0x5a, 0xef, 0xdc, 0x4c, 0x9d, 0xea, 0x6b, 0xb5, 0x3b,
	0x34, 0xb4, 0xcb, 0x9e, 0x92, 0x45, 0x5b, 0xf0, 0xb0, 0xdf, 0x15, 0x88, 0xba, 0x88, 0x7b, 0x10,
	0x17, 0xbf, 0xec, 0x38, 0xeb, 0x68, 0x17, 0xea, 0xa9, 0x92, 0x43, 0x8f, 0xa0, 0xda, 0xef, 0x9a,
	0x69, 0x4a, 0x5d, 0xbd, 0x52, 0x75, 0x43, 0xc9, 0xa3, 0x1a, 0x28, 0x97, 0x43, 0x23, 0xc9, 0x2f,
	0x9c, 0x4a, 0x61, 0x05, 0x4d, 0x53, 0x17, 0xe3, 0x3a, 0xe7, 0xa8, 0xc8, 0x5b, 0x42, 0x6b, 0x50,
	0xea, 0x76, 0x7a, 0x5d, 0x35, 0xb6, 0xe4, 0xc3, 0x2f, 0xa1, 0x20, 0x98, 0x57, 0xa0, 0xbc, 0xca,
	0xb2, 0x0c, 0xc5, 0xf4, 0x02, 0x09, 0xad, 0x83, 0x7c, 0xa6, 0xf5, 0x3a, 0x17, 0xda, 0x1b, 0xf5,
	0x54, 0xc9, 0xbe, 0xec, 0xfc, 0x76, 0xdb, 0x90, 0xde, 0xdf, 0x36, 0xa4, 0x3f, 0x6f, 0x1b, 0xd2,
	0x0f, 0x77, 0x8d, 0xcc, 0xfb, 0xbb, 0x46, 0xe6, 0x8f, 0xbb, 0x46, 0xe6, 0xcd, 0x73, 0xc7, 0x0d,
	0x46, 0xe1, 0x75, 0xcb, 0xa2, 0x93, 0xb6, 0x4f, 0xc7, 0x63, 0xbe, 0x59, 0xac, 0x3d, 0xe5, 0xcf,
	0x76, 0xd4, 0x0e, 0x49, 0xf2, 0x95, 0xbf, 0x2e, 0xf0, 0xcf, 0xf6, 0x17, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x55, 0x9d, 0x98, 0x26, 0xfb, 0x07, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SomeValue != that1.SomeValue {
		return false
	}
	return true
}
func (this *UniversalPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalPayload)
	if !ok {
		that2, ok := that.(UniversalPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.MaxFeePerGas != that1.MaxFeePerGas {
		return false
	}
	if this.MaxPriorityFeePerGas != that1.MaxPriorityFeePerGas {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if this.VType != that1.VType {
		return false
	}
	return true
}
func (this *UniversalAccountId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalAccountId)
	if !ok {
		that2, ok := that.(UniversalAccountId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainNamespace != that1.ChainNamespace {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	return true
}
func (this *InboundSynthetic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InboundSynthetic)
	if !ok {
		that2, ok := that.(InboundSynthetic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceChain != that1.SourceChain {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Recipient != that1.Recipient {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.AssetAddr != that1.AssetAddr {
		return false
	}
	if this.LogIndex != that1.LogIndex {
		return false
	}
	return true
}
func (this *PCTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PCTx)
	if !ok {
		that2, ok := that.(PCTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.ErrorMsg != that1.ErrorMsg {
		return false
	}
	return true
}
func (this *OutboundTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutboundTx)
	if !ok {
		that2, ok := that.(OutboundTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DestinationChain != that1.DestinationChain {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Recipient != that1.Recipient {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.AssetAddr != that1.AssetAddr {
		return false
	}
	return true
}
func (this *UniversalTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalTx)
	if !ok {
		that2, ok := that.(UniversalTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InboundTx.Equal(that1.InboundTx) {
		return false
	}
	if !this.PcTx.Equal(that1.PcTx) {
		return false
	}
	if !this.OutboundTx.Equal(that1.OutboundTx) {
		return false
	}
	if this.UniversalStatus != that1.UniversalStatus {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SomeValue {
		i--
		if m.SomeValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *UniversalPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxPriorityFeePerGas) > 0 {
		i -= len(m.MaxPriorityFeePerGas)
		copy(dAtA[i:], m.MaxPriorityFeePerGas)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaxPriorityFeePerGas)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MaxFeePerGas) > 0 {
		i -= len(m.MaxFeePerGas)
		copy(dAtA[i:], m.MaxFeePerGas)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaxFeePerGas)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniversalAccountId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalAccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalAccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNamespace) > 0 {
		i -= len(m.ChainNamespace)
		copy(dAtA[i:], m.ChainNamespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainNamespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InboundStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InboundSynthetic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundSynthetic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundSynthetic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogIndex) > 0 {
		i -= len(m.LogIndex)
		copy(dAtA[i:], m.LogIndex)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LogIndex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AssetAddr) > 0 {
		i -= len(m.AssetAddr)
		copy(dAtA[i:], m.AssetAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AssetAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceChain) > 0 {
		i -= len(m.SourceChain)
		copy(dAtA[i:], m.SourceChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SourceChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PCTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PCTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PCTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.GasUsed != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetAddr) > 0 {
		i -= len(m.AssetAddr)
		copy(dAtA[i:], m.AssetAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AssetAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationChain) > 0 {
		i -= len(m.DestinationChain)
		copy(dAtA[i:], m.DestinationChain)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DestinationChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniversalTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UniversalStatus != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UniversalStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.OutboundTx != nil {
		{
			size, err := m.OutboundTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PcTx != nil {
		{
			size, err := m.PcTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InboundTx != nil {
		{
			size, err := m.InboundTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SomeValue {
		n += 2
	}
	return n
}

func (m *UniversalPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaxFeePerGas)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaxPriorityFeePerGas)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VType != 0 {
		n += 1 + sovTypes(uint64(m.VType))
	}
	return n
}

func (m *UniversalAccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainNamespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *InboundStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *InboundSynthetic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AssetAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LogIndex)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PCTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTypes(uint64(m.GasUsed))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.BlockHeight))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OutboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationChain)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AssetAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UniversalTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InboundTx != nil {
		l = m.InboundTx.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PcTx != nil {
		l = m.PcTx.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OutboundTx != nil {
		l = m.OutboundTx.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UniversalStatus != 0 {
		n += 1 + sovTypes(uint64(m.UniversalStatus))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SomeValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SomeValue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPriorityFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VType", wireType)
			}
			m.VType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VType |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalAccountId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalAccountId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalAccountId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InboundSynthetic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundSynthetic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundSynthetic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PCTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PCTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PCTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundTx == nil {
				m.InboundTx = &InboundSynthetic{}
			}
			if err := m.InboundTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PcTx == nil {
				m.PcTx = &PCTx{}
			}
			if err := m.PcTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundTx == nil {
				m.OutboundTx = &OutboundTx{}
			}
			if err := m.OutboundTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalStatus", wireType)
			}
			m.UniversalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniversalStatus |= UniversalTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
