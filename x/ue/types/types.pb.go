// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ue/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Signature verification types
type VerificationType int32

const (
	VerificationType_signedVerification      VerificationType = 0
	VerificationType_universalTxVerification VerificationType = 1
)

var VerificationType_name = map[int32]string{
	0: "signedVerification",
	1: "universalTxVerification",
}

var VerificationType_value = map[string]int32{
	"signedVerification":      0,
	"universalTxVerification": 1,
}

func (x VerificationType) String() string {
	return proto.EnumName(VerificationType_name, int32(x))
}

func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{0}
}

// Params defines the set of module parameters.
type Params struct {
	// The admin account of the ue module.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

// UniversalPayload mirrors the Solidity struct
type UniversalPayload struct {
	To                   string           `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Value                string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Data                 string           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	GasLimit             string           `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	MaxFeePerGas         string           `protobuf:"bytes,5,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string           `protobuf:"bytes,6,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	Nonce                string           `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Deadline             string           `protobuf:"bytes,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
	VType                VerificationType `protobuf:"varint,9,opt,name=v_type,json=vType,proto3,enum=ue.v1.VerificationType" json:"v_type,omitempty"`
}

func (m *UniversalPayload) Reset()      { *m = UniversalPayload{} }
func (*UniversalPayload) ProtoMessage() {}
func (*UniversalPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{1}
}
func (m *UniversalPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalPayload.Merge(m, src)
}
func (m *UniversalPayload) XXX_Size() int {
	return m.Size()
}
func (m *UniversalPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalPayload proto.InternalMessageInfo

func (m *UniversalPayload) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *UniversalPayload) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UniversalPayload) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *UniversalPayload) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *UniversalPayload) GetMaxFeePerGas() string {
	if m != nil {
		return m.MaxFeePerGas
	}
	return ""
}

func (m *UniversalPayload) GetMaxPriorityFeePerGas() string {
	if m != nil {
		return m.MaxPriorityFeePerGas
	}
	return ""
}

func (m *UniversalPayload) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *UniversalPayload) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *UniversalPayload) GetVType() VerificationType {
	if m != nil {
		return m.VType
	}
	return VerificationType_signedVerification
}

// UniversalAccountId is the identifier of a owner account
type UniversalAccountId struct {
	ChainNamespace string `protobuf:"bytes,1,opt,name=chain_namespace,json=chainNamespace,proto3" json:"chain_namespace,omitempty"`
	ChainId        string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Owner          string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *UniversalAccountId) Reset()      { *m = UniversalAccountId{} }
func (*UniversalAccountId) ProtoMessage() {}
func (*UniversalAccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e38d69320e5df94, []int{2}
}
func (m *UniversalAccountId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniversalAccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniversalAccountId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniversalAccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniversalAccountId.Merge(m, src)
}
func (m *UniversalAccountId) XXX_Size() int {
	return m.Size()
}
func (m *UniversalAccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_UniversalAccountId.DiscardUnknown(m)
}

var xxx_messageInfo_UniversalAccountId proto.InternalMessageInfo

func (m *UniversalAccountId) GetChainNamespace() string {
	if m != nil {
		return m.ChainNamespace
	}
	return ""
}

func (m *UniversalAccountId) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UniversalAccountId) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterEnum("ue.v1.VerificationType", VerificationType_name, VerificationType_value)
	proto.RegisterType((*Params)(nil), "ue.v1.Params")
	proto.RegisterType((*UniversalPayload)(nil), "ue.v1.UniversalPayload")
	proto.RegisterType((*UniversalAccountId)(nil), "ue.v1.UniversalAccountId")
}

func init() { proto.RegisterFile("ue/v1/types.proto", fileDescriptor_8e38d69320e5df94) }

var fileDescriptor_8e38d69320e5df94 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0xb2, 0x76, 0xad, 0x85, 0xb6, 0xce, 0xaa, 0xb6, 0xd0, 0x49, 0xd9, 0xa8, 0x84,
	0x36, 0xed, 0x10, 0x6b, 0x20, 0xed, 0xb0, 0xdb, 0x38, 0x30, 0x4d, 0x42, 0xa8, 0x9a, 0x06, 0x07,
	0x2e, 0xd1, 0x5b, 0xf2, 0x96, 0x59, 0x4a, 0xec, 0xc8, 0x76, 0x42, 0xfb, 0x15, 0x38, 0xc1, 0x8d,
	0xe3, 0x3e, 0x02, 0x1f, 0x83, 0x0b, 0xd2, 0x8e, 0x1c, 0x51, 0x7b, 0x80, 0x8f, 0x81, 0x62, 0xa7,
	0x63, 0xe3, 0xc0, 0x25, 0xf6, 0xff, 0xfd, 0xff, 0x7e, 0x79, 0xfe, 0xc9, 0x64, 0xa3, 0x44, 0x56,
	0x1d, 0x32, 0x33, 0x2b, 0x50, 0x87, 0x85, 0x92, 0x46, 0xd2, 0x4e, 0x89, 0x61, 0x75, 0x38, 0x1a,
	0xa6, 0x32, 0x95, 0xb6, 0xc2, 0xea, 0x9d, 0x33, 0x47, 0x1b, 0x90, 0x73, 0x21, 0x99, 0xfd, 0xba,
	0xd2, 0xf8, 0x88, 0x74, 0x27, 0xa0, 0x20, 0xd7, 0x74, 0x48, 0x3a, 0x90, 0xe4, 0x5c, 0xf8, 0xde,
	0xae, 0xb7, 0xdf, 0x3f, 0x77, 0xe2, 0x78, 0xf3, 0xcb, 0xcd, 0x4e, 0xeb, 0xf7, 0xcd, 0x8e, 0xf7,
	0xf1, 0xd7, 0xd7, 0x83, 0x7e, 0x89, 0xac, 0xb0, 0xe9, 0xf1, 0xf7, 0x36, 0x19, 0xbc, 0x15, 0xbc,
	0x42, 0xa5, 0x21, 0x9b, 0xc0, 0x2c, 0x93, 0x90, 0xd0, 0x35, 0xd2, 0x36, 0xb2, 0x39, 0xdf, 0x36,
	0xb2, 0x6e, 0x59, 0x41, 0x56, 0xa2, 0xdf, 0x76, 0x2d, 0xad, 0xa0, 0x94, 0xac, 0x24, 0x60, 0xc0,
	0x7f, 0x64, 0x8b, 0x76, 0x4f, 0xb7, 0x49, 0x3f, 0x05, 0x1d, 0x65, 0x3c, 0xe7, 0xc6, 0x5f, 0xb1,
	0x46, 0x2f, 0x05, 0xfd, 0xba, 0xd6, 0xf4, 0x19, 0x59, 0xcf, 0x61, 0x1a, 0x5d, 0x21, 0x46, 0x05,
	0xaa, 0x28, 0x05, 0xed, 0x77, 0x6c, 0xe4, 0x71, 0x0e, 0xd3, 0x57, 0x88, 0x13, 0x54, 0xa7, 0xa0,
	0xe9, 0x11, 0xf1, 0xeb, 0x58, 0xa1, 0xb8, 0x54, 0xdc, 0xcc, 0x1e, 0xe4, 0xbb, 0x36, 0x3f, 0xcc,
	0x61, 0x3a, 0x69, 0xec, 0xbf, 0xe7, 0x86, 0xa4, 0x23, 0xa4, 0x88, 0xd1, 0x5f, 0x75, 0x53, 0x5a,
	0x41, 0x47, 0xa4, 0x97, 0x20, 0x24, 0x19, 0x17, 0xe8, 0xf7, 0xdc, 0x40, 0x4b, 0x4d, 0x43, 0xd2,
	0xad, 0xa2, 0x9a, 0xba, 0xdf, 0xdf, 0xf5, 0xf6, 0xd7, 0x9e, 0x6f, 0x85, 0x96, 0x7a, 0xf8, 0x0e,
	0x15, 0xbf, 0xe2, 0x31, 0x18, 0x2e, 0xc5, 0xc5, 0xac, 0xc0, 0xf3, 0x4e, 0x55, 0x2f, 0xc7, 0x4f,
	0xef, 0x43, 0x1c, 0x96, 0xc8, 0xca, 0x25, 0xb9, 0xa8, 0x70, 0xe8, 0xc6, 0x9f, 0x3d, 0x42, 0xef,
	0x78, 0x9e, 0xc4, 0xb1, 0x2c, 0x85, 0x39, 0x4b, 0xe8, 0x1e, 0x59, 0x8f, 0xaf, 0x81, 0x8b, 0x48,
	0x40, 0x8e, 0xba, 0x80, 0x18, 0x1b, 0xbc, 0x6b, 0xb6, 0xfc, 0x66, 0x59, 0xa5, 0x4f, 0x48, 0xcf,
	0x05, 0x79, 0xd2, 0xd0, 0x5e, 0xb5, 0xfa, 0x2c, 0xa9, 0xef, 0x27, 0x3f, 0x08, 0x54, 0x0d, 0x70,
	0x27, 0xfe, 0x37, 0x13, 0xb8, 0xdf, 0x1f, 0x9c, 0x92, 0xc1, 0xbf, 0x37, 0xa2, 0x9b, 0x84, 0x6a,
	0x9e, 0x0a, 0x4c, 0xee, 0x3b, 0x83, 0x16, 0xdd, 0x26, 0x5b, 0x77, 0x0d, 0x2e, 0xa6, 0x0f, 0x4c,
	0xef, 0xe5, 0xc9, 0xb7, 0x79, 0xe0, 0xdd, 0xce, 0x03, 0xef, 0xe7, 0x3c, 0xf0, 0x3e, 0x2d, 0x82,
	0xd6, 0xed, 0x22, 0x68, 0xfd, 0x58, 0x04, 0xad, 0xf7, 0x7b, 0x29, 0x37, 0xd7, 0xe5, 0x65, 0x18,
	0xcb, 0x9c, 0x29, 0x99, 0x65, 0x76, 0x66, 0xcd, 0x0a, 0xbb, 0xb2, 0x29, 0x2b, 0xd1, 0xbd, 0xee,
	0xcb, 0xae, 0x7d, 0xae, 0x2f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0x23, 0x66, 0xec, 0xf3,
	0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	return true
}
func (this *UniversalPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalPayload)
	if !ok {
		that2, ok := that.(UniversalPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.MaxFeePerGas != that1.MaxFeePerGas {
		return false
	}
	if this.MaxPriorityFeePerGas != that1.MaxPriorityFeePerGas {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if this.VType != that1.VType {
		return false
	}
	return true
}
func (this *UniversalAccountId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UniversalAccountId)
	if !ok {
		that2, ok := that.(UniversalAccountId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainNamespace != that1.ChainNamespace {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniversalPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxPriorityFeePerGas) > 0 {
		i -= len(m.MaxPriorityFeePerGas)
		copy(dAtA[i:], m.MaxPriorityFeePerGas)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaxPriorityFeePerGas)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MaxFeePerGas) > 0 {
		i -= len(m.MaxFeePerGas)
		copy(dAtA[i:], m.MaxFeePerGas)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MaxFeePerGas)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniversalAccountId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniversalAccountId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniversalAccountId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNamespace) > 0 {
		i -= len(m.ChainNamespace)
		copy(dAtA[i:], m.ChainNamespace)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainNamespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UniversalPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaxFeePerGas)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MaxPriorityFeePerGas)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.VType != 0 {
		n += 1 + sovTypes(uint64(m.VType))
	}
	return n
}

func (m *UniversalAccountId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainNamespace)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPriorityFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VType", wireType)
			}
			m.VType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VType |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniversalAccountId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniversalAccountId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniversalAccountId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
