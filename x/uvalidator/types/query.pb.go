// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uvalidator/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryUniversalValidatorByCoreRequest is the request type for the Query/UniversalValidatorByCore RPC method.
type QueryUniversalValidatorByCoreRequest struct {
	// core_validator_address specifies the address of the core validator to query.
	CoreValidatorAddress string `protobuf:"bytes,1,opt,name=core_validator_address,json=coreValidatorAddress,proto3" json:"core_validator_address,omitempty"`
}

func (m *QueryUniversalValidatorByCoreRequest) Reset()         { *m = QueryUniversalValidatorByCoreRequest{} }
func (m *QueryUniversalValidatorByCoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorByCoreRequest) ProtoMessage()    {}
func (*QueryUniversalValidatorByCoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{2}
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorByCoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorByCoreRequest.Merge(m, src)
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorByCoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorByCoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorByCoreRequest proto.InternalMessageInfo

func (m *QueryUniversalValidatorByCoreRequest) GetCoreValidatorAddress() string {
	if m != nil {
		return m.CoreValidatorAddress
	}
	return ""
}

// QueryUniversalValidatorByCoreResponse is the response type for the Query/UniversalValidatorByCore RPC method.
type QueryUniversalValidatorByCoreResponse struct {
	// universal_validator defines the universal validator associated with the specified core validator.
	UniversalValidator string `protobuf:"bytes,1,opt,name=universal_validator,json=universalValidator,proto3" json:"universal_validator,omitempty"`
}

func (m *QueryUniversalValidatorByCoreResponse) Reset()         { *m = QueryUniversalValidatorByCoreResponse{} }
func (m *QueryUniversalValidatorByCoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorByCoreResponse) ProtoMessage()    {}
func (*QueryUniversalValidatorByCoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{3}
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorByCoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorByCoreResponse.Merge(m, src)
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorByCoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorByCoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorByCoreResponse proto.InternalMessageInfo

func (m *QueryUniversalValidatorByCoreResponse) GetUniversalValidator() string {
	if m != nil {
		return m.UniversalValidator
	}
	return ""
}

// QueryCoreValidatorByUniversalRequest is the request type for the Query/CoreValidatorByUniversal RPC method.
type QueryCoreValidatorByUniversalRequest struct {
	// universal_validator_address specifies the address of the universal validator to query.
	UniversalValidatorAddress string `protobuf:"bytes,1,opt,name=universal_validator_address,json=universalValidatorAddress,proto3" json:"universal_validator_address,omitempty"`
}

func (m *QueryCoreValidatorByUniversalRequest) Reset()         { *m = QueryCoreValidatorByUniversalRequest{} }
func (m *QueryCoreValidatorByUniversalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoreValidatorByUniversalRequest) ProtoMessage()    {}
func (*QueryCoreValidatorByUniversalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{4}
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoreValidatorByUniversalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoreValidatorByUniversalRequest.Merge(m, src)
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoreValidatorByUniversalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoreValidatorByUniversalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoreValidatorByUniversalRequest proto.InternalMessageInfo

func (m *QueryCoreValidatorByUniversalRequest) GetUniversalValidatorAddress() string {
	if m != nil {
		return m.UniversalValidatorAddress
	}
	return ""
}

// QueryCoreValidatorByUniversalResponse is the response type for the Query/CoreValidatorByUniversal RPC method.
type QueryCoreValidatorByUniversalResponse struct {
	// core_validator_address defines the core validator associated with the specified universal validator.
	CoreValidatorAddress string `protobuf:"bytes,1,opt,name=core_validator_address,json=coreValidatorAddress,proto3" json:"core_validator_address,omitempty"`
}

func (m *QueryCoreValidatorByUniversalResponse) Reset()         { *m = QueryCoreValidatorByUniversalResponse{} }
func (m *QueryCoreValidatorByUniversalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoreValidatorByUniversalResponse) ProtoMessage()    {}
func (*QueryCoreValidatorByUniversalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{5}
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoreValidatorByUniversalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoreValidatorByUniversalResponse.Merge(m, src)
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoreValidatorByUniversalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoreValidatorByUniversalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoreValidatorByUniversalResponse proto.InternalMessageInfo

func (m *QueryCoreValidatorByUniversalResponse) GetCoreValidatorAddress() string {
	if m != nil {
		return m.CoreValidatorAddress
	}
	return ""
}

// QueryUniversalValidatorsSetRequest is the request type for Query/UniversalValidatorAddresses.
type QueryUniversalValidatorsSetRequest struct {
}

func (m *QueryUniversalValidatorsSetRequest) Reset()         { *m = QueryUniversalValidatorsSetRequest{} }
func (m *QueryUniversalValidatorsSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorsSetRequest) ProtoMessage()    {}
func (*QueryUniversalValidatorsSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{6}
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorsSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorsSetRequest.Merge(m, src)
}
func (m *QueryUniversalValidatorsSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorsSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorsSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorsSetRequest proto.InternalMessageInfo

// QueryUniversalValidatorsSetResponse is the response type for Query/UniversalValidatorAddresses.
type QueryUniversalValidatorsSetResponse struct {
	// addresses is the list of all universal validator addresses registered in the module.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryUniversalValidatorsSetResponse) Reset()         { *m = QueryUniversalValidatorsSetResponse{} }
func (m *QueryUniversalValidatorsSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUniversalValidatorsSetResponse) ProtoMessage()    {}
func (*QueryUniversalValidatorsSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{7}
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUniversalValidatorsSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUniversalValidatorsSetResponse.Merge(m, src)
}
func (m *QueryUniversalValidatorsSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUniversalValidatorsSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUniversalValidatorsSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUniversalValidatorsSetResponse proto.InternalMessageInfo

func (m *QueryUniversalValidatorsSetResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Single ballot
type QueryBallotRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryBallotRequest) Reset()         { *m = QueryBallotRequest{} }
func (m *QueryBallotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBallotRequest) ProtoMessage()    {}
func (*QueryBallotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{8}
}
func (m *QueryBallotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotRequest.Merge(m, src)
}
func (m *QueryBallotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotRequest proto.InternalMessageInfo

func (m *QueryBallotRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryBallotResponse struct {
	Ballot *Ballot `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (m *QueryBallotResponse) Reset()         { *m = QueryBallotResponse{} }
func (m *QueryBallotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBallotResponse) ProtoMessage()    {}
func (*QueryBallotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{9}
}
func (m *QueryBallotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotResponse.Merge(m, src)
}
func (m *QueryBallotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotResponse proto.InternalMessageInfo

func (m *QueryBallotResponse) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

// All ballots
type QueryBallotsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBallotsRequest) Reset()         { *m = QueryBallotsRequest{} }
func (m *QueryBallotsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBallotsRequest) ProtoMessage()    {}
func (*QueryBallotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{10}
}
func (m *QueryBallotsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotsRequest.Merge(m, src)
}
func (m *QueryBallotsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotsRequest proto.InternalMessageInfo

func (m *QueryBallotsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBallotsResponse struct {
	Ballots    []*Ballot           `protobuf:"bytes,1,rep,name=ballots,proto3" json:"ballots,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBallotsResponse) Reset()         { *m = QueryBallotsResponse{} }
func (m *QueryBallotsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBallotsResponse) ProtoMessage()    {}
func (*QueryBallotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{11}
}
func (m *QueryBallotsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotsResponse.Merge(m, src)
}
func (m *QueryBallotsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotsResponse proto.InternalMessageInfo

func (m *QueryBallotsResponse) GetBallots() []*Ballot {
	if m != nil {
		return m.Ballots
	}
	return nil
}

func (m *QueryBallotsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Active ballots
type QueryActiveBallotIDsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveBallotIDsRequest) Reset()         { *m = QueryActiveBallotIDsRequest{} }
func (m *QueryActiveBallotIDsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveBallotIDsRequest) ProtoMessage()    {}
func (*QueryActiveBallotIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{12}
}
func (m *QueryActiveBallotIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveBallotIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveBallotIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveBallotIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveBallotIDsRequest.Merge(m, src)
}
func (m *QueryActiveBallotIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveBallotIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveBallotIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveBallotIDsRequest proto.InternalMessageInfo

func (m *QueryActiveBallotIDsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActiveBallotIDsResponse struct {
	Ids        []string            `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveBallotIDsResponse) Reset()         { *m = QueryActiveBallotIDsResponse{} }
func (m *QueryActiveBallotIDsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveBallotIDsResponse) ProtoMessage()    {}
func (*QueryActiveBallotIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{13}
}
func (m *QueryActiveBallotIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveBallotIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveBallotIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveBallotIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveBallotIDsResponse.Merge(m, src)
}
func (m *QueryActiveBallotIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveBallotIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveBallotIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveBallotIDsResponse proto.InternalMessageInfo

func (m *QueryActiveBallotIDsResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryActiveBallotIDsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActiveBallotsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveBallotsRequest) Reset()         { *m = QueryActiveBallotsRequest{} }
func (m *QueryActiveBallotsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveBallotsRequest) ProtoMessage()    {}
func (*QueryActiveBallotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{14}
}
func (m *QueryActiveBallotsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveBallotsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveBallotsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveBallotsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveBallotsRequest.Merge(m, src)
}
func (m *QueryActiveBallotsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveBallotsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveBallotsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveBallotsRequest proto.InternalMessageInfo

func (m *QueryActiveBallotsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActiveBallotsResponse struct {
	Ballots    []*Ballot           `protobuf:"bytes,1,rep,name=ballots,proto3" json:"ballots,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveBallotsResponse) Reset()         { *m = QueryActiveBallotsResponse{} }
func (m *QueryActiveBallotsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveBallotsResponse) ProtoMessage()    {}
func (*QueryActiveBallotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{15}
}
func (m *QueryActiveBallotsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveBallotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveBallotsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveBallotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveBallotsResponse.Merge(m, src)
}
func (m *QueryActiveBallotsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveBallotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveBallotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveBallotsResponse proto.InternalMessageInfo

func (m *QueryActiveBallotsResponse) GetBallots() []*Ballot {
	if m != nil {
		return m.Ballots
	}
	return nil
}

func (m *QueryActiveBallotsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Expired ballots
type QueryExpiredBallotIDsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExpiredBallotIDsRequest) Reset()         { *m = QueryExpiredBallotIDsRequest{} }
func (m *QueryExpiredBallotIDsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExpiredBallotIDsRequest) ProtoMessage()    {}
func (*QueryExpiredBallotIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{16}
}
func (m *QueryExpiredBallotIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiredBallotIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiredBallotIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiredBallotIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiredBallotIDsRequest.Merge(m, src)
}
func (m *QueryExpiredBallotIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiredBallotIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiredBallotIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiredBallotIDsRequest proto.InternalMessageInfo

func (m *QueryExpiredBallotIDsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryExpiredBallotIDsResponse struct {
	Ids        []string            `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExpiredBallotIDsResponse) Reset()         { *m = QueryExpiredBallotIDsResponse{} }
func (m *QueryExpiredBallotIDsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExpiredBallotIDsResponse) ProtoMessage()    {}
func (*QueryExpiredBallotIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{17}
}
func (m *QueryExpiredBallotIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiredBallotIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiredBallotIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiredBallotIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiredBallotIDsResponse.Merge(m, src)
}
func (m *QueryExpiredBallotIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiredBallotIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiredBallotIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiredBallotIDsResponse proto.InternalMessageInfo

func (m *QueryExpiredBallotIDsResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryExpiredBallotIDsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryExpiredBallotsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExpiredBallotsRequest) Reset()         { *m = QueryExpiredBallotsRequest{} }
func (m *QueryExpiredBallotsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExpiredBallotsRequest) ProtoMessage()    {}
func (*QueryExpiredBallotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{18}
}
func (m *QueryExpiredBallotsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiredBallotsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiredBallotsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiredBallotsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiredBallotsRequest.Merge(m, src)
}
func (m *QueryExpiredBallotsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiredBallotsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiredBallotsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiredBallotsRequest proto.InternalMessageInfo

func (m *QueryExpiredBallotsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryExpiredBallotsResponse struct {
	Ballots    []*Ballot           `protobuf:"bytes,1,rep,name=ballots,proto3" json:"ballots,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExpiredBallotsResponse) Reset()         { *m = QueryExpiredBallotsResponse{} }
func (m *QueryExpiredBallotsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExpiredBallotsResponse) ProtoMessage()    {}
func (*QueryExpiredBallotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{19}
}
func (m *QueryExpiredBallotsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiredBallotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiredBallotsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiredBallotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiredBallotsResponse.Merge(m, src)
}
func (m *QueryExpiredBallotsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiredBallotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiredBallotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiredBallotsResponse proto.InternalMessageInfo

func (m *QueryExpiredBallotsResponse) GetBallots() []*Ballot {
	if m != nil {
		return m.Ballots
	}
	return nil
}

func (m *QueryExpiredBallotsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Finalized ballots
type QueryFinalizedBallotIDsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalizedBallotIDsRequest) Reset()         { *m = QueryFinalizedBallotIDsRequest{} }
func (m *QueryFinalizedBallotIDsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedBallotIDsRequest) ProtoMessage()    {}
func (*QueryFinalizedBallotIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{20}
}
func (m *QueryFinalizedBallotIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedBallotIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedBallotIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedBallotIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedBallotIDsRequest.Merge(m, src)
}
func (m *QueryFinalizedBallotIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedBallotIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedBallotIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedBallotIDsRequest proto.InternalMessageInfo

func (m *QueryFinalizedBallotIDsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFinalizedBallotIDsResponse struct {
	Ids        []string            `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalizedBallotIDsResponse) Reset()         { *m = QueryFinalizedBallotIDsResponse{} }
func (m *QueryFinalizedBallotIDsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedBallotIDsResponse) ProtoMessage()    {}
func (*QueryFinalizedBallotIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{21}
}
func (m *QueryFinalizedBallotIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedBallotIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedBallotIDsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedBallotIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedBallotIDsResponse.Merge(m, src)
}
func (m *QueryFinalizedBallotIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedBallotIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedBallotIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedBallotIDsResponse proto.InternalMessageInfo

func (m *QueryFinalizedBallotIDsResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *QueryFinalizedBallotIDsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFinalizedBallotsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalizedBallotsRequest) Reset()         { *m = QueryFinalizedBallotsRequest{} }
func (m *QueryFinalizedBallotsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedBallotsRequest) ProtoMessage()    {}
func (*QueryFinalizedBallotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{22}
}
func (m *QueryFinalizedBallotsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedBallotsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedBallotsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedBallotsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedBallotsRequest.Merge(m, src)
}
func (m *QueryFinalizedBallotsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedBallotsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedBallotsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedBallotsRequest proto.InternalMessageInfo

func (m *QueryFinalizedBallotsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFinalizedBallotsResponse struct {
	Ballots    []*Ballot           `protobuf:"bytes,1,rep,name=ballots,proto3" json:"ballots,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryFinalizedBallotsResponse) Reset()         { *m = QueryFinalizedBallotsResponse{} }
func (m *QueryFinalizedBallotsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFinalizedBallotsResponse) ProtoMessage()    {}
func (*QueryFinalizedBallotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cd4c651106fbb0, []int{23}
}
func (m *QueryFinalizedBallotsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFinalizedBallotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFinalizedBallotsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFinalizedBallotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFinalizedBallotsResponse.Merge(m, src)
}
func (m *QueryFinalizedBallotsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFinalizedBallotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFinalizedBallotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFinalizedBallotsResponse proto.InternalMessageInfo

func (m *QueryFinalizedBallotsResponse) GetBallots() []*Ballot {
	if m != nil {
		return m.Ballots
	}
	return nil
}

func (m *QueryFinalizedBallotsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "uvalidator.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "uvalidator.v1.QueryParamsResponse")
	proto.RegisterType((*QueryUniversalValidatorByCoreRequest)(nil), "uvalidator.v1.QueryUniversalValidatorByCoreRequest")
	proto.RegisterType((*QueryUniversalValidatorByCoreResponse)(nil), "uvalidator.v1.QueryUniversalValidatorByCoreResponse")
	proto.RegisterType((*QueryCoreValidatorByUniversalRequest)(nil), "uvalidator.v1.QueryCoreValidatorByUniversalRequest")
	proto.RegisterType((*QueryCoreValidatorByUniversalResponse)(nil), "uvalidator.v1.QueryCoreValidatorByUniversalResponse")
	proto.RegisterType((*QueryUniversalValidatorsSetRequest)(nil), "uvalidator.v1.QueryUniversalValidatorsSetRequest")
	proto.RegisterType((*QueryUniversalValidatorsSetResponse)(nil), "uvalidator.v1.QueryUniversalValidatorsSetResponse")
	proto.RegisterType((*QueryBallotRequest)(nil), "uvalidator.v1.QueryBallotRequest")
	proto.RegisterType((*QueryBallotResponse)(nil), "uvalidator.v1.QueryBallotResponse")
	proto.RegisterType((*QueryBallotsRequest)(nil), "uvalidator.v1.QueryBallotsRequest")
	proto.RegisterType((*QueryBallotsResponse)(nil), "uvalidator.v1.QueryBallotsResponse")
	proto.RegisterType((*QueryActiveBallotIDsRequest)(nil), "uvalidator.v1.QueryActiveBallotIDsRequest")
	proto.RegisterType((*QueryActiveBallotIDsResponse)(nil), "uvalidator.v1.QueryActiveBallotIDsResponse")
	proto.RegisterType((*QueryActiveBallotsRequest)(nil), "uvalidator.v1.QueryActiveBallotsRequest")
	proto.RegisterType((*QueryActiveBallotsResponse)(nil), "uvalidator.v1.QueryActiveBallotsResponse")
	proto.RegisterType((*QueryExpiredBallotIDsRequest)(nil), "uvalidator.v1.QueryExpiredBallotIDsRequest")
	proto.RegisterType((*QueryExpiredBallotIDsResponse)(nil), "uvalidator.v1.QueryExpiredBallotIDsResponse")
	proto.RegisterType((*QueryExpiredBallotsRequest)(nil), "uvalidator.v1.QueryExpiredBallotsRequest")
	proto.RegisterType((*QueryExpiredBallotsResponse)(nil), "uvalidator.v1.QueryExpiredBallotsResponse")
	proto.RegisterType((*QueryFinalizedBallotIDsRequest)(nil), "uvalidator.v1.QueryFinalizedBallotIDsRequest")
	proto.RegisterType((*QueryFinalizedBallotIDsResponse)(nil), "uvalidator.v1.QueryFinalizedBallotIDsResponse")
	proto.RegisterType((*QueryFinalizedBallotsRequest)(nil), "uvalidator.v1.QueryFinalizedBallotsRequest")
	proto.RegisterType((*QueryFinalizedBallotsResponse)(nil), "uvalidator.v1.QueryFinalizedBallotsResponse")
}

func init() { proto.RegisterFile("uvalidator/v1/query.proto", fileDescriptor_f4cd4c651106fbb0) }

var fileDescriptor_f4cd4c651106fbb0 = []byte{
	// 1028 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x98, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0xa9, 0x08, 0xca, 0x43, 0x54, 0xe5, 0xe5, 0x07, 0xc9, 0x26, 0x71, 0xd3, 0xb5,
	0x13, 0x92, 0xb4, 0xdd, 0x91, 0xd3, 0x9e, 0x91, 0x9c, 0x94, 0xa2, 0x0a, 0x21, 0x05, 0x57, 0xa0,
	0x0a, 0x51, 0x55, 0x63, 0xef, 0xc4, 0x59, 0x69, 0xb2, 0xeb, 0xee, 0xac, 0xad, 0xa6, 0x21, 0x17,
	0xfe, 0x00, 0x54, 0x81, 0xc4, 0x2f, 0x71, 0xe4, 0xc8, 0x1f, 0xc2, 0xb1, 0x12, 0x17, 0xc4, 0x05,
	0x94, 0xf0, 0x37, 0x70, 0x46, 0x9e, 0x99, 0xb5, 0xb3, 0xeb, 0x59, 0xdb, 0x41, 0x8e, 0x72, 0x4a,
	0xb4, 0xf3, 0xe6, 0x7d, 0x3f, 0x6f, 0xde, 0x9b, 0xec, 0x37, 0x0b, 0x8b, 0xad, 0x36, 0xe5, 0xbe,
	0x47, 0xe3, 0x30, 0x22, 0xed, 0x32, 0x79, 0xde, 0x62, 0xd1, 0x91, 0xdb, 0x8c, 0xc2, 0x38, 0xc4,
	0xb7, 0x7b, 0x4b, 0x6e, 0xbb, 0x6c, 0x2f, 0x37, 0xc2, 0xb0, 0xc1, 0x19, 0xa1, 0x4d, 0x9f, 0xd0,
	0x20, 0x08, 0x63, 0x1a, 0xfb, 0x61, 0x20, 0x54, 0xb0, 0xbd, 0x94, 0xce, 0xd3, 0x60, 0x01, 0x13,
	0x7e, 0xb2, 0x98, 0x11, 0x89, 0x8f, 0x9a, 0x2c, 0x59, 0xb2, 0xd3, 0x4b, 0x35, 0xca, 0x79, 0x18,
	0xeb, 0xb5, 0xad, 0x7a, 0x28, 0x0e, 0x43, 0x41, 0x6a, 0x54, 0x30, 0x45, 0x46, 0xda, 0xe5, 0x1a,
	0x8b, 0x69, 0x99, 0x34, 0x69, 0xc3, 0x0f, 0x24, 0x80, 0x8a, 0x75, 0x66, 0x01, 0x3f, 0xe9, 0x44,
	0xec, 0xd1, 0x88, 0x1e, 0x8a, 0x2a, 0x7b, 0xde, 0x62, 0x22, 0x76, 0x1e, 0xc0, 0x4c, 0xea, 0xa9,
	0x68, 0x86, 0x81, 0x60, 0x78, 0x17, 0xa6, 0x9a, 0xf2, 0xc9, 0x82, 0xb5, 0x6a, 0x6d, 0xbc, 0xb5,
	0x3d, 0xe7, 0xa6, 0x4a, 0x75, 0x75, 0xb8, 0x0e, 0x72, 0xbe, 0x80, 0x92, 0xcc, 0xf2, 0x69, 0xe0,
	0xb7, 0x59, 0x24, 0x28, 0xff, 0x2c, 0x09, 0xde, 0x39, 0xda, 0x0d, 0x23, 0xa6, 0xd5, 0xf0, 0x3e,
	0xcc, 0xd7, 0xc3, 0x88, 0x3d, 0xeb, 0xe6, 0x7a, 0x46, 0x3d, 0x2f, 0x62, 0x42, 0xc9, 0x4c, 0x57,
	0x67, 0x3b, 0xab, 0xdd, 0xbd, 0x15, 0xb5, 0xe6, 0x3c, 0x81, 0xb5, 0x21, 0xd9, 0x35, 0x35, 0x81,
	0x99, 0x56, 0x12, 0xd3, 0xd3, 0xd0, 0xb9, 0xb1, 0xd5, 0xb7, 0xdd, 0xd9, 0xd7, 0xdc, 0xbb, 0xe7,
	0x65, 0x77, 0x7a, 0x42, 0x09, 0xf7, 0xfb, 0xb0, 0x64, 0x48, 0x9c, 0x81, 0x5f, 0xec, 0x17, 0x48,
	0x2a, 0x78, 0xaa, 0x2b, 0xc8, 0xd7, 0xd1, 0x15, 0xfc, 0xbf, 0x03, 0x2a, 0x81, 0x93, 0x73, 0x40,
	0xe2, 0x31, 0x8b, 0x93, 0x56, 0xef, 0x42, 0x71, 0x60, 0x94, 0x46, 0x58, 0x86, 0x69, 0xad, 0xc9,
	0x3a, 0xaa, 0xd7, 0x36, 0xa6, 0xab, 0xbd, 0x07, 0x4e, 0x49, 0x4f, 0xd1, 0x8e, 0x1c, 0xc3, 0xe4,
	0x7c, 0xae, 0xc3, 0xa4, 0xef, 0x69, 0xc4, 0x49, 0xdf, 0xeb, 0x4e, 0x55, 0x12, 0xd5, 0x9b, 0x2a,
	0x35, 0xbe, 0x39, 0x53, 0xa5, 0xc3, 0x75, 0x90, 0xf3, 0x34, 0x95, 0x25, 0x19, 0x59, 0x7c, 0x08,
	0xd0, 0x1b, 0x6e, 0x9d, 0x69, 0xdd, 0x55, 0x37, 0xc1, 0xed, 0xdc, 0x04, 0x57, 0xdd, 0x51, 0x7d,
	0x13, 0xdc, 0x3d, 0xda, 0x48, 0x06, 0xb0, 0x7a, 0x6e, 0xa7, 0xf3, 0xca, 0x82, 0xd9, 0x74, 0xfe,
	0xee, 0x18, 0xbd, 0xa9, 0x08, 0x54, 0xfd, 0xb9, 0x9c, 0x49, 0x14, 0x7e, 0x98, 0x22, 0x9a, 0x94,
	0x44, 0xef, 0x0d, 0x25, 0x52, 0x6a, 0x29, 0x24, 0x06, 0x4b, 0x92, 0xa8, 0x52, 0x8f, 0xfd, 0x36,
	0x53, 0x32, 0x8f, 0x1e, 0x8c, 0xbd, 0xf2, 0x23, 0x58, 0x36, 0xcb, 0xe8, 0x03, 0xb8, 0x01, 0xd7,
	0x7c, 0x2f, 0x69, 0x7e, 0xe7, 0xd7, 0xf1, 0x55, 0x58, 0x87, 0xc5, 0x3e, 0xe9, 0xb1, 0xd7, 0xf7,
	0x9d, 0x05, 0xb6, 0x49, 0xe5, 0xca, 0xfb, 0xbb, 0xaf, 0x0f, 0xfe, 0x83, 0x17, 0x4d, 0x3f, 0x62,
	0xde, 0xa5, 0x35, 0xf8, 0x25, 0xac, 0xe4, 0xe8, 0x5c, 0x7e, 0x87, 0x3d, 0x7d, 0xf6, 0x29, 0xed,
	0xb1, 0x57, 0xf8, 0xbd, 0xa5, 0xaf, 0x4a, 0x56, 0xe6, 0xca, 0x7b, 0x7c, 0x00, 0x05, 0x09, 0xf6,
	0xd0, 0x0f, 0x28, 0xf7, 0x5f, 0x5e, 0x62, 0x97, 0xbf, 0x84, 0x9b, 0xb9, 0x4a, 0x97, 0xdf, 0xe7,
	0x64, 0x96, 0x33, 0xea, 0x63, 0xaf, 0xf2, 0x47, 0x4b, 0x0f, 0x73, 0xbf, 0xd0, 0x55, 0xf7, 0x7a,
	0xfb, 0xdf, 0xeb, 0xf0, 0x86, 0x64, 0xc3, 0x00, 0xa6, 0x94, 0x27, 0xc2, 0x5b, 0x19, 0xf1, 0x7e,
	0xd3, 0x65, 0x3b, 0x83, 0x42, 0x94, 0x8c, 0xb3, 0xf2, 0xd5, 0xef, 0xff, 0x7c, 0x3b, 0xf9, 0x2e,
	0xce, 0x91, 0xb4, 0xff, 0x53, 0x8e, 0x0b, 0xff, 0xb4, 0x60, 0x21, 0xcf, 0x0f, 0xe1, 0x3d, 0x53,
	0xfe, 0x21, 0xde, 0xcc, 0xbe, 0x7f, 0xb1, 0x4d, 0x1a, 0xf3, 0xb1, 0xc4, 0xfc, 0x18, 0x3f, 0xca,
	0x60, 0xa6, 0x5d, 0x8c, 0x20, 0xc7, 0x66, 0x5b, 0x73, 0x42, 0x0c, 0xbe, 0x0a, 0xff, 0xb2, 0x60,
	0x21, 0xcf, 0x2a, 0x99, 0x8b, 0x1b, 0x62, 0xe0, 0xcc, 0xc5, 0x0d, 0x73, 0x63, 0xce, 0x13, 0x59,
	0x5c, 0x15, 0xf7, 0x32, 0xc5, 0x19, 0x98, 0x05, 0x39, 0x1e, 0xe0, 0x10, 0x4f, 0x32, 0xe7, 0x81,
	0xbf, 0x5a, 0x30, 0x5f, 0xe1, 0xdc, 0x60, 0xc5, 0xb0, 0x3c, 0x5a, 0x1f, 0xce, 0x39, 0x3b, 0x7b,
	0xfb, 0x22, 0x5b, 0x74, 0x6d, 0xb7, 0x65, 0x6d, 0x6b, 0x58, 0x1c, 0xa1, 0x36, 0x8c, 0x61, 0x4a,
	0xdd, 0x21, 0xf3, 0x74, 0xa7, 0xcc, 0xa0, 0x79, 0xba, 0xd3, 0x4e, 0xd0, 0x29, 0x4a, 0xf5, 0x15,
	0x5c, 0x22, 0xa6, 0xff, 0x6e, 0x04, 0x39, 0xf6, 0xbd, 0x13, 0x6c, 0x01, 0x54, 0x38, 0xd7, 0xb7,
	0x1d, 0x07, 0xa4, 0xed, 0x5e, 0xac, 0xe2, 0xc0, 0x18, 0xad, 0x5d, 0x90, 0xda, 0x0b, 0x38, 0x6f,
	0xd6, 0xc6, 0x1f, 0x2c, 0xc0, 0x0a, 0xe7, 0x19, 0x73, 0x84, 0x5b, 0xa6, 0xdc, 0x66, 0xa3, 0x66,
	0xdf, 0x1e, 0x29, 0x56, 0xf3, 0x6c, 0x4a, 0x9e, 0x22, 0xde, 0xca, 0x39, 0x0b, 0x2a, 0xf7, 0x91,
	0xce, 0x1f, 0xef, 0xaf, 0x2d, 0xb8, 0x91, 0x41, 0x13, 0xb8, 0x31, 0x4c, 0xac, 0x8b, 0xb5, 0x39,
	0x42, 0xa4, 0x86, 0x5a, 0x93, 0x50, 0x37, 0x71, 0x65, 0x20, 0x14, 0xfe, 0x6c, 0xc1, 0x4c, 0x85,
	0xf3, 0xac, 0xcf, 0x40, 0xe3, 0x01, 0xe4, 0xb8, 0x1e, 0xfb, 0xce, 0x68, 0xc1, 0x9a, 0x6c, 0x4b,
	0x92, 0x95, 0xd0, 0xc9, 0x21, 0x63, 0x6a, 0xa3, 0x3c, 0xaf, 0x6f, 0x2c, 0x78, 0x27, 0x8b, 0x27,
	0x70, 0x73, 0xa8, 0x5e, 0x17, 0x6d, 0x6b, 0x94, 0x50, 0x0d, 0xb6, 0x2e, 0xc1, 0x56, 0xb1, 0x30,
	0x18, 0x0c, 0x7f, 0xb1, 0x60, 0xae, 0xc2, 0x79, 0xff, 0x5b, 0x1b, 0xef, 0x9a, 0xd4, 0x72, 0x7d,
	0x84, 0xed, 0x8e, 0x1a, 0xae, 0x01, 0xef, 0x48, 0xc0, 0x75, 0x2c, 0xe5, 0x00, 0xee, 0x27, 0x5b,
	0xe5, 0xd9, 0xfd, 0xa4, 0x5a, 0x9b, 0x7d, 0xeb, 0x9a, 0x5b, 0x9b, 0x63, 0x02, 0xcc, 0xad, 0xcd,
	0x7b, 0x91, 0x3b, 0x1b, 0x12, 0xd0, 0xc1, 0xd5, 0x61, 0x80, 0x3b, 0x8f, 0x7e, 0x3b, 0x2d, 0x58,
	0xaf, 0x4f, 0x0b, 0xd6, 0xdf, 0xa7, 0x05, 0xeb, 0xd5, 0x59, 0x61, 0xe2, 0xf5, 0x59, 0x61, 0xe2,
	0x8f, 0xb3, 0xc2, 0xc4, 0xe7, 0xa4, 0xe1, 0xc7, 0x07, 0xad, 0x9a, 0x5b, 0x0f, 0x0f, 0x49, 0x14,
	0x72, 0x5e, 0x3f, 0xa0, 0x7e, 0x20, 0x48, 0x53, 0xfe, 0x24, 0x2f, 0xce, 0x67, 0x96, 0x5f, 0x59,
	0x6a, 0x53, 0xf2, 0xf3, 0xc8, 0xbd, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xce, 0x33, 0xb6, 0x08,
	0xe8, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// UniversalValidatorByCore queries the universal validator associated with the given core validator address.
	UniversalValidatorByCore(ctx context.Context, in *QueryUniversalValidatorByCoreRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorByCoreResponse, error)
	// CoreValidatorByUniversal queries the core validator address associated with the given universal validator address.
	CoreValidatorByUniversal(ctx context.Context, in *QueryCoreValidatorByUniversalRequest, opts ...grpc.CallOption) (*QueryCoreValidatorByUniversalResponse, error)
	// AllUniversalValidators queries the details of a specific universal validator by its address.
	AllUniversalValidators(ctx context.Context, in *QueryUniversalValidatorsSetRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorsSetResponse, error)
	// Ballot queries one ballot by ID.
	Ballot(ctx context.Context, in *QueryBallotRequest, opts ...grpc.CallOption) (*QueryBallotResponse, error)
	// Ballots queries all ballots.
	AllBallots(ctx context.Context, in *QueryBallotsRequest, opts ...grpc.CallOption) (*QueryBallotsResponse, error)
	// ActiveBallotIDs queries all active ballot IDs.
	AllActiveBallotIDs(ctx context.Context, in *QueryActiveBallotIDsRequest, opts ...grpc.CallOption) (*QueryActiveBallotIDsResponse, error)
	// ActiveBallots queries all active ballots with full details.
	AllActiveBallots(ctx context.Context, in *QueryActiveBallotsRequest, opts ...grpc.CallOption) (*QueryActiveBallotsResponse, error)
	// ExpiredBallotIDs queries all expired ballot IDs.
	AllExpiredBallotIDs(ctx context.Context, in *QueryExpiredBallotIDsRequest, opts ...grpc.CallOption) (*QueryExpiredBallotIDsResponse, error)
	// ExpiredBallots queries all expired ballots with full details.
	AllExpiredBallots(ctx context.Context, in *QueryExpiredBallotsRequest, opts ...grpc.CallOption) (*QueryExpiredBallotsResponse, error)
	// FinalizedBallotIDs queries all finalized ballot IDs.
	AllFinalizedBallotIDs(ctx context.Context, in *QueryFinalizedBallotIDsRequest, opts ...grpc.CallOption) (*QueryFinalizedBallotIDsResponse, error)
	// FinalizedBallots queries all finalized ballots with full details.
	AllFinalizedBallots(ctx context.Context, in *QueryFinalizedBallotsRequest, opts ...grpc.CallOption) (*QueryFinalizedBallotsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UniversalValidatorByCore(ctx context.Context, in *QueryUniversalValidatorByCoreRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorByCoreResponse, error) {
	out := new(QueryUniversalValidatorByCoreResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/UniversalValidatorByCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoreValidatorByUniversal(ctx context.Context, in *QueryCoreValidatorByUniversalRequest, opts ...grpc.CallOption) (*QueryCoreValidatorByUniversalResponse, error) {
	out := new(QueryCoreValidatorByUniversalResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/CoreValidatorByUniversal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllUniversalValidators(ctx context.Context, in *QueryUniversalValidatorsSetRequest, opts ...grpc.CallOption) (*QueryUniversalValidatorsSetResponse, error) {
	out := new(QueryUniversalValidatorsSetResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllUniversalValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ballot(ctx context.Context, in *QueryBallotRequest, opts ...grpc.CallOption) (*QueryBallotResponse, error) {
	out := new(QueryBallotResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/Ballot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllBallots(ctx context.Context, in *QueryBallotsRequest, opts ...grpc.CallOption) (*QueryBallotsResponse, error) {
	out := new(QueryBallotsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllBallots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllActiveBallotIDs(ctx context.Context, in *QueryActiveBallotIDsRequest, opts ...grpc.CallOption) (*QueryActiveBallotIDsResponse, error) {
	out := new(QueryActiveBallotIDsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllActiveBallotIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllActiveBallots(ctx context.Context, in *QueryActiveBallotsRequest, opts ...grpc.CallOption) (*QueryActiveBallotsResponse, error) {
	out := new(QueryActiveBallotsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllActiveBallots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExpiredBallotIDs(ctx context.Context, in *QueryExpiredBallotIDsRequest, opts ...grpc.CallOption) (*QueryExpiredBallotIDsResponse, error) {
	out := new(QueryExpiredBallotIDsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllExpiredBallotIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExpiredBallots(ctx context.Context, in *QueryExpiredBallotsRequest, opts ...grpc.CallOption) (*QueryExpiredBallotsResponse, error) {
	out := new(QueryExpiredBallotsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllExpiredBallots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFinalizedBallotIDs(ctx context.Context, in *QueryFinalizedBallotIDsRequest, opts ...grpc.CallOption) (*QueryFinalizedBallotIDsResponse, error) {
	out := new(QueryFinalizedBallotIDsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllFinalizedBallotIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFinalizedBallots(ctx context.Context, in *QueryFinalizedBallotsRequest, opts ...grpc.CallOption) (*QueryFinalizedBallotsResponse, error) {
	out := new(QueryFinalizedBallotsResponse)
	err := c.cc.Invoke(ctx, "/uvalidator.v1.Query/AllFinalizedBallots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// UniversalValidatorByCore queries the universal validator associated with the given core validator address.
	UniversalValidatorByCore(context.Context, *QueryUniversalValidatorByCoreRequest) (*QueryUniversalValidatorByCoreResponse, error)
	// CoreValidatorByUniversal queries the core validator address associated with the given universal validator address.
	CoreValidatorByUniversal(context.Context, *QueryCoreValidatorByUniversalRequest) (*QueryCoreValidatorByUniversalResponse, error)
	// AllUniversalValidators queries the details of a specific universal validator by its address.
	AllUniversalValidators(context.Context, *QueryUniversalValidatorsSetRequest) (*QueryUniversalValidatorsSetResponse, error)
	// Ballot queries one ballot by ID.
	Ballot(context.Context, *QueryBallotRequest) (*QueryBallotResponse, error)
	// Ballots queries all ballots.
	AllBallots(context.Context, *QueryBallotsRequest) (*QueryBallotsResponse, error)
	// ActiveBallotIDs queries all active ballot IDs.
	AllActiveBallotIDs(context.Context, *QueryActiveBallotIDsRequest) (*QueryActiveBallotIDsResponse, error)
	// ActiveBallots queries all active ballots with full details.
	AllActiveBallots(context.Context, *QueryActiveBallotsRequest) (*QueryActiveBallotsResponse, error)
	// ExpiredBallotIDs queries all expired ballot IDs.
	AllExpiredBallotIDs(context.Context, *QueryExpiredBallotIDsRequest) (*QueryExpiredBallotIDsResponse, error)
	// ExpiredBallots queries all expired ballots with full details.
	AllExpiredBallots(context.Context, *QueryExpiredBallotsRequest) (*QueryExpiredBallotsResponse, error)
	// FinalizedBallotIDs queries all finalized ballot IDs.
	AllFinalizedBallotIDs(context.Context, *QueryFinalizedBallotIDsRequest) (*QueryFinalizedBallotIDsResponse, error)
	// FinalizedBallots queries all finalized ballots with full details.
	AllFinalizedBallots(context.Context, *QueryFinalizedBallotsRequest) (*QueryFinalizedBallotsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UniversalValidatorByCore(ctx context.Context, req *QueryUniversalValidatorByCoreRequest) (*QueryUniversalValidatorByCoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniversalValidatorByCore not implemented")
}
func (*UnimplementedQueryServer) CoreValidatorByUniversal(ctx context.Context, req *QueryCoreValidatorByUniversalRequest) (*QueryCoreValidatorByUniversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoreValidatorByUniversal not implemented")
}
func (*UnimplementedQueryServer) AllUniversalValidators(ctx context.Context, req *QueryUniversalValidatorsSetRequest) (*QueryUniversalValidatorsSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUniversalValidators not implemented")
}
func (*UnimplementedQueryServer) Ballot(ctx context.Context, req *QueryBallotRequest) (*QueryBallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ballot not implemented")
}
func (*UnimplementedQueryServer) AllBallots(ctx context.Context, req *QueryBallotsRequest) (*QueryBallotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBallots not implemented")
}
func (*UnimplementedQueryServer) AllActiveBallotIDs(ctx context.Context, req *QueryActiveBallotIDsRequest) (*QueryActiveBallotIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllActiveBallotIDs not implemented")
}
func (*UnimplementedQueryServer) AllActiveBallots(ctx context.Context, req *QueryActiveBallotsRequest) (*QueryActiveBallotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllActiveBallots not implemented")
}
func (*UnimplementedQueryServer) AllExpiredBallotIDs(ctx context.Context, req *QueryExpiredBallotIDsRequest) (*QueryExpiredBallotIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExpiredBallotIDs not implemented")
}
func (*UnimplementedQueryServer) AllExpiredBallots(ctx context.Context, req *QueryExpiredBallotsRequest) (*QueryExpiredBallotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExpiredBallots not implemented")
}
func (*UnimplementedQueryServer) AllFinalizedBallotIDs(ctx context.Context, req *QueryFinalizedBallotIDsRequest) (*QueryFinalizedBallotIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFinalizedBallotIDs not implemented")
}
func (*UnimplementedQueryServer) AllFinalizedBallots(ctx context.Context, req *QueryFinalizedBallotsRequest) (*QueryFinalizedBallotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFinalizedBallots not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UniversalValidatorByCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUniversalValidatorByCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UniversalValidatorByCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/UniversalValidatorByCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UniversalValidatorByCore(ctx, req.(*QueryUniversalValidatorByCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoreValidatorByUniversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoreValidatorByUniversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoreValidatorByUniversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/CoreValidatorByUniversal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoreValidatorByUniversal(ctx, req.(*QueryCoreValidatorByUniversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllUniversalValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUniversalValidatorsSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllUniversalValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllUniversalValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllUniversalValidators(ctx, req.(*QueryUniversalValidatorsSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ballot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ballot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/Ballot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ballot(ctx, req.(*QueryBallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllBallots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBallotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllBallots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllBallots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllBallots(ctx, req.(*QueryBallotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllActiveBallotIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveBallotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllActiveBallotIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllActiveBallotIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllActiveBallotIDs(ctx, req.(*QueryActiveBallotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllActiveBallots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveBallotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllActiveBallots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllActiveBallots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllActiveBallots(ctx, req.(*QueryActiveBallotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExpiredBallotIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiredBallotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExpiredBallotIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllExpiredBallotIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExpiredBallotIDs(ctx, req.(*QueryExpiredBallotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExpiredBallots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiredBallotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExpiredBallots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllExpiredBallots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExpiredBallots(ctx, req.(*QueryExpiredBallotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFinalizedBallotIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalizedBallotIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFinalizedBallotIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllFinalizedBallotIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFinalizedBallotIDs(ctx, req.(*QueryFinalizedBallotIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFinalizedBallots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalizedBallotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFinalizedBallots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uvalidator.v1.Query/AllFinalizedBallots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFinalizedBallots(ctx, req.(*QueryFinalizedBallotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uvalidator.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UniversalValidatorByCore",
			Handler:    _Query_UniversalValidatorByCore_Handler,
		},
		{
			MethodName: "CoreValidatorByUniversal",
			Handler:    _Query_CoreValidatorByUniversal_Handler,
		},
		{
			MethodName: "AllUniversalValidators",
			Handler:    _Query_AllUniversalValidators_Handler,
		},
		{
			MethodName: "Ballot",
			Handler:    _Query_Ballot_Handler,
		},
		{
			MethodName: "AllBallots",
			Handler:    _Query_AllBallots_Handler,
		},
		{
			MethodName: "AllActiveBallotIDs",
			Handler:    _Query_AllActiveBallotIDs_Handler,
		},
		{
			MethodName: "AllActiveBallots",
			Handler:    _Query_AllActiveBallots_Handler,
		},
		{
			MethodName: "AllExpiredBallotIDs",
			Handler:    _Query_AllExpiredBallotIDs_Handler,
		},
		{
			MethodName: "AllExpiredBallots",
			Handler:    _Query_AllExpiredBallots_Handler,
		},
		{
			MethodName: "AllFinalizedBallotIDs",
			Handler:    _Query_AllFinalizedBallotIDs_Handler,
		},
		{
			MethodName: "AllFinalizedBallots",
			Handler:    _Query_AllFinalizedBallots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uvalidator/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorByCoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorByCoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorByCoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoreValidatorAddress) > 0 {
		i -= len(m.CoreValidatorAddress)
		copy(dAtA[i:], m.CoreValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CoreValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorByCoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorByCoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorByCoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniversalValidator) > 0 {
		i -= len(m.UniversalValidator)
		copy(dAtA[i:], m.UniversalValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniversalValidator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoreValidatorByUniversalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoreValidatorByUniversalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoreValidatorByUniversalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniversalValidatorAddress) > 0 {
		i -= len(m.UniversalValidatorAddress)
		copy(dAtA[i:], m.UniversalValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniversalValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoreValidatorByUniversalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoreValidatorByUniversalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoreValidatorByUniversalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoreValidatorAddress) > 0 {
		i -= len(m.CoreValidatorAddress)
		copy(dAtA[i:], m.CoreValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CoreValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorsSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorsSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorsSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUniversalValidatorsSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUniversalValidatorsSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUniversalValidatorsSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ballot != nil {
		{
			size, err := m.Ballot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ballots) > 0 {
		for iNdEx := len(m.Ballots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ballots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveBallotIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveBallotIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveBallotIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveBallotIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveBallotIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveBallotIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveBallotsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveBallotsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveBallotsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveBallotsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveBallotsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveBallotsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ballots) > 0 {
		for iNdEx := len(m.Ballots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ballots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiredBallotIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiredBallotIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiredBallotIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiredBallotIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiredBallotIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiredBallotIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiredBallotsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiredBallotsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiredBallotsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiredBallotsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiredBallotsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiredBallotsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ballots) > 0 {
		for iNdEx := len(m.Ballots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ballots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedBallotIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedBallotIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedBallotIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedBallotIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedBallotIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedBallotIDsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedBallotsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedBallotsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedBallotsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFinalizedBallotsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFinalizedBallotsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFinalizedBallotsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ballots) > 0 {
		for iNdEx := len(m.Ballots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ballots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUniversalValidatorByCoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoreValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUniversalValidatorByCoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniversalValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCoreValidatorByUniversalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniversalValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCoreValidatorByUniversalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoreValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUniversalValidatorsSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUniversalValidatorsSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBallotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBallotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBallotsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBallotsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ballots) > 0 {
		for _, e := range m.Ballots {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveBallotIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveBallotIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveBallotsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveBallotsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ballots) > 0 {
		for _, e := range m.Ballots {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpiredBallotIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpiredBallotIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpiredBallotsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpiredBallotsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ballots) > 0 {
		for _, e := range m.Ballots {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalizedBallotIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalizedBallotIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalizedBallotsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFinalizedBallotsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ballots) > 0 {
		for _, e := range m.Ballots {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorByCoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorByCoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorByCoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversalValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoreValidatorByUniversalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniversalValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniversalValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoreValidatorByUniversalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoreValidatorByUniversalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoreValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorsSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUniversalValidatorsSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUniversalValidatorsSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballots = append(m.Ballots, &Ballot{})
			if err := m.Ballots[len(m.Ballots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveBallotIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveBallotIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveBallotIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveBallotIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveBallotIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveBallotIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveBallotsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveBallotsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveBallotsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveBallotsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveBallotsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveBallotsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballots = append(m.Ballots, &Ballot{})
			if err := m.Ballots[len(m.Ballots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiredBallotIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiredBallotIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiredBallotIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiredBallotIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiredBallotIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiredBallotIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiredBallotsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiredBallotsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiredBallotsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiredBallotsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiredBallotsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiredBallotsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballots = append(m.Ballots, &Ballot{})
			if err := m.Ballots[len(m.Ballots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedBallotIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedBallotIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedBallotIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedBallotIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedBallotIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedBallotIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedBallotsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedBallotsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedBallotsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFinalizedBallotsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFinalizedBallotsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFinalizedBallotsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballots = append(m.Ballots, &Ballot{})
			if err := m.Ballots[len(m.Ballots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
